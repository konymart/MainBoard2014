
Master_Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000172  00800100  00005f58  00005fec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005f58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000381  00800272  00800272  0000615e  2**0
                  ALLOC
  3 .stab         00000db0  00000000  00000000  00006160  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000026f  00000000  00000000  00006f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003a0  00000000  00000000  0000717f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000091f  00000000  00000000  0000751f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005a58  00000000  00000000  00007e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000227b  00000000  00000000  0000d896  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006209  00000000  00000000  0000fb11  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a00  00000000  00000000  00015d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000013ff  00000000  00000000  0001671c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000be5  00000000  00000000  00017b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000b04  00000000  00000000  00018700  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000048  00000000  00000000  00019204  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <__vector_1>
       8:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <__vector_2>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 ce 0c 	jmp	0x199c	; 0x199c <__vector_5>
      18:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <__vector_6>
      1c:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <__vector_7>
      20:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__vector_8>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__vector_10>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 01 02 	jmp	0x402	; 0x402 <__vector_18>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      78:	0c 94 a2 08 	jmp	0x1144	; 0x1144 <__vector_30>
      7c:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__vector_31>
      80:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__vector_32>
      84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e5       	ldi	r30, 0x58	; 88
      a0:	ff e5       	ldi	r31, 0x5F	; 95
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a2 37       	cpi	r26, 0x72	; 114
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	15 e0       	ldi	r17, 0x05	; 5
      b0:	a2 e7       	ldi	r26, 0x72	; 114
      b2:	b2 e0       	ldi	r27, 0x02	; 2
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a3 3f       	cpi	r26, 0xF3	; 243
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 01 12 	call	0x2402	; 0x2402 <main>
      c2:	0c 94 aa 2f 	jmp	0x5f54	; 0x5f54 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <MuSetup>:
static char EI[][4]			= {"01", "02", "04", "08"};

static void (*MuTxChar[4])(uint8_t);
static void (*MuRxChar[4])(uint8_t*);

void MuSetup(void) {
      ca:	df 93       	push	r29
      cc:	cf 93       	push	r28
      ce:	0f 92       	push	r0
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
	uint8_t loop;
	
	for(loop=0; loop<4; loop++) {
      d4:	19 82       	std	Y+1, r1	; 0x01
      d6:	2b c0       	rjmp	.+86     	; 0x12e <MuSetup+0x64>
		MuTxChar[loop] = UartSend[loop];
      d8:	89 81       	ldd	r24, Y+1	; 0x01
      da:	88 2f       	mov	r24, r24
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	29 81       	ldd	r18, Y+1	; 0x01
      e0:	22 2f       	mov	r18, r18
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	22 0f       	add	r18, r18
      e6:	33 1f       	adc	r19, r19
      e8:	20 53       	subi	r18, 0x30	; 48
      ea:	3b 4f       	sbci	r19, 0xFB	; 251
      ec:	f9 01       	movw	r30, r18
      ee:	20 81       	ld	r18, Z
      f0:	31 81       	ldd	r19, Z+1	; 0x01
      f2:	88 0f       	add	r24, r24
      f4:	99 1f       	adc	r25, r25
      f6:	8d 58       	subi	r24, 0x8D	; 141
      f8:	9d 4f       	sbci	r25, 0xFD	; 253
      fa:	fc 01       	movw	r30, r24
      fc:	31 83       	std	Z+1, r19	; 0x01
      fe:	20 83       	st	Z, r18
		MuRxChar[loop] = UartReceive[loop];
     100:	89 81       	ldd	r24, Y+1	; 0x01
     102:	88 2f       	mov	r24, r24
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	29 81       	ldd	r18, Y+1	; 0x01
     108:	22 2f       	mov	r18, r18
     10a:	30 e0       	ldi	r19, 0x00	; 0
     10c:	22 0f       	add	r18, r18
     10e:	33 1f       	adc	r19, r19
     110:	28 52       	subi	r18, 0x28	; 40
     112:	3b 4f       	sbci	r19, 0xFB	; 251
     114:	f9 01       	movw	r30, r18
     116:	20 81       	ld	r18, Z
     118:	31 81       	ldd	r19, Z+1	; 0x01
     11a:	88 0f       	add	r24, r24
     11c:	99 1f       	adc	r25, r25
     11e:	85 58       	subi	r24, 0x85	; 133
     120:	9d 4f       	sbci	r25, 0xFD	; 253
     122:	fc 01       	movw	r30, r24
     124:	31 83       	std	Z+1, r19	; 0x01
     126:	20 83       	st	Z, r18
static void (*MuRxChar[4])(uint8_t*);

void MuSetup(void) {
	uint8_t loop;
	
	for(loop=0; loop<4; loop++) {
     128:	89 81       	ldd	r24, Y+1	; 0x01
     12a:	8f 5f       	subi	r24, 0xFF	; 255
     12c:	89 83       	std	Y+1, r24	; 0x01
     12e:	89 81       	ldd	r24, Y+1	; 0x01
     130:	84 30       	cpi	r24, 0x04	; 4
     132:	90 f2       	brcs	.-92     	; 0xd8 <MuSetup+0xe>
		MuTxChar[loop] = UartSend[loop];
		MuRxChar[loop] = UartReceive[loop];
	}
}
     134:	0f 90       	pop	r0
     136:	cf 91       	pop	r28
     138:	df 91       	pop	r29
     13a:	08 95       	ret

0000013c <MuInitialize>:

void MuInitialize(void) {
     13c:	df 93       	push	r29
     13e:	cf 93       	push	r28
     140:	cd b7       	in	r28, 0x3d	; 61
     142:	de b7       	in	r29, 0x3e	; 62
// DIPスイッチの初期化
	DipSwitchInitialize();
     144:	0e 94 a0 10 	call	0x2140	; 0x2140 <DipSwitchInitialize>
// UARTの初期化 (速度設定19200bps)
	UartInitialize[MU_UART_NO](UART_RE|UART_TE, 51);
     148:	20 91 e0 04 	lds	r18, 0x04E0
     14c:	30 91 e1 04 	lds	r19, 0x04E1
     150:	88 e1       	ldi	r24, 0x18	; 24
     152:	63 e3       	ldi	r22, 0x33	; 51
     154:	70 e0       	ldi	r23, 0x00	; 0
     156:	f9 01       	movw	r30, r18
     158:	09 95       	icall
	
// スイッチから使用するチャンネル及びグループを決定
	if( GetDipSwitchStatus() & DIP_0 ) {
     15a:	0e 94 be 11 	call	0x237c	; 0x237c <GetDipSwitchStatus>
     15e:	88 2f       	mov	r24, r24
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	81 70       	andi	r24, 0x01	; 1
     164:	90 70       	andi	r25, 0x00	; 0
     166:	88 23       	and	r24, r24
     168:	19 f0       	breq	.+6      	; 0x170 <MuInitialize+0x34>
		selectNumber = 0;
     16a:	10 92 72 02 	sts	0x0272, r1
     16e:	26 c0       	rjmp	.+76     	; 0x1bc <MuInitialize+0x80>
	}
	else if( GetDipSwitchStatus() & DIP_1 ) {
     170:	0e 94 be 11 	call	0x237c	; 0x237c <GetDipSwitchStatus>
     174:	88 2f       	mov	r24, r24
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	82 70       	andi	r24, 0x02	; 2
     17a:	90 70       	andi	r25, 0x00	; 0
     17c:	00 97       	sbiw	r24, 0x00	; 0
     17e:	21 f0       	breq	.+8      	; 0x188 <MuInitialize+0x4c>
		selectNumber = 1;
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	80 93 72 02 	sts	0x0272, r24
     186:	1a c0       	rjmp	.+52     	; 0x1bc <MuInitialize+0x80>
	}
	else if( GetDipSwitchStatus() & DIP_2 ) {
     188:	0e 94 be 11 	call	0x237c	; 0x237c <GetDipSwitchStatus>
     18c:	88 2f       	mov	r24, r24
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	84 70       	andi	r24, 0x04	; 4
     192:	90 70       	andi	r25, 0x00	; 0
     194:	00 97       	sbiw	r24, 0x00	; 0
     196:	21 f0       	breq	.+8      	; 0x1a0 <MuInitialize+0x64>
		selectNumber = 2;
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	80 93 72 02 	sts	0x0272, r24
     19e:	0e c0       	rjmp	.+28     	; 0x1bc <MuInitialize+0x80>
	}
	else if( GetDipSwitchStatus() & DIP_3 ) {
     1a0:	0e 94 be 11 	call	0x237c	; 0x237c <GetDipSwitchStatus>
     1a4:	88 2f       	mov	r24, r24
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	88 70       	andi	r24, 0x08	; 8
     1aa:	90 70       	andi	r25, 0x00	; 0
     1ac:	00 97       	sbiw	r24, 0x00	; 0
     1ae:	21 f0       	breq	.+8      	; 0x1b8 <MuInitialize+0x7c>
		selectNumber = 3;
     1b0:	83 e0       	ldi	r24, 0x03	; 3
     1b2:	80 93 72 02 	sts	0x0272, r24
     1b6:	02 c0       	rjmp	.+4      	; 0x1bc <MuInitialize+0x80>
	}
	else {
		selectNumber = 0;
     1b8:	10 92 72 02 	sts	0x0272, r1
	}

// グループIDを設定
	MuSendCommand("GI", Group[selectNumber], 2);
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	31 e0       	ldi	r19, 0x01	; 1
     1c0:	80 91 72 02 	lds	r24, 0x0272
     1c4:	88 2f       	mov	r24, r24
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	88 0f       	add	r24, r24
     1ca:	99 1f       	adc	r25, r25
     1cc:	88 0f       	add	r24, r24
     1ce:	99 1f       	adc	r25, r25
     1d0:	28 0f       	add	r18, r24
     1d2:	39 1f       	adc	r19, r25
     1d4:	80 e4       	ldi	r24, 0x40	; 64
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	b9 01       	movw	r22, r18
     1da:	42 e0       	ldi	r20, 0x02	; 2
     1dc:	0e 94 3a 01 	call	0x274	; 0x274 <MuSendCommand>
// チャンネルを設定
	MuSendCommand("CH", Channel[selectNumber], 2);
     1e0:	20 e1       	ldi	r18, 0x10	; 16
     1e2:	31 e0       	ldi	r19, 0x01	; 1
     1e4:	80 91 72 02 	lds	r24, 0x0272
     1e8:	88 2f       	mov	r24, r24
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	88 0f       	add	r24, r24
     1ee:	99 1f       	adc	r25, r25
     1f0:	88 0f       	add	r24, r24
     1f2:	99 1f       	adc	r25, r25
     1f4:	28 0f       	add	r18, r24
     1f6:	39 1f       	adc	r19, r25
     1f8:	83 e4       	ldi	r24, 0x43	; 67
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	b9 01       	movw	r22, r18
     1fe:	42 e0       	ldi	r20, 0x02	; 2
     200:	0e 94 3a 01 	call	0x274	; 0x274 <MuSendCommand>
// 機器IDを設定
	MuSendCommand("EI", EI[selectNumber], 2);
     204:	20 e3       	ldi	r18, 0x30	; 48
     206:	31 e0       	ldi	r19, 0x01	; 1
     208:	80 91 72 02 	lds	r24, 0x0272
     20c:	88 2f       	mov	r24, r24
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	88 0f       	add	r24, r24
     212:	99 1f       	adc	r25, r25
     214:	88 0f       	add	r24, r24
     216:	99 1f       	adc	r25, r25
     218:	28 0f       	add	r18, r24
     21a:	39 1f       	adc	r19, r25
     21c:	86 e4       	ldi	r24, 0x46	; 70
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	b9 01       	movw	r22, r18
     222:	42 e0       	ldi	r20, 0x02	; 2
     224:	0e 94 3a 01 	call	0x274	; 0x274 <MuSendCommand>
// 目的局IDを設定
	MuSendCommand("DI", DI[selectNumber], 2);
     228:	20 e2       	ldi	r18, 0x20	; 32
     22a:	31 e0       	ldi	r19, 0x01	; 1
     22c:	80 91 72 02 	lds	r24, 0x0272
     230:	88 2f       	mov	r24, r24
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	88 0f       	add	r24, r24
     236:	99 1f       	adc	r25, r25
     238:	88 0f       	add	r24, r24
     23a:	99 1f       	adc	r25, r25
     23c:	28 0f       	add	r18, r24
     23e:	39 1f       	adc	r19, r25
     240:	89 e4       	ldi	r24, 0x49	; 73
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	b9 01       	movw	r22, r18
     246:	42 e0       	ldi	r20, 0x02	; 2
     248:	0e 94 3a 01 	call	0x274	; 0x274 <MuSendCommand>
// ボーレートを4800bpsに
	MuSendCommand("BR", "48", 2);
     24c:	8c e4       	ldi	r24, 0x4C	; 76
     24e:	91 e0       	ldi	r25, 0x01	; 1
     250:	2f e4       	ldi	r18, 0x4F	; 79
     252:	31 e0       	ldi	r19, 0x01	; 1
     254:	b9 01       	movw	r22, r18
     256:	42 e0       	ldi	r20, 0x02	; 2
     258:	0e 94 3a 01 	call	0x274	; 0x274 <MuSendCommand>

// UARTの初期化 (速度設定4800bps)
	UartInitialize[MU_UART_NO](UART_RE|UART_TE|UART_RXCIE, 207);
     25c:	20 91 e0 04 	lds	r18, 0x04E0
     260:	30 91 e1 04 	lds	r19, 0x04E1
     264:	88 e9       	ldi	r24, 0x98	; 152
     266:	6f ec       	ldi	r22, 0xCF	; 207
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	f9 01       	movw	r30, r18
     26c:	09 95       	icall
}
     26e:	cf 91       	pop	r28
     270:	df 91       	pop	r29
     272:	08 95       	ret

00000274 <MuSendCommand>:

static void MuSendCommand(char* cmd, char* value, uint8_t valueLen) {
     274:	df 93       	push	r29
     276:	cf 93       	push	r28
     278:	00 d0       	rcall	.+0      	; 0x27a <MuSendCommand+0x6>
     27a:	00 d0       	rcall	.+0      	; 0x27c <MuSendCommand+0x8>
     27c:	0f 92       	push	r0
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
     282:	9a 83       	std	Y+2, r25	; 0x02
     284:	89 83       	std	Y+1, r24	; 0x01
     286:	7c 83       	std	Y+4, r23	; 0x04
     288:	6b 83       	std	Y+3, r22	; 0x03
     28a:	4d 83       	std	Y+5, r20	; 0x05
	MuTxChar[MU_UART_NO]('@');
     28c:	20 91 73 02 	lds	r18, 0x0273
     290:	30 91 74 02 	lds	r19, 0x0274
     294:	80 e4       	ldi	r24, 0x40	; 64
     296:	f9 01       	movw	r30, r18
     298:	09 95       	icall
	MuTxChar[MU_UART_NO](cmd[0]);
     29a:	20 91 73 02 	lds	r18, 0x0273
     29e:	30 91 74 02 	lds	r19, 0x0274
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	9a 81       	ldd	r25, Y+2	; 0x02
     2a6:	fc 01       	movw	r30, r24
     2a8:	80 81       	ld	r24, Z
     2aa:	f9 01       	movw	r30, r18
     2ac:	09 95       	icall
	MuTxChar[MU_UART_NO](cmd[1]);
     2ae:	20 91 73 02 	lds	r18, 0x0273
     2b2:	30 91 74 02 	lds	r19, 0x0274
     2b6:	89 81       	ldd	r24, Y+1	; 0x01
     2b8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	fc 01       	movw	r30, r24
     2be:	80 81       	ld	r24, Z
     2c0:	f9 01       	movw	r30, r18
     2c2:	09 95       	icall
	
	while( valueLen-- ) {
     2c4:	0f c0       	rjmp	.+30     	; 0x2e4 <MuSendCommand+0x70>
		MuTxChar[MU_UART_NO](*value);
     2c6:	20 91 73 02 	lds	r18, 0x0273
     2ca:	30 91 74 02 	lds	r19, 0x0274
     2ce:	8b 81       	ldd	r24, Y+3	; 0x03
     2d0:	9c 81       	ldd	r25, Y+4	; 0x04
     2d2:	fc 01       	movw	r30, r24
     2d4:	80 81       	ld	r24, Z
     2d6:	f9 01       	movw	r30, r18
     2d8:	09 95       	icall
		value++;
     2da:	8b 81       	ldd	r24, Y+3	; 0x03
     2dc:	9c 81       	ldd	r25, Y+4	; 0x04
     2de:	01 96       	adiw	r24, 0x01	; 1
     2e0:	9c 83       	std	Y+4, r25	; 0x04
     2e2:	8b 83       	std	Y+3, r24	; 0x03
static void MuSendCommand(char* cmd, char* value, uint8_t valueLen) {
	MuTxChar[MU_UART_NO]('@');
	MuTxChar[MU_UART_NO](cmd[0]);
	MuTxChar[MU_UART_NO](cmd[1]);
	
	while( valueLen-- ) {
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	9d 81       	ldd	r25, Y+5	; 0x05
     2e8:	99 23       	and	r25, r25
     2ea:	09 f4       	brne	.+2      	; 0x2ee <MuSendCommand+0x7a>
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	9d 81       	ldd	r25, Y+5	; 0x05
     2f0:	91 50       	subi	r25, 0x01	; 1
     2f2:	9d 83       	std	Y+5, r25	; 0x05
     2f4:	88 23       	and	r24, r24
     2f6:	39 f7       	brne	.-50     	; 0x2c6 <MuSendCommand+0x52>
		MuTxChar[MU_UART_NO](*value);
		value++;
	}
	
	MuTxChar[MU_UART_NO]('\r');
     2f8:	20 91 73 02 	lds	r18, 0x0273
     2fc:	30 91 74 02 	lds	r19, 0x0274
     300:	8d e0       	ldi	r24, 0x0D	; 13
     302:	f9 01       	movw	r30, r18
     304:	09 95       	icall
	MuTxChar[MU_UART_NO]('\n');
     306:	20 91 73 02 	lds	r18, 0x0273
     30a:	30 91 74 02 	lds	r19, 0x0274
     30e:	8a e0       	ldi	r24, 0x0A	; 10
     310:	f9 01       	movw	r30, r18
     312:	09 95       	icall
}
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	0f 90       	pop	r0
     31e:	cf 91       	pop	r28
     320:	df 91       	pop	r29
     322:	08 95       	ret

00000324 <CtrlDataInitialize>:
static volatile char check[] = "DR=";
static union controllerData ctrlData;
static union controllerData keepCtrlData;
static uint8_t defaultCtrlData[RC_DATA_LENGTH] = RC_DEFAULT_DATA;

void CtrlDataInitialize(void) {
     324:	df 93       	push	r29
     326:	cf 93       	push	r28
     328:	0f 92       	push	r0
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
	uint8_t loop;
	
	CtrlLost = false;
     32e:	10 92 a7 04 	sts	0x04A7, r1
	count = 0;
     332:	10 92 83 02 	sts	0x0283, r1
	phase = false;
     336:	10 92 86 02 	sts	0x0286, r1
	timerCount = 0;
     33a:	10 92 85 02 	sts	0x0285, r1
     33e:	10 92 84 02 	sts	0x0284, r1
#if defined(USE_SENSOR_HUB)
	SensorTimerCount = 0;
#endif
// 受信データに初期データを代入
	for(loop=0; loop<RC_DATA_LENGTH; loop++) {
     342:	19 82       	std	Y+1, r1	; 0x01
     344:	11 c0       	rjmp	.+34     	; 0x368 <CtrlDataInitialize+0x44>
		ctrlData.buf[loop] = defaultCtrlData[loop];
     346:	89 81       	ldd	r24, Y+1	; 0x01
     348:	88 2f       	mov	r24, r24
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	29 81       	ldd	r18, Y+1	; 0x01
     34e:	22 2f       	mov	r18, r18
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	2a 5a       	subi	r18, 0xAA	; 170
     354:	3e 4f       	sbci	r19, 0xFE	; 254
     356:	f9 01       	movw	r30, r18
     358:	20 81       	ld	r18, Z
     35a:	80 56       	subi	r24, 0x60	; 96
     35c:	9d 4f       	sbci	r25, 0xFD	; 253
     35e:	fc 01       	movw	r30, r24
     360:	20 83       	st	Z, r18
	timerCount = 0;
#if defined(USE_SENSOR_HUB)
	SensorTimerCount = 0;
#endif
// 受信データに初期データを代入
	for(loop=0; loop<RC_DATA_LENGTH; loop++) {
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	8f 5f       	subi	r24, 0xFF	; 255
     366:	89 83       	std	Y+1, r24	; 0x01
     368:	89 81       	ldd	r24, Y+1	; 0x01
     36a:	84 30       	cpi	r24, 0x04	; 4
     36c:	60 f3       	brcs	.-40     	; 0x346 <CtrlDataInitialize+0x22>
		ctrlData.buf[loop] = defaultCtrlData[loop];
	}	
}
     36e:	0f 90       	pop	r0
     370:	cf 91       	pop	r28
     372:	df 91       	pop	r29
     374:	08 95       	ret

00000376 <GetControllerData>:

union controllerData* GetControllerData(void) {
     376:	df 93       	push	r29
     378:	cf 93       	push	r28
     37a:	0f 92       	push	r0
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
	uint8_t loop;
	
	cli();
     380:	f8 94       	cli
	
	for(loop=0; loop<RC_DATA_LENGTH; loop++) {
     382:	19 82       	std	Y+1, r1	; 0x01
     384:	11 c0       	rjmp	.+34     	; 0x3a8 <GetControllerData+0x32>
		keepCtrlData.buf[loop] = ctrlData.buf[loop];
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	88 2f       	mov	r24, r24
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	29 81       	ldd	r18, Y+1	; 0x01
     38e:	22 2f       	mov	r18, r18
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	20 56       	subi	r18, 0x60	; 96
     394:	3d 4f       	sbci	r19, 0xFD	; 253
     396:	f9 01       	movw	r30, r18
     398:	20 81       	ld	r18, Z
     39a:	8c 55       	subi	r24, 0x5C	; 92
     39c:	9d 4f       	sbci	r25, 0xFD	; 253
     39e:	fc 01       	movw	r30, r24
     3a0:	20 83       	st	Z, r18
union controllerData* GetControllerData(void) {
	uint8_t loop;
	
	cli();
	
	for(loop=0; loop<RC_DATA_LENGTH; loop++) {
     3a2:	89 81       	ldd	r24, Y+1	; 0x01
     3a4:	8f 5f       	subi	r24, 0xFF	; 255
     3a6:	89 83       	std	Y+1, r24	; 0x01
     3a8:	89 81       	ldd	r24, Y+1	; 0x01
     3aa:	84 30       	cpi	r24, 0x04	; 4
     3ac:	60 f3       	brcs	.-40     	; 0x386 <GetControllerData+0x10>
		keepCtrlData.buf[loop] = ctrlData.buf[loop];
	}
	
	sei();
     3ae:	78 94       	sei
	
	return &keepCtrlData;
     3b0:	84 ea       	ldi	r24, 0xA4	; 164
     3b2:	92 e0       	ldi	r25, 0x02	; 2
}
     3b4:	0f 90       	pop	r0
     3b6:	cf 91       	pop	r28
     3b8:	df 91       	pop	r29
     3ba:	08 95       	ret

000003bc <ControllerDataReset>:

union controllerData* ControllerDataReset(void) {
     3bc:	df 93       	push	r29
     3be:	cf 93       	push	r28
     3c0:	0f 92       	push	r0
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
	uint8_t loop;
	
	cli();
     3c6:	f8 94       	cli
	
	for(loop=0; loop<RC_DATA_LENGTH; loop++) {
     3c8:	19 82       	std	Y+1, r1	; 0x01
     3ca:	11 c0       	rjmp	.+34     	; 0x3ee <ControllerDataReset+0x32>
		keepCtrlData.buf[loop] = defaultCtrlData[loop];
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
     3ce:	88 2f       	mov	r24, r24
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	29 81       	ldd	r18, Y+1	; 0x01
     3d4:	22 2f       	mov	r18, r18
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	2a 5a       	subi	r18, 0xAA	; 170
     3da:	3e 4f       	sbci	r19, 0xFE	; 254
     3dc:	f9 01       	movw	r30, r18
     3de:	20 81       	ld	r18, Z
     3e0:	8c 55       	subi	r24, 0x5C	; 92
     3e2:	9d 4f       	sbci	r25, 0xFD	; 253
     3e4:	fc 01       	movw	r30, r24
     3e6:	20 83       	st	Z, r18
union controllerData* ControllerDataReset(void) {
	uint8_t loop;
	
	cli();
	
	for(loop=0; loop<RC_DATA_LENGTH; loop++) {
     3e8:	89 81       	ldd	r24, Y+1	; 0x01
     3ea:	8f 5f       	subi	r24, 0xFF	; 255
     3ec:	89 83       	std	Y+1, r24	; 0x01
     3ee:	89 81       	ldd	r24, Y+1	; 0x01
     3f0:	84 30       	cpi	r24, 0x04	; 4
     3f2:	60 f3       	brcs	.-40     	; 0x3cc <ControllerDataReset+0x10>
		keepCtrlData.buf[loop] = defaultCtrlData[loop];
	}
	
	sei();
     3f4:	78 94       	sei
	
	return &keepCtrlData;
     3f6:	84 ea       	ldi	r24, 0xA4	; 164
     3f8:	92 e0       	ldi	r25, 0x02	; 2
}
     3fa:	0f 90       	pop	r0
     3fc:	cf 91       	pop	r28
     3fe:	df 91       	pop	r29
     400:	08 95       	ret

00000402 <__vector_18>:

#if (MU_UART_NO == 0)
ISR(USART0_RX_vect) {
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	2f 93       	push	r18
     40e:	8f 93       	push	r24
     410:	9f 93       	push	r25
     412:	ef 93       	push	r30
     414:	ff 93       	push	r31
     416:	df 93       	push	r29
     418:	cf 93       	push	r28
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
	value = *USART.U0.UDREG;
     41e:	80 91 d9 05 	lds	r24, 0x05D9
     422:	90 91 da 05 	lds	r25, 0x05DA
     426:	fc 01       	movw	r30, r24
     428:	80 81       	ld	r24, Z
     42a:	80 93 87 02 	sts	0x0287, r24
	
	if(phase) {
     42e:	80 91 86 02 	lds	r24, 0x0286
     432:	88 23       	and	r24, r24
     434:	09 f4       	brne	.+2      	; 0x438 <__vector_18+0x36>
     436:	47 c0       	rjmp	.+142    	; 0x4c6 <__vector_18+0xc4>
		packet[count] = value;
     438:	80 91 83 02 	lds	r24, 0x0283
     43c:	88 2f       	mov	r24, r24
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	20 91 87 02 	lds	r18, 0x0287
     444:	88 57       	subi	r24, 0x78	; 120
     446:	9d 4f       	sbci	r25, 0xFD	; 253
     448:	fc 01       	movw	r30, r24
     44a:	20 83       	st	Z, r18
		if(count < 2) {
     44c:	80 91 83 02 	lds	r24, 0x0283
     450:	82 30       	cpi	r24, 0x02	; 2
     452:	a0 f4       	brcc	.+40     	; 0x47c <__vector_18+0x7a>
			if(value != check[count]) {
     454:	80 91 83 02 	lds	r24, 0x0283
     458:	88 2f       	mov	r24, r24
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	8e 5a       	subi	r24, 0xAE	; 174
     45e:	9e 4f       	sbci	r25, 0xFE	; 254
     460:	fc 01       	movw	r30, r24
     462:	90 81       	ld	r25, Z
     464:	80 91 87 02 	lds	r24, 0x0287
     468:	98 17       	cp	r25, r24
     46a:	39 f1       	breq	.+78     	; 0x4ba <__vector_18+0xb8>
				phase = false;
     46c:	10 92 86 02 	sts	0x0286, r1
				CtrlLost = true;
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	80 93 a7 04 	sts	0x04A7, r24
				#if defined(USE_LED)
					LedArray[MU_LED_NO] = LED_OFF;
     476:	10 92 3b 05 	sts	0x053B, r1
     47a:	1f c0       	rjmp	.+62     	; 0x4ba <__vector_18+0xb8>
				#endif
			}
		}
		else if(count == 8) {
     47c:	80 91 83 02 	lds	r24, 0x0283
     480:	88 30       	cpi	r24, 0x08	; 8
     482:	d9 f4       	brne	.+54     	; 0x4ba <__vector_18+0xb8>
			ctrlData.buf[0] = packet[5];
     484:	80 91 8d 02 	lds	r24, 0x028D
     488:	80 93 a0 02 	sts	0x02A0, r24
			ctrlData.buf[1] = packet[6];
     48c:	80 91 8e 02 	lds	r24, 0x028E
     490:	80 93 a1 02 	sts	0x02A1, r24
			ctrlData.buf[2] = packet[7];
     494:	80 91 8f 02 	lds	r24, 0x028F
     498:	80 93 a2 02 	sts	0x02A2, r24
			ctrlData.buf[3] = packet[8];
     49c:	80 91 90 02 	lds	r24, 0x0290
     4a0:	80 93 a3 02 	sts	0x02A3, r24
			phase = false;
     4a4:	10 92 86 02 	sts	0x0286, r1
			#if defined(USE_LED)
				LedArray[MU_LED_NO] = LED_ON;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	80 93 3b 05 	sts	0x053B, r24
			#endif
			timerCount = 0;
     4ae:	10 92 85 02 	sts	0x0285, r1
     4b2:	10 92 84 02 	sts	0x0284, r1
			CtrlLost = false;
     4b6:	10 92 a7 04 	sts	0x04A7, r1
		}
		count++;
     4ba:	80 91 83 02 	lds	r24, 0x0283
     4be:	8f 5f       	subi	r24, 0xFF	; 255
     4c0:	80 93 83 02 	sts	0x0283, r24
     4c4:	09 c0       	rjmp	.+18     	; 0x4d8 <__vector_18+0xd6>
	}
	else {
		if(value == '*') {
     4c6:	80 91 87 02 	lds	r24, 0x0287
     4ca:	8a 32       	cpi	r24, 0x2A	; 42
     4cc:	29 f4       	brne	.+10     	; 0x4d8 <__vector_18+0xd6>
			count = 0;
     4ce:	10 92 83 02 	sts	0x0283, r1
			phase = true;
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	80 93 86 02 	sts	0x0286, r24
		}
	}
}
     4d8:	cf 91       	pop	r28
     4da:	df 91       	pop	r29
     4dc:	ff 91       	pop	r31
     4de:	ef 91       	pop	r30
     4e0:	9f 91       	pop	r25
     4e2:	8f 91       	pop	r24
     4e4:	2f 91       	pop	r18
     4e6:	0f 90       	pop	r0
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	0f 90       	pop	r0
     4ec:	1f 90       	pop	r1
     4ee:	18 95       	reti

000004f0 <__vector_10>:
		}		
	}	
	#endif	
}
#elif (SAFETY_TIMER_NO == 2)
ISR(TIMER2_OVF_vect) {
     4f0:	1f 92       	push	r1
     4f2:	0f 92       	push	r0
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	0f 92       	push	r0
     4f8:	11 24       	eor	r1, r1
     4fa:	2f 93       	push	r18
     4fc:	3f 93       	push	r19
     4fe:	8f 93       	push	r24
     500:	9f 93       	push	r25
     502:	ef 93       	push	r30
     504:	ff 93       	push	r31
     506:	df 93       	push	r29
     508:	cf 93       	push	r28
     50a:	0f 92       	push	r0
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
	uint8_t loop;
	
	timerCount++;
     510:	80 91 84 02 	lds	r24, 0x0284
     514:	90 91 85 02 	lds	r25, 0x0285
     518:	01 96       	adiw	r24, 0x01	; 1
     51a:	90 93 85 02 	sts	0x0285, r25
     51e:	80 93 84 02 	sts	0x0284, r24
#if defined(USE_SENSOR_HUB)
	SensorTimerCount++;
#endif
	if(timerCount>=RC_SAFETY_COUNT) {
     522:	80 91 84 02 	lds	r24, 0x0284
     526:	90 91 85 02 	lds	r25, 0x0285
     52a:	23 e0       	ldi	r18, 0x03	; 3
     52c:	80 32       	cpi	r24, 0x20	; 32
     52e:	92 07       	cpc	r25, r18
     530:	f8 f0       	brcs	.+62     	; 0x570 <__vector_10+0x80>

// 受信データに初期データを代入
		for(loop=0; loop<RC_DATA_LENGTH; loop++) {
     532:	19 82       	std	Y+1, r1	; 0x01
     534:	11 c0       	rjmp	.+34     	; 0x558 <__vector_10+0x68>
			ctrlData.buf[loop] = defaultCtrlData[loop];
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	88 2f       	mov	r24, r24
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	29 81       	ldd	r18, Y+1	; 0x01
     53e:	22 2f       	mov	r18, r18
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	2a 5a       	subi	r18, 0xAA	; 170
     544:	3e 4f       	sbci	r19, 0xFE	; 254
     546:	f9 01       	movw	r30, r18
     548:	20 81       	ld	r18, Z
     54a:	80 56       	subi	r24, 0x60	; 96
     54c:	9d 4f       	sbci	r25, 0xFD	; 253
     54e:	fc 01       	movw	r30, r24
     550:	20 83       	st	Z, r18
	SensorTimerCount++;
#endif
	if(timerCount>=RC_SAFETY_COUNT) {

// 受信データに初期データを代入
		for(loop=0; loop<RC_DATA_LENGTH; loop++) {
     552:	89 81       	ldd	r24, Y+1	; 0x01
     554:	8f 5f       	subi	r24, 0xFF	; 255
     556:	89 83       	std	Y+1, r24	; 0x01
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	84 30       	cpi	r24, 0x04	; 4
     55c:	60 f3       	brcs	.-40     	; 0x536 <__vector_10+0x46>
			ctrlData.buf[loop] = defaultCtrlData[loop];
		}
		LedArray[MU_LED_NO] = LED_OFF;
     55e:	10 92 3b 05 	sts	0x053B, r1
		timerCount = 0;
     562:	10 92 85 02 	sts	0x0285, r1
     566:	10 92 84 02 	sts	0x0284, r1
		CtrlLost  = true;
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	80 93 a7 04 	sts	0x04A7, r24
			SensorTimerCount = 0;
			SensorDataReceived = true;
		}		
	}	
	#endif	
}
     570:	0f 90       	pop	r0
     572:	cf 91       	pop	r28
     574:	df 91       	pop	r29
     576:	ff 91       	pop	r31
     578:	ef 91       	pop	r30
     57a:	9f 91       	pop	r25
     57c:	8f 91       	pop	r24
     57e:	3f 91       	pop	r19
     580:	2f 91       	pop	r18
     582:	0f 90       	pop	r0
     584:	0f be       	out	0x3f, r0	; 63
     586:	0f 90       	pop	r0
     588:	1f 90       	pop	r1
     58a:	18 95       	reti

0000058c <RingBufferInitialize>:
#include "./RingBufferDef.h"

#if defined(USE_RS485)

// Initialize for RingBuffer
void RingBufferInitialize(Uart_Ring_Type *buffer){
     58c:	df 93       	push	r29
     58e:	cf 93       	push	r28
     590:	00 d0       	rcall	.+0      	; 0x592 <RingBufferInitialize+0x6>
     592:	00 d0       	rcall	.+0      	; 0x594 <RingBufferInitialize+0x8>
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
     598:	9c 83       	std	Y+4, r25	; 0x04
     59a:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t i;
	
	buffer->head = 0;
     59c:	8b 81       	ldd	r24, Y+3	; 0x03
     59e:	9c 81       	ldd	r25, Y+4	; 0x04
     5a0:	80 50       	subi	r24, 0x00	; 0
     5a2:	9f 4f       	sbci	r25, 0xFF	; 255
     5a4:	fc 01       	movw	r30, r24
     5a6:	11 82       	std	Z+1, r1	; 0x01
     5a8:	10 82       	st	Z, r1
	buffer->size = 0;
     5aa:	8b 81       	ldd	r24, Y+3	; 0x03
     5ac:	9c 81       	ldd	r25, Y+4	; 0x04
     5ae:	8e 5f       	subi	r24, 0xFE	; 254
     5b0:	9e 4f       	sbci	r25, 0xFE	; 254
     5b2:	fc 01       	movw	r30, r24
     5b4:	11 82       	std	Z+1, r1	; 0x01
     5b6:	10 82       	st	Z, r1
	buffer->status = Empty;
     5b8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ba:	9c 81       	ldd	r25, Y+4	; 0x04
     5bc:	8c 5f       	subi	r24, 0xFC	; 252
     5be:	9e 4f       	sbci	r25, 0xFE	; 254
     5c0:	fc 01       	movw	r30, r24
     5c2:	10 82       	st	Z, r1
	
	for(i = 0; i < BUFFER_SIZE; i++){
     5c4:	1a 82       	std	Y+2, r1	; 0x02
     5c6:	19 82       	std	Y+1, r1	; 0x01
     5c8:	0d c0       	rjmp	.+26     	; 0x5e4 <RingBufferInitialize+0x58>
		buffer->buf[i] = 0x00;
     5ca:	2b 81       	ldd	r18, Y+3	; 0x03
     5cc:	3c 81       	ldd	r19, Y+4	; 0x04
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	9a 81       	ldd	r25, Y+2	; 0x02
     5d2:	82 0f       	add	r24, r18
     5d4:	93 1f       	adc	r25, r19
     5d6:	fc 01       	movw	r30, r24
     5d8:	10 82       	st	Z, r1
	
	buffer->head = 0;
	buffer->size = 0;
	buffer->status = Empty;
	
	for(i = 0; i < BUFFER_SIZE; i++){
     5da:	89 81       	ldd	r24, Y+1	; 0x01
     5dc:	9a 81       	ldd	r25, Y+2	; 0x02
     5de:	01 96       	adiw	r24, 0x01	; 1
     5e0:	9a 83       	std	Y+2, r25	; 0x02
     5e2:	89 83       	std	Y+1, r24	; 0x01
     5e4:	89 81       	ldd	r24, Y+1	; 0x01
     5e6:	9a 81       	ldd	r25, Y+2	; 0x02
     5e8:	8f 3f       	cpi	r24, 0xFF	; 255
     5ea:	91 05       	cpc	r25, r1
     5ec:	71 f3       	breq	.-36     	; 0x5ca <RingBufferInitialize+0x3e>
     5ee:	68 f3       	brcs	.-38     	; 0x5ca <RingBufferInitialize+0x3e>
		buffer->buf[i] = 0x00;
	}
}
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	cf 91       	pop	r28
     5fa:	df 91       	pop	r29
     5fc:	08 95       	ret

000005fe <RingPutChar>:

// Output the Data from RingbBuffer 
// If RingBuffer UnderFlow, Return 0, else Return 1 
uint8_t RingPutChar(unsigned char *data, Uart_Ring_Type *buffer){
     5fe:	df 93       	push	r29
     600:	cf 93       	push	r28
     602:	00 d0       	rcall	.+0      	; 0x604 <RingPutChar+0x6>
     604:	00 d0       	rcall	.+0      	; 0x606 <RingPutChar+0x8>
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	9a 83       	std	Y+2, r25	; 0x02
     60c:	89 83       	std	Y+1, r24	; 0x01
     60e:	7c 83       	std	Y+4, r23	; 0x04
     610:	6b 83       	std	Y+3, r22	; 0x03
	cli();
     612:	f8 94       	cli
	if(buffer->size == 0){
     614:	8b 81       	ldd	r24, Y+3	; 0x03
     616:	9c 81       	ldd	r25, Y+4	; 0x04
     618:	8e 5f       	subi	r24, 0xFE	; 254
     61a:	9e 4f       	sbci	r25, 0xFE	; 254
     61c:	fc 01       	movw	r30, r24
     61e:	80 81       	ld	r24, Z
     620:	91 81       	ldd	r25, Z+1	; 0x01
     622:	00 97       	sbiw	r24, 0x00	; 0
     624:	89 f4       	brne	.+34     	; 0x648 <RingPutChar+0x4a>
		buffer->status = Empty;
     626:	8b 81       	ldd	r24, Y+3	; 0x03
     628:	9c 81       	ldd	r25, Y+4	; 0x04
     62a:	8c 5f       	subi	r24, 0xFC	; 252
     62c:	9e 4f       	sbci	r25, 0xFE	; 254
     62e:	fc 01       	movw	r30, r24
     630:	10 82       	st	Z, r1
		stop_uart1tx_interrupt();
     632:	8a e9       	ldi	r24, 0x9A	; 154
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	2a e9       	ldi	r18, 0x9A	; 154
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	f9 01       	movw	r30, r18
     63c:	20 81       	ld	r18, Z
     63e:	2f 7d       	andi	r18, 0xDF	; 223
     640:	fc 01       	movw	r30, r24
     642:	20 83       	st	Z, r18
		return 0;
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	62 c0       	rjmp	.+196    	; 0x70c <RingPutChar+0x10e>
	}
	
	*data = buffer->buf[buffer->head];
     648:	8b 81       	ldd	r24, Y+3	; 0x03
     64a:	9c 81       	ldd	r25, Y+4	; 0x04
     64c:	80 50       	subi	r24, 0x00	; 0
     64e:	9f 4f       	sbci	r25, 0xFF	; 255
     650:	fc 01       	movw	r30, r24
     652:	80 81       	ld	r24, Z
     654:	91 81       	ldd	r25, Z+1	; 0x01
     656:	2b 81       	ldd	r18, Y+3	; 0x03
     658:	3c 81       	ldd	r19, Y+4	; 0x04
     65a:	82 0f       	add	r24, r18
     65c:	93 1f       	adc	r25, r19
     65e:	fc 01       	movw	r30, r24
     660:	20 81       	ld	r18, Z
     662:	89 81       	ldd	r24, Y+1	; 0x01
     664:	9a 81       	ldd	r25, Y+2	; 0x02
     666:	fc 01       	movw	r30, r24
     668:	20 83       	st	Z, r18
	buffer->buf[buffer->head] = 'A';
     66a:	8b 81       	ldd	r24, Y+3	; 0x03
     66c:	9c 81       	ldd	r25, Y+4	; 0x04
     66e:	80 50       	subi	r24, 0x00	; 0
     670:	9f 4f       	sbci	r25, 0xFF	; 255
     672:	fc 01       	movw	r30, r24
     674:	80 81       	ld	r24, Z
     676:	91 81       	ldd	r25, Z+1	; 0x01
     678:	2b 81       	ldd	r18, Y+3	; 0x03
     67a:	3c 81       	ldd	r19, Y+4	; 0x04
     67c:	82 0f       	add	r24, r18
     67e:	93 1f       	adc	r25, r19
     680:	21 e4       	ldi	r18, 0x41	; 65
     682:	fc 01       	movw	r30, r24
     684:	20 83       	st	Z, r18
	buffer->size -= 1;
     686:	8b 81       	ldd	r24, Y+3	; 0x03
     688:	9c 81       	ldd	r25, Y+4	; 0x04
     68a:	8e 5f       	subi	r24, 0xFE	; 254
     68c:	9e 4f       	sbci	r25, 0xFE	; 254
     68e:	fc 01       	movw	r30, r24
     690:	80 81       	ld	r24, Z
     692:	91 81       	ldd	r25, Z+1	; 0x01
     694:	9c 01       	movw	r18, r24
     696:	21 50       	subi	r18, 0x01	; 1
     698:	30 40       	sbci	r19, 0x00	; 0
     69a:	8b 81       	ldd	r24, Y+3	; 0x03
     69c:	9c 81       	ldd	r25, Y+4	; 0x04
     69e:	8e 5f       	subi	r24, 0xFE	; 254
     6a0:	9e 4f       	sbci	r25, 0xFE	; 254
     6a2:	fc 01       	movw	r30, r24
     6a4:	31 83       	std	Z+1, r19	; 0x01
     6a6:	20 83       	st	Z, r18
	buffer->head += 1;
     6a8:	8b 81       	ldd	r24, Y+3	; 0x03
     6aa:	9c 81       	ldd	r25, Y+4	; 0x04
     6ac:	80 50       	subi	r24, 0x00	; 0
     6ae:	9f 4f       	sbci	r25, 0xFF	; 255
     6b0:	fc 01       	movw	r30, r24
     6b2:	80 81       	ld	r24, Z
     6b4:	91 81       	ldd	r25, Z+1	; 0x01
     6b6:	9c 01       	movw	r18, r24
     6b8:	2f 5f       	subi	r18, 0xFF	; 255
     6ba:	3f 4f       	sbci	r19, 0xFF	; 255
     6bc:	8b 81       	ldd	r24, Y+3	; 0x03
     6be:	9c 81       	ldd	r25, Y+4	; 0x04
     6c0:	80 50       	subi	r24, 0x00	; 0
     6c2:	9f 4f       	sbci	r25, 0xFF	; 255
     6c4:	fc 01       	movw	r30, r24
     6c6:	31 83       	std	Z+1, r19	; 0x01
     6c8:	20 83       	st	Z, r18
	buffer->head %= BUFFER_SIZE;
     6ca:	8b 81       	ldd	r24, Y+3	; 0x03
     6cc:	9c 81       	ldd	r25, Y+4	; 0x04
     6ce:	80 50       	subi	r24, 0x00	; 0
     6d0:	9f 4f       	sbci	r25, 0xFF	; 255
     6d2:	fc 01       	movw	r30, r24
     6d4:	80 81       	ld	r24, Z
     6d6:	91 81       	ldd	r25, Z+1	; 0x01
     6d8:	9c 01       	movw	r18, r24
     6da:	30 70       	andi	r19, 0x00	; 0
     6dc:	8b 81       	ldd	r24, Y+3	; 0x03
     6de:	9c 81       	ldd	r25, Y+4	; 0x04
     6e0:	80 50       	subi	r24, 0x00	; 0
     6e2:	9f 4f       	sbci	r25, 0xFF	; 255
     6e4:	fc 01       	movw	r30, r24
     6e6:	31 83       	std	Z+1, r19	; 0x01
     6e8:	20 83       	st	Z, r18
	
	if (buffer->size == 0){
     6ea:	8b 81       	ldd	r24, Y+3	; 0x03
     6ec:	9c 81       	ldd	r25, Y+4	; 0x04
     6ee:	8e 5f       	subi	r24, 0xFE	; 254
     6f0:	9e 4f       	sbci	r25, 0xFE	; 254
     6f2:	fc 01       	movw	r30, r24
     6f4:	80 81       	ld	r24, Z
     6f6:	91 81       	ldd	r25, Z+1	; 0x01
     6f8:	00 97       	sbiw	r24, 0x00	; 0
     6fa:	31 f4       	brne	.+12     	; 0x708 <RingPutChar+0x10a>
		buffer->status = Empty;
     6fc:	8b 81       	ldd	r24, Y+3	; 0x03
     6fe:	9c 81       	ldd	r25, Y+4	; 0x04
     700:	8c 5f       	subi	r24, 0xFC	; 252
     702:	9e 4f       	sbci	r25, 0xFE	; 254
     704:	fc 01       	movw	r30, r24
     706:	10 82       	st	Z, r1
	}
	
	sei();
     708:	78 94       	sei
	return 1;
     70a:	81 e0       	ldi	r24, 0x01	; 1
}
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	cf 91       	pop	r28
     716:	df 91       	pop	r29
     718:	08 95       	ret

0000071a <RingSetChar>:

// Input the Data for RingBuffer
// If RingBuffer OverFlow, Return 0, else Return 1
uint8_t RingSetChar(unsigned char data, Uart_Ring_Type *buffer){
     71a:	df 93       	push	r29
     71c:	cf 93       	push	r28
     71e:	00 d0       	rcall	.+0      	; 0x720 <RingSetChar+0x6>
     720:	0f 92       	push	r0
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
     726:	89 83       	std	Y+1, r24	; 0x01
     728:	7b 83       	std	Y+3, r23	; 0x03
     72a:	6a 83       	std	Y+2, r22	; 0x02
	cli();
     72c:	f8 94       	cli
	if(buffer->size >= BUFFER_SIZE){
     72e:	8a 81       	ldd	r24, Y+2	; 0x02
     730:	9b 81       	ldd	r25, Y+3	; 0x03
     732:	8e 5f       	subi	r24, 0xFE	; 254
     734:	9e 4f       	sbci	r25, 0xFE	; 254
     736:	fc 01       	movw	r30, r24
     738:	80 81       	ld	r24, Z
     73a:	91 81       	ldd	r25, Z+1	; 0x01
     73c:	8f 3f       	cpi	r24, 0xFF	; 255
     73e:	91 05       	cpc	r25, r1
     740:	51 f0       	breq	.+20     	; 0x756 <RingSetChar+0x3c>
     742:	48 f0       	brcs	.+18     	; 0x756 <RingSetChar+0x3c>
		buffer->status = FullUp;
     744:	8a 81       	ldd	r24, Y+2	; 0x02
     746:	9b 81       	ldd	r25, Y+3	; 0x03
     748:	8c 5f       	subi	r24, 0xFC	; 252
     74a:	9e 4f       	sbci	r25, 0xFE	; 254
     74c:	22 e0       	ldi	r18, 0x02	; 2
     74e:	fc 01       	movw	r30, r24
     750:	20 83       	st	Z, r18
		return 0;
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	48 c0       	rjmp	.+144    	; 0x7e6 <RingSetChar+0xcc>
	}
	
	buffer->status = DataIn;
     756:	8a 81       	ldd	r24, Y+2	; 0x02
     758:	9b 81       	ldd	r25, Y+3	; 0x03
     75a:	8c 5f       	subi	r24, 0xFC	; 252
     75c:	9e 4f       	sbci	r25, 0xFE	; 254
     75e:	21 e0       	ldi	r18, 0x01	; 1
     760:	fc 01       	movw	r30, r24
     762:	20 83       	st	Z, r18
	buffer->buf[(buffer->head + buffer->size) % BUFFER_SIZE] = data;
     764:	8a 81       	ldd	r24, Y+2	; 0x02
     766:	9b 81       	ldd	r25, Y+3	; 0x03
     768:	80 50       	subi	r24, 0x00	; 0
     76a:	9f 4f       	sbci	r25, 0xFF	; 255
     76c:	fc 01       	movw	r30, r24
     76e:	20 81       	ld	r18, Z
     770:	31 81       	ldd	r19, Z+1	; 0x01
     772:	8a 81       	ldd	r24, Y+2	; 0x02
     774:	9b 81       	ldd	r25, Y+3	; 0x03
     776:	8e 5f       	subi	r24, 0xFE	; 254
     778:	9e 4f       	sbci	r25, 0xFE	; 254
     77a:	fc 01       	movw	r30, r24
     77c:	80 81       	ld	r24, Z
     77e:	91 81       	ldd	r25, Z+1	; 0x01
     780:	82 0f       	add	r24, r18
     782:	93 1f       	adc	r25, r19
     784:	90 70       	andi	r25, 0x00	; 0
     786:	2a 81       	ldd	r18, Y+2	; 0x02
     788:	3b 81       	ldd	r19, Y+3	; 0x03
     78a:	82 0f       	add	r24, r18
     78c:	93 1f       	adc	r25, r19
     78e:	29 81       	ldd	r18, Y+1	; 0x01
     790:	fc 01       	movw	r30, r24
     792:	20 83       	st	Z, r18
	buffer->size += 1;
     794:	8a 81       	ldd	r24, Y+2	; 0x02
     796:	9b 81       	ldd	r25, Y+3	; 0x03
     798:	8e 5f       	subi	r24, 0xFE	; 254
     79a:	9e 4f       	sbci	r25, 0xFE	; 254
     79c:	fc 01       	movw	r30, r24
     79e:	80 81       	ld	r24, Z
     7a0:	91 81       	ldd	r25, Z+1	; 0x01
     7a2:	9c 01       	movw	r18, r24
     7a4:	2f 5f       	subi	r18, 0xFF	; 255
     7a6:	3f 4f       	sbci	r19, 0xFF	; 255
     7a8:	8a 81       	ldd	r24, Y+2	; 0x02
     7aa:	9b 81       	ldd	r25, Y+3	; 0x03
     7ac:	8e 5f       	subi	r24, 0xFE	; 254
     7ae:	9e 4f       	sbci	r25, 0xFE	; 254
     7b0:	fc 01       	movw	r30, r24
     7b2:	31 83       	std	Z+1, r19	; 0x01
     7b4:	20 83       	st	Z, r18
	
	if (buffer->size >= BUFFER_SIZE){
     7b6:	8a 81       	ldd	r24, Y+2	; 0x02
     7b8:	9b 81       	ldd	r25, Y+3	; 0x03
     7ba:	8e 5f       	subi	r24, 0xFE	; 254
     7bc:	9e 4f       	sbci	r25, 0xFE	; 254
     7be:	fc 01       	movw	r30, r24
     7c0:	80 81       	ld	r24, Z
     7c2:	91 81       	ldd	r25, Z+1	; 0x01
     7c4:	8f 3f       	cpi	r24, 0xFF	; 255
     7c6:	91 05       	cpc	r25, r1
     7c8:	41 f0       	breq	.+16     	; 0x7da <RingSetChar+0xc0>
     7ca:	38 f0       	brcs	.+14     	; 0x7da <RingSetChar+0xc0>
		buffer->status = FullUp;
     7cc:	8a 81       	ldd	r24, Y+2	; 0x02
     7ce:	9b 81       	ldd	r25, Y+3	; 0x03
     7d0:	8c 5f       	subi	r24, 0xFC	; 252
     7d2:	9e 4f       	sbci	r25, 0xFE	; 254
     7d4:	22 e0       	ldi	r18, 0x02	; 2
     7d6:	fc 01       	movw	r30, r24
     7d8:	20 83       	st	Z, r18
	}
	BufferChecker(buffer);
     7da:	8a 81       	ldd	r24, Y+2	; 0x02
     7dc:	9b 81       	ldd	r25, Y+3	; 0x03
     7de:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <BufferChecker>
	
	sei();
     7e2:	78 94       	sei
	
	return 1;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
}
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	cf 91       	pop	r28
     7ee:	df 91       	pop	r29
     7f0:	08 95       	ret

000007f2 <BufferChecker>:

// Check for RingBuffer and UDRE_Empty_Interrupt Control
void BufferChecker(Uart_Ring_Type *buffer){
     7f2:	df 93       	push	r29
     7f4:	cf 93       	push	r28
     7f6:	00 d0       	rcall	.+0      	; 0x7f8 <BufferChecker+0x6>
     7f8:	cd b7       	in	r28, 0x3d	; 61
     7fa:	de b7       	in	r29, 0x3e	; 62
     7fc:	9a 83       	std	Y+2, r25	; 0x02
     7fe:	89 83       	std	Y+1, r24	; 0x01
	if(buffer->status != Empty)	start_uart1tx_interrupt();
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	9a 81       	ldd	r25, Y+2	; 0x02
     804:	8c 5f       	subi	r24, 0xFC	; 252
     806:	9e 4f       	sbci	r25, 0xFE	; 254
     808:	fc 01       	movw	r30, r24
     80a:	80 81       	ld	r24, Z
     80c:	88 23       	and	r24, r24
     80e:	51 f0       	breq	.+20     	; 0x824 <BufferChecker+0x32>
     810:	8a e9       	ldi	r24, 0x9A	; 154
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	2a e9       	ldi	r18, 0x9A	; 154
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	f9 01       	movw	r30, r18
     81a:	20 81       	ld	r18, Z
     81c:	20 62       	ori	r18, 0x20	; 32
     81e:	fc 01       	movw	r30, r24
     820:	20 83       	st	Z, r18
     822:	09 c0       	rjmp	.+18     	; 0x836 <BufferChecker+0x44>
	else						stop_uart1tx_interrupt();
     824:	8a e9       	ldi	r24, 0x9A	; 154
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	2a e9       	ldi	r18, 0x9A	; 154
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	f9 01       	movw	r30, r18
     82e:	20 81       	ld	r18, Z
     830:	2f 7d       	andi	r18, 0xDF	; 223
     832:	fc 01       	movw	r30, r24
     834:	20 83       	st	Z, r18
}	
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	cf 91       	pop	r28
     83c:	df 91       	pop	r29
     83e:	08 95       	ret

00000840 <RS485Initialize>:
#endif

static Uart_Ring_Type RingBuffer;


void RS485Initialize(uint8_t baud){
     840:	df 93       	push	r29
     842:	cf 93       	push	r28
     844:	0f 92       	push	r0
     846:	cd b7       	in	r28, 0x3d	; 61
     848:	de b7       	in	r29, 0x3e	; 62
     84a:	89 83       	std	Y+1, r24	; 0x01
	val = 0;
     84c:	10 92 b9 02 	sts	0x02B9, r1
	phase = 0;
     850:	10 92 ba 02 	sts	0x02BA, r1
	count = 0;
     854:	10 92 bb 02 	sts	0x02BB, r1
	
	UartInitialize[RS485_UART_NO](UART_RE | UART_TE | UART_RXCIE | UART_TXCIE | UART_UDRIE , baud);
     858:	20 91 e2 04 	lds	r18, 0x04E2
     85c:	30 91 e3 04 	lds	r19, 0x04E3
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	48 2f       	mov	r20, r24
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	88 ef       	ldi	r24, 0xF8	; 248
     868:	ba 01       	movw	r22, r20
     86a:	f9 01       	movw	r30, r18
     86c:	09 95       	icall
	sbi(*RS485_SELECT_PORT.DDR, RS485_SELECT_BIT);
     86e:	80 91 bb 05 	lds	r24, 0x05BB
     872:	90 91 bc 05 	lds	r25, 0x05BC
     876:	20 91 bb 05 	lds	r18, 0x05BB
     87a:	30 91 bc 05 	lds	r19, 0x05BC
     87e:	f9 01       	movw	r30, r18
     880:	20 81       	ld	r18, Z
     882:	20 61       	ori	r18, 0x10	; 16
     884:	fc 01       	movw	r30, r24
     886:	20 83       	st	Z, r18
	
	RS485_Select(RS485_RE);
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	0e 94 87 04 	call	0x90e	; 0x90e <RS485_Select>
	
	RingBufferInitialize(&RingBuffer);
     88e:	89 ec       	ldi	r24, 0xC9	; 201
     890:	92 e0       	ldi	r25, 0x02	; 2
     892:	0e 94 c6 02 	call	0x58c	; 0x58c <RingBufferInitialize>
	
	#if defined(USE_MOTOR_HUB)
		MotorHubInitialize();
     896:	0e 94 af 04 	call	0x95e	; 0x95e <MotorHubInitialize>
	#endif
	
	#if defined(USE_LED_HUB)
		LedHubInitialize();
     89a:	0e 94 3c 06 	call	0xc78	; 0xc78 <LedHubInitialize>
	#endif
	
	#if defined(USE_AIR_HUB)
		AirHubInitialize();
     89e:	0e 94 b8 07 	call	0xf70	; 0xf70 <AirHubInitialize>
	#endif
}
     8a2:	0f 90       	pop	r0
     8a4:	cf 91       	pop	r28
     8a6:	df 91       	pop	r29
     8a8:	08 95       	ret

000008aa <RS485_putchar>:

static void RS485_putchar(uint8_t data){
     8aa:	df 93       	push	r29
     8ac:	cf 93       	push	r28
     8ae:	0f 92       	push	r0
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	89 83       	std	Y+1, r24	; 0x01
	cli();
     8b6:	f8 94       	cli
	RS485_Select(RS485_SE);
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	0e 94 87 04 	call	0x90e	; 0x90e <RS485_Select>
	UartSend[RS485_UART_NO](data);
     8be:	20 91 d2 04 	lds	r18, 0x04D2
     8c2:	30 91 d3 04 	lds	r19, 0x04D3
     8c6:	89 81       	ldd	r24, Y+1	; 0x01
     8c8:	f9 01       	movw	r30, r18
     8ca:	09 95       	icall
	RS485_Select(RS485_RE);
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	0e 94 87 04 	call	0x90e	; 0x90e <RS485_Select>
	sei();
     8d2:	78 94       	sei
}
     8d4:	0f 90       	pop	r0
     8d6:	cf 91       	pop	r28
     8d8:	df 91       	pop	r29
     8da:	08 95       	ret

000008dc <RS485_getchar>:

static void RS485_getchar(uint8_t *data){
     8dc:	df 93       	push	r29
     8de:	cf 93       	push	r28
     8e0:	00 d0       	rcall	.+0      	; 0x8e2 <RS485_getchar+0x6>
     8e2:	cd b7       	in	r28, 0x3d	; 61
     8e4:	de b7       	in	r29, 0x3e	; 62
     8e6:	9a 83       	std	Y+2, r25	; 0x02
     8e8:	89 83       	std	Y+1, r24	; 0x01
	cli();
     8ea:	f8 94       	cli
	RS485_Select(RS485_RE);
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	0e 94 87 04 	call	0x90e	; 0x90e <RS485_Select>
	UartReceive[RS485_UART_NO](data);
     8f2:	20 91 da 04 	lds	r18, 0x04DA
     8f6:	30 91 db 04 	lds	r19, 0x04DB
     8fa:	89 81       	ldd	r24, Y+1	; 0x01
     8fc:	9a 81       	ldd	r25, Y+2	; 0x02
     8fe:	f9 01       	movw	r30, r18
     900:	09 95       	icall
	sei();
     902:	78 94       	sei
}
     904:	0f 90       	pop	r0
     906:	0f 90       	pop	r0
     908:	cf 91       	pop	r28
     90a:	df 91       	pop	r29
     90c:	08 95       	ret

0000090e <RS485_Select>:

void RS485_Select(uint8_t option){
     90e:	df 93       	push	r29
     910:	cf 93       	push	r28
     912:	0f 92       	push	r0
     914:	cd b7       	in	r28, 0x3d	; 61
     916:	de b7       	in	r29, 0x3e	; 62
     918:	89 83       	std	Y+1, r24	; 0x01
	if(option){
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	88 23       	and	r24, r24
     91e:	71 f0       	breq	.+28     	; 0x93c <RS485_Select+0x2e>
		sbi(*RS485_SELECT_PORT.PORT, RS485_SELECT_BIT);
     920:	80 91 bd 05 	lds	r24, 0x05BD
     924:	90 91 be 05 	lds	r25, 0x05BE
     928:	20 91 bd 05 	lds	r18, 0x05BD
     92c:	30 91 be 05 	lds	r19, 0x05BE
     930:	f9 01       	movw	r30, r18
     932:	20 81       	ld	r18, Z
     934:	20 61       	ori	r18, 0x10	; 16
     936:	fc 01       	movw	r30, r24
     938:	20 83       	st	Z, r18
     93a:	0d c0       	rjmp	.+26     	; 0x956 <RS485_Select+0x48>
	}		
	else{
		cbi(*RS485_SELECT_PORT.PORT, RS485_SELECT_BIT);
     93c:	80 91 bd 05 	lds	r24, 0x05BD
     940:	90 91 be 05 	lds	r25, 0x05BE
     944:	20 91 bd 05 	lds	r18, 0x05BD
     948:	30 91 be 05 	lds	r19, 0x05BE
     94c:	f9 01       	movw	r30, r18
     94e:	20 81       	ld	r18, Z
     950:	2f 7e       	andi	r18, 0xEF	; 239
     952:	fc 01       	movw	r30, r24
     954:	20 83       	st	Z, r18
	}			
}
     956:	0f 90       	pop	r0
     958:	cf 91       	pop	r28
     95a:	df 91       	pop	r29
     95c:	08 95       	ret

0000095e <MotorHubInitialize>:

#if defined(USE_MOTOR_HUB)

static void MotorHubInitialize(void){
     95e:	df 93       	push	r29
     960:	cf 93       	push	r28
     962:	00 d0       	rcall	.+0      	; 0x964 <MotorHubInitialize+0x6>
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t i, j;
	
	for(i = 0; i < USING_MOTOR_HUB; i++){
     968:	19 82       	std	Y+1, r1	; 0x01
     96a:	15 c0       	rjmp	.+42     	; 0x996 <MotorHubInitialize+0x38>
		MotorHubArray[i].status = 0x00;
     96c:	89 81       	ldd	r24, Y+1	; 0x01
     96e:	88 2f       	mov	r24, r24
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	88 0f       	add	r24, r24
     974:	99 1f       	adc	r25, r25
     976:	88 54       	subi	r24, 0x48	; 72
     978:	9b 4f       	sbci	r25, 0xFB	; 251
     97a:	fc 01       	movw	r30, r24
     97c:	10 82       	st	Z, r1
		MotorHubArray[i].pwm = 0x00;
     97e:	89 81       	ldd	r24, Y+1	; 0x01
     980:	88 2f       	mov	r24, r24
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	88 0f       	add	r24, r24
     986:	99 1f       	adc	r25, r25
     988:	87 54       	subi	r24, 0x47	; 71
     98a:	9b 4f       	sbci	r25, 0xFB	; 251
     98c:	fc 01       	movw	r30, r24
     98e:	10 82       	st	Z, r1
#if defined(USE_MOTOR_HUB)

static void MotorHubInitialize(void){
	volatile uint8_t i, j;
	
	for(i = 0; i < USING_MOTOR_HUB; i++){
     990:	89 81       	ldd	r24, Y+1	; 0x01
     992:	8f 5f       	subi	r24, 0xFF	; 255
     994:	89 83       	std	Y+1, r24	; 0x01
     996:	89 81       	ldd	r24, Y+1	; 0x01
     998:	88 30       	cpi	r24, 0x08	; 8
     99a:	40 f3       	brcs	.-48     	; 0x96c <MotorHubInitialize+0xe>
		MotorHubArray[i].status = 0x00;
		MotorHubArray[i].pwm = 0x00;
	}
	
	for(i = 0; i < ((USING_MOTOR_HUB - 1) >> 2) + 1; i++){
     99c:	19 82       	std	Y+1, r1	; 0x01
     99e:	4b c0       	rjmp	.+150    	; 0xa36 <MotorHubInitialize+0xd8>
		for(j = 0; j < 4; j++){
     9a0:	1a 82       	std	Y+2, r1	; 0x02
     9a2:	16 c0       	rjmp	.+44     	; 0x9d0 <MotorHubInitialize+0x72>
			MotorData[i].data[j] = 0x00;
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	28 2f       	mov	r18, r24
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	8a 81       	ldd	r24, Y+2	; 0x02
     9ac:	48 2f       	mov	r20, r24
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	c9 01       	movw	r24, r18
     9b2:	88 0f       	add	r24, r24
     9b4:	99 1f       	adc	r25, r25
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	82 0f       	add	r24, r18
     9bc:	93 1f       	adc	r25, r19
     9be:	84 0f       	add	r24, r20
     9c0:	95 1f       	adc	r25, r21
     9c2:	87 55       	subi	r24, 0x57	; 87
     9c4:	9d 4f       	sbci	r25, 0xFD	; 253
     9c6:	fc 01       	movw	r30, r24
     9c8:	10 82       	st	Z, r1
		MotorHubArray[i].status = 0x00;
		MotorHubArray[i].pwm = 0x00;
	}
	
	for(i = 0; i < ((USING_MOTOR_HUB - 1) >> 2) + 1; i++){
		for(j = 0; j < 4; j++){
     9ca:	8a 81       	ldd	r24, Y+2	; 0x02
     9cc:	8f 5f       	subi	r24, 0xFF	; 255
     9ce:	8a 83       	std	Y+2, r24	; 0x02
     9d0:	8a 81       	ldd	r24, Y+2	; 0x02
     9d2:	84 30       	cpi	r24, 0x04	; 4
     9d4:	38 f3       	brcs	.-50     	; 0x9a4 <MotorHubInitialize+0x46>
			MotorData[i].data[j] = 0x00;
		}		
		MotorData[i].addr = 0x20;
     9d6:	89 81       	ldd	r24, Y+1	; 0x01
     9d8:	28 2f       	mov	r18, r24
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	c9 01       	movw	r24, r18
     9de:	88 0f       	add	r24, r24
     9e0:	99 1f       	adc	r25, r25
     9e2:	88 0f       	add	r24, r24
     9e4:	99 1f       	adc	r25, r25
     9e6:	82 0f       	add	r24, r18
     9e8:	93 1f       	adc	r25, r19
     9ea:	88 55       	subi	r24, 0x58	; 88
     9ec:	9d 4f       	sbci	r25, 0xFD	; 253
     9ee:	20 e2       	ldi	r18, 0x20	; 32
     9f0:	fc 01       	movw	r30, r24
     9f2:	20 83       	st	Z, r18
		MotorData[i].addr |= i;
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	28 2f       	mov	r18, r24
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	48 2f       	mov	r20, r24
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	ca 01       	movw	r24, r20
     a00:	88 0f       	add	r24, r24
     a02:	99 1f       	adc	r25, r25
     a04:	88 0f       	add	r24, r24
     a06:	99 1f       	adc	r25, r25
     a08:	84 0f       	add	r24, r20
     a0a:	95 1f       	adc	r25, r21
     a0c:	88 55       	subi	r24, 0x58	; 88
     a0e:	9d 4f       	sbci	r25, 0xFD	; 253
     a10:	fc 01       	movw	r30, r24
     a12:	90 81       	ld	r25, Z
     a14:	89 81       	ldd	r24, Y+1	; 0x01
     a16:	49 2f       	mov	r20, r25
     a18:	48 2b       	or	r20, r24
     a1a:	c9 01       	movw	r24, r18
     a1c:	88 0f       	add	r24, r24
     a1e:	99 1f       	adc	r25, r25
     a20:	88 0f       	add	r24, r24
     a22:	99 1f       	adc	r25, r25
     a24:	82 0f       	add	r24, r18
     a26:	93 1f       	adc	r25, r19
     a28:	88 55       	subi	r24, 0x58	; 88
     a2a:	9d 4f       	sbci	r25, 0xFD	; 253
     a2c:	fc 01       	movw	r30, r24
     a2e:	40 83       	st	Z, r20
	for(i = 0; i < USING_MOTOR_HUB; i++){
		MotorHubArray[i].status = 0x00;
		MotorHubArray[i].pwm = 0x00;
	}
	
	for(i = 0; i < ((USING_MOTOR_HUB - 1) >> 2) + 1; i++){
     a30:	89 81       	ldd	r24, Y+1	; 0x01
     a32:	8f 5f       	subi	r24, 0xFF	; 255
     a34:	89 83       	std	Y+1, r24	; 0x01
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	82 30       	cpi	r24, 0x02	; 2
     a3a:	08 f4       	brcc	.+2      	; 0xa3e <MotorHubInitialize+0xe0>
     a3c:	b1 cf       	rjmp	.-158    	; 0x9a0 <MotorHubInitialize+0x42>
			MotorData[i].data[j] = 0x00;
		}		
		MotorData[i].addr = 0x20;
		MotorData[i].addr |= i;
	}
}
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	cf 91       	pop	r28
     a44:	df 91       	pop	r29
     a46:	08 95       	ret

00000a48 <MotorHubUpdate>:

void MotorHubUpdate(void){
     a48:	df 92       	push	r13
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	df 93       	push	r29
     a54:	cf 93       	push	r28
     a56:	0f 92       	push	r0
     a58:	cd b7       	in	r28, 0x3d	; 61
     a5a:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t i; 
	
	for(i = 0; i < USING_MOTOR_HUB; i++){
     a5c:	19 82       	std	Y+1, r1	; 0x01
     a5e:	67 c0       	rjmp	.+206    	; 0xb2e <MotorHubUpdate+0xe6>
		MotorData[i>>2].data[i%4]  = MotorHubArray[i].status;
     a60:	89 81       	ldd	r24, Y+1	; 0x01
     a62:	86 95       	lsr	r24
     a64:	86 95       	lsr	r24
     a66:	28 2f       	mov	r18, r24
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	89 81       	ldd	r24, Y+1	; 0x01
     a6c:	88 2f       	mov	r24, r24
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	ac 01       	movw	r20, r24
     a72:	43 70       	andi	r20, 0x03	; 3
     a74:	50 70       	andi	r21, 0x00	; 0
     a76:	89 81       	ldd	r24, Y+1	; 0x01
     a78:	88 2f       	mov	r24, r24
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	88 54       	subi	r24, 0x48	; 72
     a82:	9b 4f       	sbci	r25, 0xFB	; 251
     a84:	fc 01       	movw	r30, r24
     a86:	60 81       	ld	r22, Z
     a88:	c9 01       	movw	r24, r18
     a8a:	88 0f       	add	r24, r24
     a8c:	99 1f       	adc	r25, r25
     a8e:	88 0f       	add	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	82 0f       	add	r24, r18
     a94:	93 1f       	adc	r25, r19
     a96:	84 0f       	add	r24, r20
     a98:	95 1f       	adc	r25, r21
     a9a:	87 55       	subi	r24, 0x57	; 87
     a9c:	9d 4f       	sbci	r25, 0xFD	; 253
     a9e:	fc 01       	movw	r30, r24
     aa0:	60 83       	st	Z, r22
		MotorData[i>>2].data[i%4] |= (PwmSetter(MotorHubArray[i].pwm) & ~(0x03));
     aa2:	29 81       	ldd	r18, Y+1	; 0x01
     aa4:	82 2f       	mov	r24, r18
     aa6:	86 95       	lsr	r24
     aa8:	86 95       	lsr	r24
     aaa:	08 2f       	mov	r16, r24
     aac:	10 e0       	ldi	r17, 0x00	; 0
     aae:	49 81       	ldd	r20, Y+1	; 0x01
     ab0:	84 2f       	mov	r24, r20
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	0f 2e       	mov	r0, r31
     ab6:	f3 e0       	ldi	r31, 0x03	; 3
     ab8:	ef 2e       	mov	r14, r31
     aba:	ff 24       	eor	r15, r15
     abc:	f0 2d       	mov	r31, r0
     abe:	e8 22       	and	r14, r24
     ac0:	f9 22       	and	r15, r25
     ac2:	82 2f       	mov	r24, r18
     ac4:	86 95       	lsr	r24
     ac6:	86 95       	lsr	r24
     ac8:	28 2f       	mov	r18, r24
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	84 2f       	mov	r24, r20
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	ac 01       	movw	r20, r24
     ad2:	43 70       	andi	r20, 0x03	; 3
     ad4:	50 70       	andi	r21, 0x00	; 0
     ad6:	c9 01       	movw	r24, r18
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	88 0f       	add	r24, r24
     ade:	99 1f       	adc	r25, r25
     ae0:	82 0f       	add	r24, r18
     ae2:	93 1f       	adc	r25, r19
     ae4:	84 0f       	add	r24, r20
     ae6:	95 1f       	adc	r25, r21
     ae8:	87 55       	subi	r24, 0x57	; 87
     aea:	9d 4f       	sbci	r25, 0xFD	; 253
     aec:	fc 01       	movw	r30, r24
     aee:	80 81       	ld	r24, Z
     af0:	d8 2e       	mov	r13, r24
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	88 2f       	mov	r24, r24
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	87 54       	subi	r24, 0x47	; 71
     afe:	9b 4f       	sbci	r25, 0xFB	; 251
     b00:	fc 01       	movw	r30, r24
     b02:	80 81       	ld	r24, Z
     b04:	0e 94 ef 16 	call	0x2dde	; 0x2dde <PwmSetter>
     b08:	8c 7f       	andi	r24, 0xFC	; 252
     b0a:	8d 29       	or	r24, r13
     b0c:	28 2f       	mov	r18, r24
     b0e:	c8 01       	movw	r24, r16
     b10:	88 0f       	add	r24, r24
     b12:	99 1f       	adc	r25, r25
     b14:	88 0f       	add	r24, r24
     b16:	99 1f       	adc	r25, r25
     b18:	80 0f       	add	r24, r16
     b1a:	91 1f       	adc	r25, r17
     b1c:	8e 0d       	add	r24, r14
     b1e:	9f 1d       	adc	r25, r15
     b20:	87 55       	subi	r24, 0x57	; 87
     b22:	9d 4f       	sbci	r25, 0xFD	; 253
     b24:	fc 01       	movw	r30, r24
     b26:	20 83       	st	Z, r18
}

void MotorHubUpdate(void){
	volatile uint8_t i; 
	
	for(i = 0; i < USING_MOTOR_HUB; i++){
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	8f 5f       	subi	r24, 0xFF	; 255
     b2c:	89 83       	std	Y+1, r24	; 0x01
     b2e:	89 81       	ldd	r24, Y+1	; 0x01
     b30:	88 30       	cpi	r24, 0x08	; 8
     b32:	08 f4       	brcc	.+2      	; 0xb36 <MotorHubUpdate+0xee>
     b34:	95 cf       	rjmp	.-214    	; 0xa60 <MotorHubUpdate+0x18>
		MotorData[i>>2].data[i%4]  = MotorHubArray[i].status;
		MotorData[i>>2].data[i%4] |= (PwmSetter(MotorHubArray[i].pwm) & ~(0x03));
	}
	
	for(i = 0; i < ((USING_MOTOR_HUB - 1) >> 2) + 1; i++){
     b36:	19 82       	std	Y+1, r1	; 0x01
     b38:	92 c0       	rjmp	.+292    	; 0xc5e <MotorHubUpdate+0x216>
		RingSetChar('%', &RingBuffer);
     b3a:	29 ec       	ldi	r18, 0xC9	; 201
     b3c:	32 e0       	ldi	r19, 0x02	; 2
     b3e:	85 e2       	ldi	r24, 0x25	; 37
     b40:	b9 01       	movw	r22, r18
     b42:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar('$', &RingBuffer);
     b46:	29 ec       	ldi	r18, 0xC9	; 201
     b48:	32 e0       	ldi	r19, 0x02	; 2
     b4a:	84 e2       	ldi	r24, 0x24	; 36
     b4c:	b9 01       	movw	r22, r18
     b4e:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar('@', &RingBuffer);
     b52:	29 ec       	ldi	r18, 0xC9	; 201
     b54:	32 e0       	ldi	r19, 0x02	; 2
     b56:	80 e4       	ldi	r24, 0x40	; 64
     b58:	b9 01       	movw	r22, r18
     b5a:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar(MotorData[i].addr, &RingBuffer);
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	28 2f       	mov	r18, r24
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	c9 01       	movw	r24, r18
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	82 0f       	add	r24, r18
     b70:	93 1f       	adc	r25, r19
     b72:	88 55       	subi	r24, 0x58	; 88
     b74:	9d 4f       	sbci	r25, 0xFD	; 253
     b76:	fc 01       	movw	r30, r24
     b78:	80 81       	ld	r24, Z
     b7a:	29 ec       	ldi	r18, 0xC9	; 201
     b7c:	32 e0       	ldi	r19, 0x02	; 2
     b7e:	b9 01       	movw	r22, r18
     b80:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar('D', &RingBuffer);
     b84:	29 ec       	ldi	r18, 0xC9	; 201
     b86:	32 e0       	ldi	r19, 0x02	; 2
     b88:	84 e4       	ldi	r24, 0x44	; 68
     b8a:	b9 01       	movw	r22, r18
     b8c:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar('R', &RingBuffer);
     b90:	29 ec       	ldi	r18, 0xC9	; 201
     b92:	32 e0       	ldi	r19, 0x02	; 2
     b94:	82 e5       	ldi	r24, 0x52	; 82
     b96:	b9 01       	movw	r22, r18
     b98:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar('=', &RingBuffer);
     b9c:	29 ec       	ldi	r18, 0xC9	; 201
     b9e:	32 e0       	ldi	r19, 0x02	; 2
     ba0:	8d e3       	ldi	r24, 0x3D	; 61
     ba2:	b9 01       	movw	r22, r18
     ba4:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar(MotorData[i].data[0], &RingBuffer);
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	28 2f       	mov	r18, r24
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	c9 01       	movw	r24, r18
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	88 0f       	add	r24, r24
     bb6:	99 1f       	adc	r25, r25
     bb8:	82 0f       	add	r24, r18
     bba:	93 1f       	adc	r25, r19
     bbc:	87 55       	subi	r24, 0x57	; 87
     bbe:	9d 4f       	sbci	r25, 0xFD	; 253
     bc0:	fc 01       	movw	r30, r24
     bc2:	80 81       	ld	r24, Z
     bc4:	29 ec       	ldi	r18, 0xC9	; 201
     bc6:	32 e0       	ldi	r19, 0x02	; 2
     bc8:	b9 01       	movw	r22, r18
     bca:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar(MotorData[i].data[1], &RingBuffer);
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	28 2f       	mov	r18, r24
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	c9 01       	movw	r24, r18
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	82 0f       	add	r24, r18
     be0:	93 1f       	adc	r25, r19
     be2:	86 55       	subi	r24, 0x56	; 86
     be4:	9d 4f       	sbci	r25, 0xFD	; 253
     be6:	fc 01       	movw	r30, r24
     be8:	80 81       	ld	r24, Z
     bea:	29 ec       	ldi	r18, 0xC9	; 201
     bec:	32 e0       	ldi	r19, 0x02	; 2
     bee:	b9 01       	movw	r22, r18
     bf0:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar(MotorData[i].data[2], &RingBuffer);
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	28 2f       	mov	r18, r24
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	c9 01       	movw	r24, r18
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	82 0f       	add	r24, r18
     c06:	93 1f       	adc	r25, r19
     c08:	85 55       	subi	r24, 0x55	; 85
     c0a:	9d 4f       	sbci	r25, 0xFD	; 253
     c0c:	fc 01       	movw	r30, r24
     c0e:	80 81       	ld	r24, Z
     c10:	29 ec       	ldi	r18, 0xC9	; 201
     c12:	32 e0       	ldi	r19, 0x02	; 2
     c14:	b9 01       	movw	r22, r18
     c16:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar(MotorData[i].data[3], &RingBuffer);
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	c9 01       	movw	r24, r18
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	82 0f       	add	r24, r18
     c2c:	93 1f       	adc	r25, r19
     c2e:	84 55       	subi	r24, 0x54	; 84
     c30:	9d 4f       	sbci	r25, 0xFD	; 253
     c32:	fc 01       	movw	r30, r24
     c34:	80 81       	ld	r24, Z
     c36:	29 ec       	ldi	r18, 0xC9	; 201
     c38:	32 e0       	ldi	r19, 0x02	; 2
     c3a:	b9 01       	movw	r22, r18
     c3c:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar('\r', &RingBuffer);
     c40:	29 ec       	ldi	r18, 0xC9	; 201
     c42:	32 e0       	ldi	r19, 0x02	; 2
     c44:	8d e0       	ldi	r24, 0x0D	; 13
     c46:	b9 01       	movw	r22, r18
     c48:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar('\n', &RingBuffer);
     c4c:	29 ec       	ldi	r18, 0xC9	; 201
     c4e:	32 e0       	ldi	r19, 0x02	; 2
     c50:	8a e0       	ldi	r24, 0x0A	; 10
     c52:	b9 01       	movw	r22, r18
     c54:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
	for(i = 0; i < USING_MOTOR_HUB; i++){
		MotorData[i>>2].data[i%4]  = MotorHubArray[i].status;
		MotorData[i>>2].data[i%4] |= (PwmSetter(MotorHubArray[i].pwm) & ~(0x03));
	}
	
	for(i = 0; i < ((USING_MOTOR_HUB - 1) >> 2) + 1; i++){
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	8f 5f       	subi	r24, 0xFF	; 255
     c5c:	89 83       	std	Y+1, r24	; 0x01
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	82 30       	cpi	r24, 0x02	; 2
     c62:	08 f4       	brcc	.+2      	; 0xc66 <MotorHubUpdate+0x21e>
     c64:	6a cf       	rjmp	.-300    	; 0xb3a <MotorHubUpdate+0xf2>
		RingSetChar(MotorData[i].data[2], &RingBuffer);
		RingSetChar(MotorData[i].data[3], &RingBuffer);
		RingSetChar('\r', &RingBuffer);
		RingSetChar('\n', &RingBuffer);
	}
}
     c66:	0f 90       	pop	r0
     c68:	cf 91       	pop	r28
     c6a:	df 91       	pop	r29
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	df 90       	pop	r13
     c76:	08 95       	ret

00000c78 <LedHubInitialize>:
#endif


#if defined(USING_LED_HUB)

static void LedHubInitialize(void){
     c78:	df 93       	push	r29
     c7a:	cf 93       	push	r28
     c7c:	00 d0       	rcall	.+0      	; 0xc7e <LedHubInitialize+0x6>
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t i, j;
	
	for(i = 0; i < USING_LED_HUB; i++){
     c82:	19 82       	std	Y+1, r1	; 0x01
     c84:	0a c0       	rjmp	.+20     	; 0xc9a <LedHubInitialize+0x22>
		LedHubArray[i] = 0x00;
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	88 2f       	mov	r24, r24
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	88 55       	subi	r24, 0x58	; 88
     c8e:	9b 4f       	sbci	r25, 0xFB	; 251
     c90:	fc 01       	movw	r30, r24
     c92:	10 82       	st	Z, r1
#if defined(USING_LED_HUB)

static void LedHubInitialize(void){
	volatile uint8_t i, j;
	
	for(i = 0; i < USING_LED_HUB; i++){
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	8f 5f       	subi	r24, 0xFF	; 255
     c98:	89 83       	std	Y+1, r24	; 0x01
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	80 31       	cpi	r24, 0x10	; 16
     c9e:	98 f3       	brcs	.-26     	; 0xc86 <LedHubInitialize+0xe>
		LedHubArray[i] = 0x00;
	}
	
	for(i = 0; i < ((USING_LED_HUB - 1) >> 4) + 1; i++){
     ca0:	19 82       	std	Y+1, r1	; 0x01
     ca2:	4b c0       	rjmp	.+150    	; 0xd3a <LedHubInitialize+0xc2>
		for(j = 0; j < 4; j++){
     ca4:	1a 82       	std	Y+2, r1	; 0x02
     ca6:	16 c0       	rjmp	.+44     	; 0xcd4 <LedHubInitialize+0x5c>
			LedData[i].data[j] = 0x00;
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	48 2f       	mov	r20, r24
     cb2:	50 e0       	ldi	r21, 0x00	; 0
     cb4:	c9 01       	movw	r24, r18
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	82 0f       	add	r24, r18
     cc0:	93 1f       	adc	r25, r19
     cc2:	84 0f       	add	r24, r20
     cc4:	95 1f       	adc	r25, r21
     cc6:	8d 54       	subi	r24, 0x4D	; 77
     cc8:	9d 4f       	sbci	r25, 0xFD	; 253
     cca:	fc 01       	movw	r30, r24
     ccc:	10 82       	st	Z, r1
	for(i = 0; i < USING_LED_HUB; i++){
		LedHubArray[i] = 0x00;
	}
	
	for(i = 0; i < ((USING_LED_HUB - 1) >> 4) + 1; i++){
		for(j = 0; j < 4; j++){
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	8f 5f       	subi	r24, 0xFF	; 255
     cd2:	8a 83       	std	Y+2, r24	; 0x02
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	84 30       	cpi	r24, 0x04	; 4
     cd8:	38 f3       	brcs	.-50     	; 0xca8 <LedHubInitialize+0x30>
			LedData[i].data[j] = 0x00;
		}
		LedData[i].addr =  0x40;
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	c9 01       	movw	r24, r18
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	82 0f       	add	r24, r18
     cec:	93 1f       	adc	r25, r19
     cee:	8e 54       	subi	r24, 0x4E	; 78
     cf0:	9d 4f       	sbci	r25, 0xFD	; 253
     cf2:	20 e4       	ldi	r18, 0x40	; 64
     cf4:	fc 01       	movw	r30, r24
     cf6:	20 83       	st	Z, r18
		LedData[i].addr |= i;
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	48 2f       	mov	r20, r24
     d00:	50 e0       	ldi	r21, 0x00	; 0
     d02:	ca 01       	movw	r24, r20
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	84 0f       	add	r24, r20
     d0e:	95 1f       	adc	r25, r21
     d10:	8e 54       	subi	r24, 0x4E	; 78
     d12:	9d 4f       	sbci	r25, 0xFD	; 253
     d14:	fc 01       	movw	r30, r24
     d16:	90 81       	ld	r25, Z
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	49 2f       	mov	r20, r25
     d1c:	48 2b       	or	r20, r24
     d1e:	c9 01       	movw	r24, r18
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	82 0f       	add	r24, r18
     d2a:	93 1f       	adc	r25, r19
     d2c:	8e 54       	subi	r24, 0x4E	; 78
     d2e:	9d 4f       	sbci	r25, 0xFD	; 253
     d30:	fc 01       	movw	r30, r24
     d32:	40 83       	st	Z, r20
	
	for(i = 0; i < USING_LED_HUB; i++){
		LedHubArray[i] = 0x00;
	}
	
	for(i = 0; i < ((USING_LED_HUB - 1) >> 4) + 1; i++){
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	8f 5f       	subi	r24, 0xFF	; 255
     d38:	89 83       	std	Y+1, r24	; 0x01
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	88 23       	and	r24, r24
     d3e:	09 f4       	brne	.+2      	; 0xd42 <LedHubInitialize+0xca>
     d40:	b1 cf       	rjmp	.-158    	; 0xca4 <LedHubInitialize+0x2c>
			LedData[i].data[j] = 0x00;
		}
		LedData[i].addr =  0x40;
		LedData[i].addr |= i;
	}
}
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <LedHubUpdate>:

void LedHubUpdate(void){
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	00 d0       	rcall	.+0      	; 0xd52 <LedHubUpdate+0x6>
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t i, j;
	
	for(i = 0; i < ((USING_LED_HUB - 1) >> 4) + 1; i++){
     d56:	19 82       	std	Y+1, r1	; 0x01
     d58:	1e c0       	rjmp	.+60     	; 0xd96 <LedHubUpdate+0x4a>
		for(j = 0; j < 4; j++){
     d5a:	1a 82       	std	Y+2, r1	; 0x02
     d5c:	16 c0       	rjmp	.+44     	; 0xd8a <LedHubUpdate+0x3e>
			LedData[i].data[j] = 0x00;
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	48 2f       	mov	r20, r24
     d68:	50 e0       	ldi	r21, 0x00	; 0
     d6a:	c9 01       	movw	r24, r18
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	82 0f       	add	r24, r18
     d76:	93 1f       	adc	r25, r19
     d78:	84 0f       	add	r24, r20
     d7a:	95 1f       	adc	r25, r21
     d7c:	8d 54       	subi	r24, 0x4D	; 77
     d7e:	9d 4f       	sbci	r25, 0xFD	; 253
     d80:	dc 01       	movw	r26, r24
     d82:	1c 92       	st	X, r1

void LedHubUpdate(void){
	volatile uint8_t i, j;
	
	for(i = 0; i < ((USING_LED_HUB - 1) >> 4) + 1; i++){
		for(j = 0; j < 4; j++){
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	8f 5f       	subi	r24, 0xFF	; 255
     d88:	8a 83       	std	Y+2, r24	; 0x02
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	84 30       	cpi	r24, 0x04	; 4
     d8e:	38 f3       	brcs	.-50     	; 0xd5e <LedHubUpdate+0x12>
}

void LedHubUpdate(void){
	volatile uint8_t i, j;
	
	for(i = 0; i < ((USING_LED_HUB - 1) >> 4) + 1; i++){
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	8f 5f       	subi	r24, 0xFF	; 255
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	88 23       	and	r24, r24
     d9a:	f9 f2       	breq	.-66     	; 0xd5a <LedHubUpdate+0xe>
		for(j = 0; j < 4; j++){
			LedData[i].data[j] = 0x00;
		}		
	}
	
	for(i = 0; i < USING_LED_HUB; i++){
     d9c:	19 82       	std	Y+1, r1	; 0x01
     d9e:	47 c0       	rjmp	.+142    	; 0xe2e <LedHubUpdate+0xe2>
		LedData[i>>4].data[i>>2] |= LedHubArray[i] << (i%4);
     da0:	99 81       	ldd	r25, Y+1	; 0x01
     da2:	89 2f       	mov	r24, r25
     da4:	82 95       	swap	r24
     da6:	8f 70       	andi	r24, 0x0F	; 15
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	48 2f       	mov	r20, r24
     db0:	46 95       	lsr	r20
     db2:	46 95       	lsr	r20
     db4:	64 2f       	mov	r22, r20
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	92 95       	swap	r25
     dba:	9f 70       	andi	r25, 0x0F	; 15
     dbc:	49 2f       	mov	r20, r25
     dbe:	50 e0       	ldi	r21, 0x00	; 0
     dc0:	86 95       	lsr	r24
     dc2:	86 95       	lsr	r24
     dc4:	e8 2f       	mov	r30, r24
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	ca 01       	movw	r24, r20
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	84 0f       	add	r24, r20
     dd4:	95 1f       	adc	r25, r21
     dd6:	8e 0f       	add	r24, r30
     dd8:	9f 1f       	adc	r25, r31
     dda:	8d 54       	subi	r24, 0x4D	; 77
     ddc:	9d 4f       	sbci	r25, 0xFD	; 253
     dde:	fc 01       	movw	r30, r24
     de0:	80 81       	ld	r24, Z
     de2:	e8 2f       	mov	r30, r24
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	88 2f       	mov	r24, r24
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	88 55       	subi	r24, 0x58	; 88
     dec:	9b 4f       	sbci	r25, 0xFB	; 251
     dee:	dc 01       	movw	r26, r24
     df0:	8c 91       	ld	r24, X
     df2:	88 2f       	mov	r24, r24
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	49 81       	ldd	r20, Y+1	; 0x01
     df8:	44 2f       	mov	r20, r20
     dfa:	50 e0       	ldi	r21, 0x00	; 0
     dfc:	43 70       	andi	r20, 0x03	; 3
     dfe:	50 70       	andi	r21, 0x00	; 0
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <LedHubUpdate+0xba>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	4a 95       	dec	r20
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <LedHubUpdate+0xb6>
     e0a:	8e 2b       	or	r24, r30
     e0c:	48 2f       	mov	r20, r24
     e0e:	c9 01       	movw	r24, r18
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	82 0f       	add	r24, r18
     e1a:	93 1f       	adc	r25, r19
     e1c:	86 0f       	add	r24, r22
     e1e:	97 1f       	adc	r25, r23
     e20:	8d 54       	subi	r24, 0x4D	; 77
     e22:	9d 4f       	sbci	r25, 0xFD	; 253
     e24:	fc 01       	movw	r30, r24
     e26:	40 83       	st	Z, r20
		for(j = 0; j < 4; j++){
			LedData[i].data[j] = 0x00;
		}		
	}
	
	for(i = 0; i < USING_LED_HUB; i++){
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	8f 5f       	subi	r24, 0xFF	; 255
     e2c:	89 83       	std	Y+1, r24	; 0x01
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	80 31       	cpi	r24, 0x10	; 16
     e32:	08 f4       	brcc	.+2      	; 0xe36 <LedHubUpdate+0xea>
     e34:	b5 cf       	rjmp	.-150    	; 0xda0 <LedHubUpdate+0x54>
		LedData[i>>4].data[i>>2] |= LedHubArray[i] << (i%4);
	}
	
	for(i = 0; i < ((USING_LED_HUB - 1) >> 4) + 1; i++){
     e36:	19 82       	std	Y+1, r1	; 0x01
     e38:	92 c0       	rjmp	.+292    	; 0xf5e <LedHubUpdate+0x212>
		RingSetChar('%', &RingBuffer);
     e3a:	29 ec       	ldi	r18, 0xC9	; 201
     e3c:	32 e0       	ldi	r19, 0x02	; 2
     e3e:	85 e2       	ldi	r24, 0x25	; 37
     e40:	b9 01       	movw	r22, r18
     e42:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar('$', &RingBuffer);
     e46:	29 ec       	ldi	r18, 0xC9	; 201
     e48:	32 e0       	ldi	r19, 0x02	; 2
     e4a:	84 e2       	ldi	r24, 0x24	; 36
     e4c:	b9 01       	movw	r22, r18
     e4e:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar('@', &RingBuffer);
     e52:	29 ec       	ldi	r18, 0xC9	; 201
     e54:	32 e0       	ldi	r19, 0x02	; 2
     e56:	80 e4       	ldi	r24, 0x40	; 64
     e58:	b9 01       	movw	r22, r18
     e5a:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar(LedData[i].addr, &RingBuffer);
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	c9 01       	movw	r24, r18
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	82 0f       	add	r24, r18
     e70:	93 1f       	adc	r25, r19
     e72:	8e 54       	subi	r24, 0x4E	; 78
     e74:	9d 4f       	sbci	r25, 0xFD	; 253
     e76:	dc 01       	movw	r26, r24
     e78:	8c 91       	ld	r24, X
     e7a:	29 ec       	ldi	r18, 0xC9	; 201
     e7c:	32 e0       	ldi	r19, 0x02	; 2
     e7e:	b9 01       	movw	r22, r18
     e80:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar('D', &RingBuffer);
     e84:	29 ec       	ldi	r18, 0xC9	; 201
     e86:	32 e0       	ldi	r19, 0x02	; 2
     e88:	84 e4       	ldi	r24, 0x44	; 68
     e8a:	b9 01       	movw	r22, r18
     e8c:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar('R', &RingBuffer);
     e90:	29 ec       	ldi	r18, 0xC9	; 201
     e92:	32 e0       	ldi	r19, 0x02	; 2
     e94:	82 e5       	ldi	r24, 0x52	; 82
     e96:	b9 01       	movw	r22, r18
     e98:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar('=', &RingBuffer);
     e9c:	29 ec       	ldi	r18, 0xC9	; 201
     e9e:	32 e0       	ldi	r19, 0x02	; 2
     ea0:	8d e3       	ldi	r24, 0x3D	; 61
     ea2:	b9 01       	movw	r22, r18
     ea4:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar(LedData[i].data[0], &RingBuffer);
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	c9 01       	movw	r24, r18
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	82 0f       	add	r24, r18
     eba:	93 1f       	adc	r25, r19
     ebc:	8d 54       	subi	r24, 0x4D	; 77
     ebe:	9d 4f       	sbci	r25, 0xFD	; 253
     ec0:	fc 01       	movw	r30, r24
     ec2:	80 81       	ld	r24, Z
     ec4:	29 ec       	ldi	r18, 0xC9	; 201
     ec6:	32 e0       	ldi	r19, 0x02	; 2
     ec8:	b9 01       	movw	r22, r18
     eca:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar(LedData[i].data[1], &RingBuffer);
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	c9 01       	movw	r24, r18
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	82 0f       	add	r24, r18
     ee0:	93 1f       	adc	r25, r19
     ee2:	8c 54       	subi	r24, 0x4C	; 76
     ee4:	9d 4f       	sbci	r25, 0xFD	; 253
     ee6:	dc 01       	movw	r26, r24
     ee8:	8c 91       	ld	r24, X
     eea:	29 ec       	ldi	r18, 0xC9	; 201
     eec:	32 e0       	ldi	r19, 0x02	; 2
     eee:	b9 01       	movw	r22, r18
     ef0:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar(LedData[i].data[2], &RingBuffer);
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	c9 01       	movw	r24, r18
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	82 0f       	add	r24, r18
     f06:	93 1f       	adc	r25, r19
     f08:	8b 54       	subi	r24, 0x4B	; 75
     f0a:	9d 4f       	sbci	r25, 0xFD	; 253
     f0c:	fc 01       	movw	r30, r24
     f0e:	80 81       	ld	r24, Z
     f10:	29 ec       	ldi	r18, 0xC9	; 201
     f12:	32 e0       	ldi	r19, 0x02	; 2
     f14:	b9 01       	movw	r22, r18
     f16:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar(LedData[i].data[3], &RingBuffer);
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	c9 01       	movw	r24, r18
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	82 0f       	add	r24, r18
     f2c:	93 1f       	adc	r25, r19
     f2e:	8a 54       	subi	r24, 0x4A	; 74
     f30:	9d 4f       	sbci	r25, 0xFD	; 253
     f32:	dc 01       	movw	r26, r24
     f34:	8c 91       	ld	r24, X
     f36:	29 ec       	ldi	r18, 0xC9	; 201
     f38:	32 e0       	ldi	r19, 0x02	; 2
     f3a:	b9 01       	movw	r22, r18
     f3c:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar('\r', &RingBuffer);
     f40:	29 ec       	ldi	r18, 0xC9	; 201
     f42:	32 e0       	ldi	r19, 0x02	; 2
     f44:	8d e0       	ldi	r24, 0x0D	; 13
     f46:	b9 01       	movw	r22, r18
     f48:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar('\n', &RingBuffer);
     f4c:	29 ec       	ldi	r18, 0xC9	; 201
     f4e:	32 e0       	ldi	r19, 0x02	; 2
     f50:	8a e0       	ldi	r24, 0x0A	; 10
     f52:	b9 01       	movw	r22, r18
     f54:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
	
	for(i = 0; i < USING_LED_HUB; i++){
		LedData[i>>4].data[i>>2] |= LedHubArray[i] << (i%4);
	}
	
	for(i = 0; i < ((USING_LED_HUB - 1) >> 4) + 1; i++){
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	8f 5f       	subi	r24, 0xFF	; 255
     f5c:	89 83       	std	Y+1, r24	; 0x01
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	88 23       	and	r24, r24
     f62:	09 f4       	brne	.+2      	; 0xf66 <LedHubUpdate+0x21a>
     f64:	6a cf       	rjmp	.-300    	; 0xe3a <LedHubUpdate+0xee>
		RingSetChar(LedData[i].data[2], &RingBuffer);
		RingSetChar(LedData[i].data[3], &RingBuffer);
		RingSetChar('\r', &RingBuffer);
		RingSetChar('\n', &RingBuffer);
	}
}
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <AirHubInitialize>:
#endif


#if defined(USE_AIR_HUB)

static void AirHubInitialize(void){
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	0f 92       	push	r0
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t i;
	
	for(i = 0; i < USING_AIR_HUB; i++){
     f7a:	19 82       	std	Y+1, r1	; 0x01
     f7c:	0a c0       	rjmp	.+20     	; 0xf92 <AirHubInitialize+0x22>
		AirHubArray[i] = 0x00;
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	88 2f       	mov	r24, r24
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	88 53       	subi	r24, 0x38	; 56
     f86:	9b 4f       	sbci	r25, 0xFB	; 251
     f88:	fc 01       	movw	r30, r24
     f8a:	10 82       	st	Z, r1
#if defined(USE_AIR_HUB)

static void AirHubInitialize(void){
	volatile uint8_t i;
	
	for(i = 0; i < USING_AIR_HUB; i++){
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	8f 5f       	subi	r24, 0xFF	; 255
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	88 30       	cpi	r24, 0x08	; 8
     f96:	98 f3       	brcs	.-26     	; 0xf7e <AirHubInitialize+0xe>
		AirHubArray[i] = 0x00;
	}
	
	for(i = 0; i < ((USING_AIR_HUB - 1) >> 3) + 1; i++){
     f98:	19 82       	std	Y+1, r1	; 0x01
     f9a:	29 c0       	rjmp	.+82     	; 0xfee <AirHubInitialize+0x7e>
		AirData[i].data = 0x00;
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	88 2f       	mov	r24, r24
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	88 54       	subi	r24, 0x48	; 72
     fa8:	9d 4f       	sbci	r25, 0xFD	; 253
     faa:	fc 01       	movw	r30, r24
     fac:	10 82       	st	Z, r1
		
		AirData[i].addr =  0x80;
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	88 2f       	mov	r24, r24
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	89 54       	subi	r24, 0x49	; 73
     fba:	9d 4f       	sbci	r25, 0xFD	; 253
     fbc:	20 e8       	ldi	r18, 0x80	; 128
     fbe:	fc 01       	movw	r30, r24
     fc0:	20 83       	st	Z, r18
		AirData[i].addr |= i;
     fc2:	29 81       	ldd	r18, Y+1	; 0x01
     fc4:	82 2f       	mov	r24, r18
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	22 2f       	mov	r18, r18
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	22 0f       	add	r18, r18
     fce:	33 1f       	adc	r19, r19
     fd0:	29 54       	subi	r18, 0x49	; 73
     fd2:	3d 4f       	sbci	r19, 0xFD	; 253
     fd4:	f9 01       	movw	r30, r18
     fd6:	30 81       	ld	r19, Z
     fd8:	29 81       	ldd	r18, Y+1	; 0x01
     fda:	23 2b       	or	r18, r19
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	89 54       	subi	r24, 0x49	; 73
     fe2:	9d 4f       	sbci	r25, 0xFD	; 253
     fe4:	fc 01       	movw	r30, r24
     fe6:	20 83       	st	Z, r18
	
	for(i = 0; i < USING_AIR_HUB; i++){
		AirHubArray[i] = 0x00;
	}
	
	for(i = 0; i < ((USING_AIR_HUB - 1) >> 3) + 1; i++){
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	8f 5f       	subi	r24, 0xFF	; 255
     fec:	89 83       	std	Y+1, r24	; 0x01
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	88 23       	and	r24, r24
     ff2:	a1 f2       	breq	.-88     	; 0xf9c <AirHubInitialize+0x2c>
		AirData[i].data = 0x00;
		
		AirData[i].addr =  0x80;
		AirData[i].addr |= i;
	}
}
     ff4:	0f 90       	pop	r0
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	08 95       	ret

00000ffc <AirHubUpdate>:

void AirHubUpdate(void){
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	0f 92       	push	r0
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t i;
	
	for(i = 0; i < ((USING_AIR_HUB - 1) >> 3) + 1; i++){
    1006:	19 82       	std	Y+1, r1	; 0x01
    1008:	0c c0       	rjmp	.+24     	; 0x1022 <AirHubUpdate+0x26>
		AirData[i].data = 0x00;
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	88 2f       	mov	r24, r24
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	88 54       	subi	r24, 0x48	; 72
    1016:	9d 4f       	sbci	r25, 0xFD	; 253
    1018:	fc 01       	movw	r30, r24
    101a:	10 82       	st	Z, r1
}

void AirHubUpdate(void){
	volatile uint8_t i;
	
	for(i = 0; i < ((USING_AIR_HUB - 1) >> 3) + 1; i++){
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	8f 5f       	subi	r24, 0xFF	; 255
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	88 23       	and	r24, r24
    1026:	89 f3       	breq	.-30     	; 0x100a <AirHubUpdate+0xe>
		AirData[i].data = 0x00;
	}
	
	for(i = 0; i < USING_AIR_HUB; i++){
    1028:	19 82       	std	Y+1, r1	; 0x01
    102a:	30 c0       	rjmp	.+96     	; 0x108c <AirHubUpdate+0x90>
		AirData[i>>3].data |= (uint8_t)(AirHubArray[i] << (i%8));
    102c:	29 81       	ldd	r18, Y+1	; 0x01
    102e:	82 2f       	mov	r24, r18
    1030:	86 95       	lsr	r24
    1032:	86 95       	lsr	r24
    1034:	86 95       	lsr	r24
    1036:	88 2f       	mov	r24, r24
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	26 95       	lsr	r18
    103c:	26 95       	lsr	r18
    103e:	26 95       	lsr	r18
    1040:	22 2f       	mov	r18, r18
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	22 0f       	add	r18, r18
    1046:	33 1f       	adc	r19, r19
    1048:	28 54       	subi	r18, 0x48	; 72
    104a:	3d 4f       	sbci	r19, 0xFD	; 253
    104c:	f9 01       	movw	r30, r18
    104e:	60 81       	ld	r22, Z
    1050:	29 81       	ldd	r18, Y+1	; 0x01
    1052:	22 2f       	mov	r18, r18
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	28 53       	subi	r18, 0x38	; 56
    1058:	3b 4f       	sbci	r19, 0xFB	; 251
    105a:	f9 01       	movw	r30, r18
    105c:	20 81       	ld	r18, Z
    105e:	22 2f       	mov	r18, r18
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	49 81       	ldd	r20, Y+1	; 0x01
    1064:	44 2f       	mov	r20, r20
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	47 70       	andi	r20, 0x07	; 7
    106a:	50 70       	andi	r21, 0x00	; 0
    106c:	04 2e       	mov	r0, r20
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <AirHubUpdate+0x78>
    1070:	22 0f       	add	r18, r18
    1072:	33 1f       	adc	r19, r19
    1074:	0a 94       	dec	r0
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <AirHubUpdate+0x74>
    1078:	26 2b       	or	r18, r22
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	88 54       	subi	r24, 0x48	; 72
    1080:	9d 4f       	sbci	r25, 0xFD	; 253
    1082:	fc 01       	movw	r30, r24
    1084:	20 83       	st	Z, r18
	
	for(i = 0; i < ((USING_AIR_HUB - 1) >> 3) + 1; i++){
		AirData[i].data = 0x00;
	}
	
	for(i = 0; i < USING_AIR_HUB; i++){
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	8f 5f       	subi	r24, 0xFF	; 255
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	88 30       	cpi	r24, 0x08	; 8
    1090:	68 f2       	brcs	.-102    	; 0x102c <AirHubUpdate+0x30>
		AirData[i>>3].data |= (uint8_t)(AirHubArray[i] << (i%8));
	}
	
	for(i = 0; i < ((USING_AIR_HUB - 1) >> 3) + 1; i++){
    1092:	19 82       	std	Y+1, r1	; 0x01
    1094:	4f c0       	rjmp	.+158    	; 0x1134 <__stack+0x35>
		RingSetChar('%', &RingBuffer);
    1096:	29 ec       	ldi	r18, 0xC9	; 201
    1098:	32 e0       	ldi	r19, 0x02	; 2
    109a:	85 e2       	ldi	r24, 0x25	; 37
    109c:	b9 01       	movw	r22, r18
    109e:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
 		RingSetChar('$', &RingBuffer);
    10a2:	29 ec       	ldi	r18, 0xC9	; 201
    10a4:	32 e0       	ldi	r19, 0x02	; 2
    10a6:	84 e2       	ldi	r24, 0x24	; 36
    10a8:	b9 01       	movw	r22, r18
    10aa:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar('@', &RingBuffer);
    10ae:	29 ec       	ldi	r18, 0xC9	; 201
    10b0:	32 e0       	ldi	r19, 0x02	; 2
    10b2:	80 e4       	ldi	r24, 0x40	; 64
    10b4:	b9 01       	movw	r22, r18
    10b6:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar(AirData[i].addr, &RingBuffer);
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	88 2f       	mov	r24, r24
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	89 54       	subi	r24, 0x49	; 73
    10c6:	9d 4f       	sbci	r25, 0xFD	; 253
    10c8:	fc 01       	movw	r30, r24
    10ca:	80 81       	ld	r24, Z
    10cc:	29 ec       	ldi	r18, 0xC9	; 201
    10ce:	32 e0       	ldi	r19, 0x02	; 2
    10d0:	b9 01       	movw	r22, r18
    10d2:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar('D', &RingBuffer);
    10d6:	29 ec       	ldi	r18, 0xC9	; 201
    10d8:	32 e0       	ldi	r19, 0x02	; 2
    10da:	84 e4       	ldi	r24, 0x44	; 68
    10dc:	b9 01       	movw	r22, r18
    10de:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar('R', &RingBuffer);
    10e2:	29 ec       	ldi	r18, 0xC9	; 201
    10e4:	32 e0       	ldi	r19, 0x02	; 2
    10e6:	82 e5       	ldi	r24, 0x52	; 82
    10e8:	b9 01       	movw	r22, r18
    10ea:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar('=', &RingBuffer);
    10ee:	29 ec       	ldi	r18, 0xC9	; 201
    10f0:	32 e0       	ldi	r19, 0x02	; 2
    10f2:	8d e3       	ldi	r24, 0x3D	; 61
    10f4:	b9 01       	movw	r22, r18
    10f6:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar(AirData[i].data, &RingBuffer);
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	88 54       	subi	r24, 0x48	; 72
    1106:	9d 4f       	sbci	r25, 0xFD	; 253
    1108:	fc 01       	movw	r30, r24
    110a:	80 81       	ld	r24, Z
    110c:	29 ec       	ldi	r18, 0xC9	; 201
    110e:	32 e0       	ldi	r19, 0x02	; 2
    1110:	b9 01       	movw	r22, r18
    1112:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar('\r', &RingBuffer);
    1116:	29 ec       	ldi	r18, 0xC9	; 201
    1118:	32 e0       	ldi	r19, 0x02	; 2
    111a:	8d e0       	ldi	r24, 0x0D	; 13
    111c:	b9 01       	movw	r22, r18
    111e:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
		RingSetChar('\n', &RingBuffer);
    1122:	29 ec       	ldi	r18, 0xC9	; 201
    1124:	32 e0       	ldi	r19, 0x02	; 2
    1126:	8a e0       	ldi	r24, 0x0A	; 10
    1128:	b9 01       	movw	r22, r18
    112a:	0e 94 8d 03 	call	0x71a	; 0x71a <RingSetChar>
	
	for(i = 0; i < USING_AIR_HUB; i++){
		AirData[i>>3].data |= (uint8_t)(AirHubArray[i] << (i%8));
	}
	
	for(i = 0; i < ((USING_AIR_HUB - 1) >> 3) + 1; i++){
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	8f 5f       	subi	r24, 0xFF	; 255
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	88 23       	and	r24, r24
    1138:	09 f4       	brne	.+2      	; 0x113c <__stack+0x3d>
    113a:	ad cf       	rjmp	.-166    	; 0x1096 <AirHubUpdate+0x9a>
		RingSetChar('=', &RingBuffer);
		RingSetChar(AirData[i].data, &RingBuffer);
		RingSetChar('\r', &RingBuffer);
		RingSetChar('\n', &RingBuffer);
	}
}
    113c:	0f 90       	pop	r0
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <__vector_30>:
#endif


// Initerrupt
/*----------------------------------------------------------------------------*/
ISR(USART1_RX_vect){
    1144:	1f 92       	push	r1
    1146:	0f 92       	push	r0
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	0f 92       	push	r0
    114c:	11 24       	eor	r1, r1
    114e:	2f 93       	push	r18
    1150:	8f 93       	push	r24
    1152:	9f 93       	push	r25
    1154:	ef 93       	push	r30
    1156:	ff 93       	push	r31
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
	#if defined(USE_SENSOR_HUB)
		uint8_t i;
	#endif
	val = UDR1;
    1160:	8c e9       	ldi	r24, 0x9C	; 156
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	fc 01       	movw	r30, r24
    1166:	80 81       	ld	r24, Z
    1168:	80 93 b9 02 	sts	0x02B9, r24
	
	if(phase == 1){
    116c:	80 91 ba 02 	lds	r24, 0x02BA
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	09 f5       	brne	.+66     	; 0x11b6 <__vector_30+0x72>
		if(addrCheck){
    1174:	80 91 bc 02 	lds	r24, 0x02BC
    1178:	88 23       	and	r24, r24
    117a:	79 f0       	breq	.+30     	; 0x119a <__vector_30+0x56>
			if(val == 0x01){
    117c:	80 91 b9 02 	lds	r24, 0x02B9
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	31 f4       	brne	.+12     	; 0x1190 <__vector_30+0x4c>
				phase = 2;
    1184:	82 e0       	ldi	r24, 0x02	; 2
    1186:	80 93 ba 02 	sts	0x02BA, r24
				count = 0;
    118a:	10 92 bb 02 	sts	0x02BB, r1
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <__vector_30+0x50>
			}
			else{
				phase = 0;
    1190:	10 92 ba 02 	sts	0x02BA, r1
			}
			addrCheck = false;
    1194:	10 92 bc 02 	sts	0x02BC, r1
    1198:	3a c0       	rjmp	.+116    	; 0x120e <__vector_30+0xca>
		}
		else if(val == '@' && !addrCheck){
    119a:	80 91 b9 02 	lds	r24, 0x02B9
    119e:	80 34       	cpi	r24, 0x40	; 64
    11a0:	b1 f5       	brne	.+108    	; 0x120e <__vector_30+0xca>
    11a2:	90 91 bc 02 	lds	r25, 0x02BC
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	89 27       	eor	r24, r25
    11aa:	88 23       	and	r24, r24
    11ac:	81 f1       	breq	.+96     	; 0x120e <__vector_30+0xca>
			addrCheck = true;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	80 93 bc 02 	sts	0x02BC, r24
    11b4:	2c c0       	rjmp	.+88     	; 0x120e <__vector_30+0xca>
		}
	}		
	else if(phase == 2){
    11b6:	80 91 ba 02 	lds	r24, 0x02BA
    11ba:	82 30       	cpi	r24, 0x02	; 2
    11bc:	41 f5       	brne	.+80     	; 0x120e <__vector_30+0xca>
		packet[count] = val;
    11be:	80 91 bb 02 	lds	r24, 0x02BB
    11c2:	88 2f       	mov	r24, r24
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	20 91 b9 02 	lds	r18, 0x02B9
    11ca:	83 54       	subi	r24, 0x43	; 67
    11cc:	9d 4f       	sbci	r25, 0xFD	; 253
    11ce:	fc 01       	movw	r30, r24
    11d0:	20 83       	st	Z, r18
		if(count < 2){
    11d2:	80 91 bb 02 	lds	r24, 0x02BB
    11d6:	82 30       	cpi	r24, 0x02	; 2
    11d8:	78 f4       	brcc	.+30     	; 0x11f8 <__vector_30+0xb4>
			if(val != check[count]){
    11da:	80 91 bb 02 	lds	r24, 0x02BB
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	86 5a       	subi	r24, 0xA6	; 166
    11e4:	9e 4f       	sbci	r25, 0xFE	; 254
    11e6:	fc 01       	movw	r30, r24
    11e8:	90 81       	ld	r25, Z
    11ea:	80 91 b9 02 	lds	r24, 0x02B9
    11ee:	98 17       	cp	r25, r24
    11f0:	49 f0       	breq	.+18     	; 0x1204 <__vector_30+0xc0>
				phase = 0;
    11f2:	10 92 ba 02 	sts	0x02BA, r1
    11f6:	06 c0       	rjmp	.+12     	; 0x1204 <__vector_30+0xc0>
				#if defined(USE_SENSOR_HUB)
					SensorBoardLost = true;
				#endif
			}		
		}
		else if(count >= 12){
    11f8:	80 91 bb 02 	lds	r24, 0x02BB
    11fc:	8c 30       	cpi	r24, 0x0C	; 12
    11fe:	10 f0       	brcs	.+4      	; 0x1204 <__vector_30+0xc0>
			phase = 0;
    1200:	10 92 ba 02 	sts	0x02BA, r1
				SensorTimerCount = 0;
				LedArray[SENSOR_LED_NO] = LED_ON;
				wdt_reset();
			#endif
		}
		count++;
    1204:	80 91 bb 02 	lds	r24, 0x02BB
    1208:	8f 5f       	subi	r24, 0xFF	; 255
    120a:	80 93 bb 02 	sts	0x02BB, r24
	}
	
	if(StartCodeCheck){
    120e:	80 91 c7 02 	lds	r24, 0x02C7
    1212:	88 23       	and	r24, r24
    1214:	71 f0       	breq	.+28     	; 0x1232 <__vector_30+0xee>
		if(val == '$'){
    1216:	80 91 b9 02 	lds	r24, 0x02B9
    121a:	84 32       	cpi	r24, 0x24	; 36
    121c:	89 f4       	brne	.+34     	; 0x1240 <__vector_30+0xfc>
			StartCodeCheck = false;
    121e:	10 92 c7 02 	sts	0x02C7, r1
			phase = 1;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	80 93 ba 02 	sts	0x02BA, r24
			count = 0;
    1228:	10 92 bb 02 	sts	0x02BB, r1
			LineStatus = DATA_IN_LINE;
    122c:	10 92 64 01 	sts	0x0164, r1
    1230:	07 c0       	rjmp	.+14     	; 0x1240 <__vector_30+0xfc>
		}
	}
	else{
		if(val == '%'){
    1232:	80 91 b9 02 	lds	r24, 0x02B9
    1236:	85 32       	cpi	r24, 0x25	; 37
    1238:	19 f4       	brne	.+6      	; 0x1240 <__vector_30+0xfc>
			StartCodeCheck = true;
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	80 93 c7 02 	sts	0x02C7, r24
		}
	}
	
	if(EndCodeCheck){
    1240:	80 91 c8 02 	lds	r24, 0x02C8
    1244:	88 23       	and	r24, r24
    1246:	51 f0       	breq	.+20     	; 0x125c <__vector_30+0x118>
		if(val == '\n'){
    1248:	80 91 b9 02 	lds	r24, 0x02B9
    124c:	8a 30       	cpi	r24, 0x0A	; 10
    124e:	69 f4       	brne	.+26     	; 0x126a <__vector_30+0x126>
			EndCodeCheck = false;
    1250:	10 92 c8 02 	sts	0x02C8, r1
			LineStatus = NO_DATA_IN_LINE;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	80 93 64 01 	sts	0x0164, r24
    125a:	07 c0       	rjmp	.+14     	; 0x126a <__vector_30+0x126>
				}
			#endif
		}
	}
	else {
		if(val == '\r'){
    125c:	80 91 b9 02 	lds	r24, 0x02B9
    1260:	8d 30       	cpi	r24, 0x0D	; 13
    1262:	19 f4       	brne	.+6      	; 0x126a <__vector_30+0x126>
			EndCodeCheck = true;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	80 93 c8 02 	sts	0x02C8, r24
		}
	}
}
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	ff 91       	pop	r31
    1270:	ef 91       	pop	r30
    1272:	9f 91       	pop	r25
    1274:	8f 91       	pop	r24
    1276:	2f 91       	pop	r18
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	0f 90       	pop	r0
    127e:	1f 90       	pop	r1
    1280:	18 95       	reti

00001282 <__vector_31>:

ISR(USART1_UDRE_vect){
    1282:	1f 92       	push	r1
    1284:	0f 92       	push	r0
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	0f 92       	push	r0
    128a:	11 24       	eor	r1, r1
    128c:	2f 93       	push	r18
    128e:	3f 93       	push	r19
    1290:	4f 93       	push	r20
    1292:	5f 93       	push	r21
    1294:	6f 93       	push	r22
    1296:	7f 93       	push	r23
    1298:	8f 93       	push	r24
    129a:	9f 93       	push	r25
    129c:	af 93       	push	r26
    129e:	bf 93       	push	r27
    12a0:	ef 93       	push	r30
    12a2:	ff 93       	push	r31
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	0f 92       	push	r0
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
	unsigned char c;
	static uint16_t i;
	
	if(LineStatus == NO_DATA_IN_LINE){
    12ae:	80 91 64 01 	lds	r24, 0x0164
    12b2:	88 23       	and	r24, r24
    12b4:	99 f0       	breq	.+38     	; 0x12dc <__vector_31+0x5a>
		#if defined(USE_SENSOR_HUB)
		if(SensorDataReceived){
		#endif
			if(RingPutChar(&c, &RingBuffer)){
    12b6:	29 ec       	ldi	r18, 0xC9	; 201
    12b8:	32 e0       	ldi	r19, 0x02	; 2
    12ba:	ce 01       	movw	r24, r28
    12bc:	01 96       	adiw	r24, 0x01	; 1
    12be:	b9 01       	movw	r22, r18
    12c0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <RingPutChar>
    12c4:	88 23       	and	r24, r24
    12c6:	49 f0       	breq	.+18     	; 0x12da <__vector_31+0x58>
				RS485_Select(RS485_SE);
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	0e 94 87 04 	call	0x90e	; 0x90e <RS485_Select>
				UDR1 = c;
    12ce:	8c e9       	ldi	r24, 0x9C	; 156
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	29 81       	ldd	r18, Y+1	; 0x01
    12d4:	fc 01       	movw	r30, r24
    12d6:	20 83       	st	Z, r18
    12d8:	0a c0       	rjmp	.+20     	; 0x12ee <__vector_31+0x6c>
				#ifndef SIMULATION_MODE
					for(i=0; i<250; i++);
				#endif
			}
			else{
				goto Error;
    12da:	00 00       	nop
		}
		#endif
	}	
	else{
Error:
		stop_uart1tx_interrupt();
    12dc:	8a e9       	ldi	r24, 0x9A	; 154
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	2a e9       	ldi	r18, 0x9A	; 154
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	f9 01       	movw	r30, r18
    12e6:	20 81       	ld	r18, Z
    12e8:	2f 7d       	andi	r18, 0xDF	; 223
    12ea:	fc 01       	movw	r30, r24
    12ec:	20 83       	st	Z, r18
	}
}
    12ee:	0f 90       	pop	r0
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	ff 91       	pop	r31
    12f6:	ef 91       	pop	r30
    12f8:	bf 91       	pop	r27
    12fa:	af 91       	pop	r26
    12fc:	9f 91       	pop	r25
    12fe:	8f 91       	pop	r24
    1300:	7f 91       	pop	r23
    1302:	6f 91       	pop	r22
    1304:	5f 91       	pop	r21
    1306:	4f 91       	pop	r20
    1308:	3f 91       	pop	r19
    130a:	2f 91       	pop	r18
    130c:	0f 90       	pop	r0
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	0f 90       	pop	r0
    1312:	1f 90       	pop	r1
    1314:	18 95       	reti

00001316 <__vector_32>:

ISR(USART1_TX_vect){
    1316:	1f 92       	push	r1
    1318:	0f 92       	push	r0
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	0f 92       	push	r0
    131e:	11 24       	eor	r1, r1
    1320:	2f 93       	push	r18
    1322:	3f 93       	push	r19
    1324:	4f 93       	push	r20
    1326:	5f 93       	push	r21
    1328:	6f 93       	push	r22
    132a:	7f 93       	push	r23
    132c:	8f 93       	push	r24
    132e:	9f 93       	push	r25
    1330:	af 93       	push	r26
    1332:	bf 93       	push	r27
    1334:	ef 93       	push	r30
    1336:	ff 93       	push	r31
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
	RS485_Select(RS485_RE);
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	0e 94 87 04 	call	0x90e	; 0x90e <RS485_Select>
	start_uart1tx_interrupt();
    1346:	8a e9       	ldi	r24, 0x9A	; 154
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	2a e9       	ldi	r18, 0x9A	; 154
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	f9 01       	movw	r30, r18
    1350:	20 81       	ld	r18, Z
    1352:	20 62       	ori	r18, 0x20	; 32
    1354:	fc 01       	movw	r30, r24
    1356:	20 83       	st	Z, r18
}
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	ff 91       	pop	r31
    135e:	ef 91       	pop	r30
    1360:	bf 91       	pop	r27
    1362:	af 91       	pop	r26
    1364:	9f 91       	pop	r25
    1366:	8f 91       	pop	r24
    1368:	7f 91       	pop	r23
    136a:	6f 91       	pop	r22
    136c:	5f 91       	pop	r21
    136e:	4f 91       	pop	r20
    1370:	3f 91       	pop	r19
    1372:	2f 91       	pop	r18
    1374:	0f 90       	pop	r0
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	0f 90       	pop	r0
    137a:	1f 90       	pop	r1
    137c:	18 95       	reti

0000137e <UartSetup>:

void (*UartInitialize[4])(uint8_t option, uint16_t baudrate);
void (*UartSend[4])(uint8_t sendData);
void (*UartReceive[4])(uint8_t* receiveData);

void UartSetup(void) {
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
	#if (defined(UDR0) || defined(UDR))
		UartInitialize[0] = UartInitialize0;
    1386:	8a ee       	ldi	r24, 0xEA	; 234
    1388:	99 e0       	ldi	r25, 0x09	; 9
    138a:	90 93 e1 04 	sts	0x04E1, r25
    138e:	80 93 e0 04 	sts	0x04E0, r24
		UartSend[0] = UartSend0;
    1392:	80 ea       	ldi	r24, 0xA0	; 160
    1394:	9a e0       	ldi	r25, 0x0A	; 10
    1396:	90 93 d1 04 	sts	0x04D1, r25
    139a:	80 93 d0 04 	sts	0x04D0, r24
		UartReceive[0] = UartReceive0;
    139e:	89 ee       	ldi	r24, 0xE9	; 233
    13a0:	9a e0       	ldi	r25, 0x0A	; 10
    13a2:	90 93 d9 04 	sts	0x04D9, r25
    13a6:	80 93 d8 04 	sts	0x04D8, r24
	#endif
	#if defined(UDR1)
		UartInitialize[1] = UartInitialize1;
    13aa:	88 e3       	ldi	r24, 0x38	; 56
    13ac:	9a e0       	ldi	r25, 0x0A	; 10
    13ae:	90 93 e3 04 	sts	0x04E3, r25
    13b2:	80 93 e2 04 	sts	0x04E2, r24
		UartSend[1] = UartSend1;
    13b6:	8b ec       	ldi	r24, 0xCB	; 203
    13b8:	9a e0       	ldi	r25, 0x0A	; 10
    13ba:	90 93 d3 04 	sts	0x04D3, r25
    13be:	80 93 d2 04 	sts	0x04D2, r24
		UartReceive[1] = UartReceive1;
    13c2:	8c e0       	ldi	r24, 0x0C	; 12
    13c4:	9b e0       	ldi	r25, 0x0B	; 11
    13c6:	90 93 db 04 	sts	0x04DB, r25
    13ca:	80 93 da 04 	sts	0x04DA, r24
	#if defined(UDR3)
		UartInitialize[3] = UartInitialize3;
		UartSend[3] = UartSend3;
		UartReceive[3] = UartReceive3;
	#endif
}
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <UartInitialize0>:

#if (defined(UDR0) || defined(UDR))
static void UartInitialize0(uint8_t option, uint16_t baudrate) {
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	00 d0       	rcall	.+0      	; 0x13da <UartInitialize0+0x6>
    13da:	0f 92       	push	r0
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	7b 83       	std	Y+3, r23	; 0x03
    13e4:	6a 83       	std	Y+2, r22	; 0x02
	#ifndef SIMULATION_MODE
		uint16_t loop;
	#endif
	
	sbi(*USART.U0.UCASRA, U2X0_BIT);
    13e6:	80 91 d3 05 	lds	r24, 0x05D3
    13ea:	90 91 d4 05 	lds	r25, 0x05D4
    13ee:	20 91 d3 05 	lds	r18, 0x05D3
    13f2:	30 91 d4 05 	lds	r19, 0x05D4
    13f6:	f9 01       	movw	r30, r18
    13f8:	20 81       	ld	r18, Z
    13fa:	22 60       	ori	r18, 0x02	; 2
    13fc:	fc 01       	movw	r30, r24
    13fe:	20 83       	st	Z, r18
	
	*USART.U0.UCASRB = 0x00;
    1400:	80 91 d5 05 	lds	r24, 0x05D5
    1404:	90 91 d6 05 	lds	r25, 0x05D6
    1408:	fc 01       	movw	r30, r24
    140a:	10 82       	st	Z, r1
	*USART.U0.UCASRC = (1<<UCSZ01_BIT) | (1<<UCSZ00_BIT);
    140c:	80 91 d7 05 	lds	r24, 0x05D7
    1410:	90 91 d8 05 	lds	r25, 0x05D8
    1414:	26 e0       	ldi	r18, 0x06	; 6
    1416:	fc 01       	movw	r30, r24
    1418:	20 83       	st	Z, r18

	#ifndef SIMULATION_MODE
		for(loop=0; loop<5000; loop++);
	#endif
	
	*USART.U0.UCASRA &= 0xE3;
    141a:	80 91 d3 05 	lds	r24, 0x05D3
    141e:	90 91 d4 05 	lds	r25, 0x05D4
    1422:	20 91 d3 05 	lds	r18, 0x05D3
    1426:	30 91 d4 05 	lds	r19, 0x05D4
    142a:	f9 01       	movw	r30, r18
    142c:	20 81       	ld	r18, Z
    142e:	23 7e       	andi	r18, 0xE3	; 227
    1430:	fc 01       	movw	r30, r24
    1432:	20 83       	st	Z, r18
	*USART.U0.UCASRB = option;
    1434:	80 91 d5 05 	lds	r24, 0x05D5
    1438:	90 91 d6 05 	lds	r25, 0x05D6
    143c:	29 81       	ldd	r18, Y+1	; 0x01
    143e:	fc 01       	movw	r30, r24
    1440:	20 83       	st	Z, r18
	
	*USART.U0.UBRREGH = (uint8_t)(baudrate>>8);
    1442:	80 91 db 05 	lds	r24, 0x05DB
    1446:	90 91 dc 05 	lds	r25, 0x05DC
    144a:	2a 81       	ldd	r18, Y+2	; 0x02
    144c:	3b 81       	ldd	r19, Y+3	; 0x03
    144e:	23 2f       	mov	r18, r19
    1450:	33 27       	eor	r19, r19
    1452:	fc 01       	movw	r30, r24
    1454:	20 83       	st	Z, r18
	*USART.U0.UBRREGL = (uint8_t)(baudrate);
    1456:	80 91 dd 05 	lds	r24, 0x05DD
    145a:	90 91 de 05 	lds	r25, 0x05DE
    145e:	2a 81       	ldd	r18, Y+2	; 0x02
    1460:	fc 01       	movw	r30, r24
    1462:	20 83       	st	Z, r18
}
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	08 95       	ret

00001470 <UartInitialize1>:
#endif

#if defined(UDR1)
static void UartInitialize1(uint8_t option, uint16_t baudrate) {
    1470:	df 93       	push	r29
    1472:	cf 93       	push	r28
    1474:	00 d0       	rcall	.+0      	; 0x1476 <UartInitialize1+0x6>
    1476:	0f 92       	push	r0
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	7b 83       	std	Y+3, r23	; 0x03
    1480:	6a 83       	std	Y+2, r22	; 0x02
	#ifndef SIMULATION_MODE
		uint16_t loop;
	#endif
	
	sbi(*USART.U1.UCASRA, U2X1_BIT);
    1482:	80 91 df 05 	lds	r24, 0x05DF
    1486:	90 91 e0 05 	lds	r25, 0x05E0
    148a:	20 91 df 05 	lds	r18, 0x05DF
    148e:	30 91 e0 05 	lds	r19, 0x05E0
    1492:	f9 01       	movw	r30, r18
    1494:	20 81       	ld	r18, Z
    1496:	22 60       	ori	r18, 0x02	; 2
    1498:	fc 01       	movw	r30, r24
    149a:	20 83       	st	Z, r18
	
	*USART.U1.UCASRB = 0x00;
    149c:	80 91 e1 05 	lds	r24, 0x05E1
    14a0:	90 91 e2 05 	lds	r25, 0x05E2
    14a4:	fc 01       	movw	r30, r24
    14a6:	10 82       	st	Z, r1
	*USART.U1.UCASRC = (1<<UCSZ11_BIT) | (1<<UCSZ10_BIT);
    14a8:	80 91 e3 05 	lds	r24, 0x05E3
    14ac:	90 91 e4 05 	lds	r25, 0x05E4
    14b0:	26 e0       	ldi	r18, 0x06	; 6
    14b2:	fc 01       	movw	r30, r24
    14b4:	20 83       	st	Z, r18

	#ifndef SIMULATION_MODE
		for(loop=0; loop<5000; loop++);
	#endif
	
	cbi(*USART.U1.UCASRA, FE1_BIT);
    14b6:	80 91 df 05 	lds	r24, 0x05DF
    14ba:	90 91 e0 05 	lds	r25, 0x05E0
    14be:	20 91 df 05 	lds	r18, 0x05DF
    14c2:	30 91 e0 05 	lds	r19, 0x05E0
    14c6:	f9 01       	movw	r30, r18
    14c8:	20 81       	ld	r18, Z
    14ca:	2f 7e       	andi	r18, 0xEF	; 239
    14cc:	fc 01       	movw	r30, r24
    14ce:	20 83       	st	Z, r18
	cbi(*USART.U1.UCASRA, DOR1_BIT);
    14d0:	80 91 df 05 	lds	r24, 0x05DF
    14d4:	90 91 e0 05 	lds	r25, 0x05E0
    14d8:	20 91 df 05 	lds	r18, 0x05DF
    14dc:	30 91 e0 05 	lds	r19, 0x05E0
    14e0:	f9 01       	movw	r30, r18
    14e2:	20 81       	ld	r18, Z
    14e4:	27 7f       	andi	r18, 0xF7	; 247
    14e6:	fc 01       	movw	r30, r24
    14e8:	20 83       	st	Z, r18
	cbi(*USART.U1.UCASRA, UPE1_BIT);
    14ea:	80 91 df 05 	lds	r24, 0x05DF
    14ee:	90 91 e0 05 	lds	r25, 0x05E0
    14f2:	20 91 df 05 	lds	r18, 0x05DF
    14f6:	30 91 e0 05 	lds	r19, 0x05E0
    14fa:	f9 01       	movw	r30, r18
    14fc:	20 81       	ld	r18, Z
    14fe:	2b 7f       	andi	r18, 0xFB	; 251
    1500:	fc 01       	movw	r30, r24
    1502:	20 83       	st	Z, r18
	*USART.U1.UCASRB = option;
    1504:	80 91 e1 05 	lds	r24, 0x05E1
    1508:	90 91 e2 05 	lds	r25, 0x05E2
    150c:	29 81       	ldd	r18, Y+1	; 0x01
    150e:	fc 01       	movw	r30, r24
    1510:	20 83       	st	Z, r18
	
	*USART.U1.UBRREGH = (uint8_t)(baudrate>>8);
    1512:	80 91 e7 05 	lds	r24, 0x05E7
    1516:	90 91 e8 05 	lds	r25, 0x05E8
    151a:	2a 81       	ldd	r18, Y+2	; 0x02
    151c:	3b 81       	ldd	r19, Y+3	; 0x03
    151e:	23 2f       	mov	r18, r19
    1520:	33 27       	eor	r19, r19
    1522:	fc 01       	movw	r30, r24
    1524:	20 83       	st	Z, r18
	*USART.U1.UBRREGL = (uint8_t)(baudrate);
    1526:	80 91 e9 05 	lds	r24, 0x05E9
    152a:	90 91 ea 05 	lds	r25, 0x05EA
    152e:	2a 81       	ldd	r18, Y+2	; 0x02
    1530:	fc 01       	movw	r30, r24
    1532:	20 83       	st	Z, r18
}
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <UartSend0>:
	*USART.U3.UBRREGL = (uint8_t)(baudrate);
}
#endif

#if (defined(UDR0) || defined(UDR))
static void UartSend0(uint8_t sendData) {
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	0f 92       	push	r0
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	89 83       	std	Y+1, r24	; 0x01
	#ifndef SIMULATION_MODE
		uint16_t loop;
	#endif

	while( !bit_is_set(*USART.U0.UCASRA, UDRE0_BIT) );
    154c:	00 00       	nop
    154e:	80 91 d3 05 	lds	r24, 0x05D3
    1552:	90 91 d4 05 	lds	r25, 0x05D4
    1556:	fc 01       	movw	r30, r24
    1558:	80 81       	ld	r24, Z
    155a:	88 2f       	mov	r24, r24
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	80 72       	andi	r24, 0x20	; 32
    1560:	90 70       	andi	r25, 0x00	; 0
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	a1 f3       	breq	.-24     	; 0x154e <UartSend0+0xe>
	*USART.U0.UDREG = sendData;
    1566:	80 91 d9 05 	lds	r24, 0x05D9
    156a:	90 91 da 05 	lds	r25, 0x05DA
    156e:	29 81       	ldd	r18, Y+1	; 0x01
    1570:	fc 01       	movw	r30, r24
    1572:	20 83       	st	Z, r18
	cbi(*USART.U0.UCASRA, UDRE0_BIT);
    1574:	80 91 d3 05 	lds	r24, 0x05D3
    1578:	90 91 d4 05 	lds	r25, 0x05D4
    157c:	20 91 d3 05 	lds	r18, 0x05D3
    1580:	30 91 d4 05 	lds	r19, 0x05D4
    1584:	f9 01       	movw	r30, r18
    1586:	20 81       	ld	r18, Z
    1588:	2f 7d       	andi	r18, 0xDF	; 223
    158a:	fc 01       	movw	r30, r24
    158c:	20 83       	st	Z, r18

	#ifndef SIMULATION_MODE
		for(loop=0; loop<1000; loop++);
	#endif
}
    158e:	0f 90       	pop	r0
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <UartSend1>:
#endif

#if defined(UDR1)
static void UartSend1(uint8_t sendData) {
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	0f 92       	push	r0
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
    15a0:	89 83       	std	Y+1, r24	; 0x01
	#endif

	#ifndef SIMULATION_MODE
		while( !bit_is_set(*USART.U1.UCASRA, UDRE1_BIT) );
	#endif
	*USART.U1.UDREG = sendData;
    15a2:	80 91 e5 05 	lds	r24, 0x05E5
    15a6:	90 91 e6 05 	lds	r25, 0x05E6
    15aa:	29 81       	ldd	r18, Y+1	; 0x01
    15ac:	fc 01       	movw	r30, r24
    15ae:	20 83       	st	Z, r18
	cbi(*USART.U1.UCASRA, UDRE1_BIT);
    15b0:	80 91 df 05 	lds	r24, 0x05DF
    15b4:	90 91 e0 05 	lds	r25, 0x05E0
    15b8:	20 91 df 05 	lds	r18, 0x05DF
    15bc:	30 91 e0 05 	lds	r19, 0x05E0
    15c0:	f9 01       	movw	r30, r18
    15c2:	20 81       	ld	r18, Z
    15c4:	2f 7d       	andi	r18, 0xDF	; 223
    15c6:	fc 01       	movw	r30, r24
    15c8:	20 83       	st	Z, r18

	#ifndef SIMULATION_MODE
		for(loop=0; loop<1000; loop++);
	#endif
}
    15ca:	0f 90       	pop	r0
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <UartReceive0>:
	#endif
}
#endif

#if (defined(UDR0) || defined(UDR))
static void UartReceive0(uint8_t* receiveData) {
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <UartReceive0+0x6>
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	9a 83       	std	Y+2, r25	; 0x02
    15de:	89 83       	std	Y+1, r24	; 0x01
	#endif
	
	#ifndef SIMULATION_MODE
		while( !bit_is_set(*USART.U0.UCASRA, RXC0_BIT));
	#endif
	cbi(*USART.U0.UCASRA, RXC0_BIT);
    15e0:	80 91 d3 05 	lds	r24, 0x05D3
    15e4:	90 91 d4 05 	lds	r25, 0x05D4
    15e8:	20 91 d3 05 	lds	r18, 0x05D3
    15ec:	30 91 d4 05 	lds	r19, 0x05D4
    15f0:	f9 01       	movw	r30, r18
    15f2:	20 81       	ld	r18, Z
    15f4:	2f 77       	andi	r18, 0x7F	; 127
    15f6:	fc 01       	movw	r30, r24
    15f8:	20 83       	st	Z, r18
	*receiveData = *USART.U0.UDREG;	
    15fa:	80 91 d9 05 	lds	r24, 0x05D9
    15fe:	90 91 da 05 	lds	r25, 0x05DA
    1602:	fc 01       	movw	r30, r24
    1604:	20 81       	ld	r18, Z
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	9a 81       	ldd	r25, Y+2	; 0x02
    160a:	fc 01       	movw	r30, r24
    160c:	20 83       	st	Z, r18
	
	#ifndef SIMULATION_MODE
		for(loop=0; loop<1000; loop++);
	#endif
}
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <UartReceive1>:
#endif

#if defined(UDR1)
static void UartReceive1(uint8_t* receiveData) {
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	00 d0       	rcall	.+0      	; 0x161e <UartReceive1+0x6>
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	9a 83       	std	Y+2, r25	; 0x02
    1624:	89 83       	std	Y+1, r24	; 0x01
	#endif
	
	#ifndef SIMULATION_MODE
		while( !bit_is_set(*USART.U1.UCASRA, RXC1_BIT));
	#endif
	cbi(*USART.U1.UCASRA, RXC1_BIT);
    1626:	80 91 df 05 	lds	r24, 0x05DF
    162a:	90 91 e0 05 	lds	r25, 0x05E0
    162e:	20 91 df 05 	lds	r18, 0x05DF
    1632:	30 91 e0 05 	lds	r19, 0x05E0
    1636:	f9 01       	movw	r30, r18
    1638:	20 81       	ld	r18, Z
    163a:	2f 77       	andi	r18, 0x7F	; 127
    163c:	fc 01       	movw	r30, r24
    163e:	20 83       	st	Z, r18
	*receiveData = *USART.U1.UDREG;
    1640:	80 91 e5 05 	lds	r24, 0x05E5
    1644:	90 91 e6 05 	lds	r25, 0x05E6
    1648:	fc 01       	movw	r30, r24
    164a:	20 81       	ld	r18, Z
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	9a 81       	ldd	r25, Y+2	; 0x02
    1650:	fc 01       	movw	r30, r24
    1652:	20 83       	st	Z, r18

	#ifndef SIMULATION_MODE
		for(loop=0; loop<1000; loop++);
	#endif
}
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <EncoderSetup>:

#if defined(USE_TIMER)
	void (*EncoderTimerInitialize[6])(void);
#endif

void EncoderSetup(void) {
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
	#if (defined(ICIE1_BIT) && defined(USE_TIMER))
		EncoderTimerInitialize[1] = EncoderTimerInitialize0;
    1666:	80 e1       	ldi	r24, 0x10	; 16
    1668:	9c e0       	ldi	r25, 0x0C	; 12
    166a:	90 93 eb 04 	sts	0x04EB, r25
    166e:	80 93 ea 04 	sts	0x04EA, r24
	#endif
	#if (defined(ICIE3_BIT) && defined(USE_TIMER))
		EncoderTimerInitialize[3] = EncoderTimerInitialize1;
    1672:	81 e3       	ldi	r24, 0x31	; 49
    1674:	9c e0       	ldi	r25, 0x0C	; 12
    1676:	90 93 ef 04 	sts	0x04EF, r25
    167a:	80 93 ee 04 	sts	0x04EE, r24
		EncoderTimerInitialize[4] = EncoderTimerInitialize2;
	#endif
	#if (defined(ICIE5_BIT) && defined(USE_TIMER))
		EncoderTimerInitialize[5] = EncoderTimerInitialize3;
	#endif
}
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <EncoderInitialize>:

void EncoderInitialize(void) {
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	0f 92       	push	r0
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
	uint8_t loop;
	
	#if defined(USE_ENCODER0)
		cbi(*ENCODER_0_PORT.DDR, ENCODER_0_BIT);
    168e:	80 91 bb 05 	lds	r24, 0x05BB
    1692:	90 91 bc 05 	lds	r25, 0x05BC
    1696:	20 91 bb 05 	lds	r18, 0x05BB
    169a:	30 91 bc 05 	lds	r19, 0x05BC
    169e:	f9 01       	movw	r30, r18
    16a0:	20 81       	ld	r18, Z
    16a2:	2e 7f       	andi	r18, 0xFE	; 254
    16a4:	fc 01       	movw	r30, r24
    16a6:	20 83       	st	Z, r18
		#if (ENCODER0_MODE == 'T')
			EncoderTimerInitialize[ENCODER0_FUNC_NO]();
		#elif (ENCODER0_MODE == 'E')
			sbi(*ENCODER_0_PORT.PORT, ENCODER_0_BIT);
    16a8:	80 91 bd 05 	lds	r24, 0x05BD
    16ac:	90 91 be 05 	lds	r25, 0x05BE
    16b0:	20 91 bd 05 	lds	r18, 0x05BD
    16b4:	30 91 be 05 	lds	r19, 0x05BE
    16b8:	f9 01       	movw	r30, r18
    16ba:	20 81       	ld	r18, Z
    16bc:	21 60       	ori	r18, 0x01	; 1
    16be:	fc 01       	movw	r30, r24
    16c0:	20 83       	st	Z, r18
			ExintInitialize[ENCODER0_FUNC_NO]();
    16c2:	80 91 00 05 	lds	r24, 0x0500
    16c6:	90 91 01 05 	lds	r25, 0x0501
    16ca:	fc 01       	movw	r30, r24
    16cc:	09 95       	icall
		#endif
	#endif
	
	#if defined(USE_ENCODER1)
		cbi(*ENCODER_1_PORT.DDR, ENCODER_1_BIT);
    16ce:	80 91 bb 05 	lds	r24, 0x05BB
    16d2:	90 91 bc 05 	lds	r25, 0x05BC
    16d6:	20 91 bb 05 	lds	r18, 0x05BB
    16da:	30 91 bc 05 	lds	r19, 0x05BC
    16de:	f9 01       	movw	r30, r18
    16e0:	20 81       	ld	r18, Z
    16e2:	2d 7f       	andi	r18, 0xFD	; 253
    16e4:	fc 01       	movw	r30, r24
    16e6:	20 83       	st	Z, r18
		#if (ENCODER1_MODE == 'T')
			EncoderTimerInitialize[ENCODER1_FUNC_NO]();
		#elif (ENCODER1_MODE == 'E')
			sbi(*ENCODER_1_PORT.PORT, ENCODER_1_BIT);
    16e8:	80 91 bd 05 	lds	r24, 0x05BD
    16ec:	90 91 be 05 	lds	r25, 0x05BE
    16f0:	20 91 bd 05 	lds	r18, 0x05BD
    16f4:	30 91 be 05 	lds	r19, 0x05BE
    16f8:	f9 01       	movw	r30, r18
    16fa:	20 81       	ld	r18, Z
    16fc:	22 60       	ori	r18, 0x02	; 2
    16fe:	fc 01       	movw	r30, r24
    1700:	20 83       	st	Z, r18
			ExintInitialize[ENCODER1_FUNC_NO]();
    1702:	80 91 02 05 	lds	r24, 0x0502
    1706:	90 91 03 05 	lds	r25, 0x0503
    170a:	fc 01       	movw	r30, r24
    170c:	09 95       	icall
		#endif
	#endif

	#if defined(USE_ENCODER2)
		cbi(*ENCODER_2_PORT.DDR, ENCODER_2_BIT);
    170e:	80 91 c1 05 	lds	r24, 0x05C1
    1712:	90 91 c2 05 	lds	r25, 0x05C2
    1716:	20 91 c1 05 	lds	r18, 0x05C1
    171a:	30 91 c2 05 	lds	r19, 0x05C2
    171e:	f9 01       	movw	r30, r18
    1720:	20 81       	ld	r18, Z
    1722:	2f 7e       	andi	r18, 0xEF	; 239
    1724:	fc 01       	movw	r30, r24
    1726:	20 83       	st	Z, r18
		#if (ENCODER2_MODE == 'T')
			sbi(*ENCODER_2_PORT.PORT, ENCODER_2_BIT);
			EncoderTimerInitialize[ENCODER2_FUNC_NO]();
		#elif (ENCODER2_MODE == 'E')
			ExintInitialize[ENCODER2_FUNC_NO]();
    1728:	80 91 08 05 	lds	r24, 0x0508
    172c:	90 91 09 05 	lds	r25, 0x0509
    1730:	fc 01       	movw	r30, r24
    1732:	09 95       	icall
		#endif
	#endif

	#if defined(USE_ENCODER3)
		cbi(*ENCODER_3_PORT.DDR, ENCODER_3_BIT);
    1734:	80 91 c1 05 	lds	r24, 0x05C1
    1738:	90 91 c2 05 	lds	r25, 0x05C2
    173c:	20 91 c1 05 	lds	r18, 0x05C1
    1740:	30 91 c2 05 	lds	r19, 0x05C2
    1744:	f9 01       	movw	r30, r18
    1746:	20 81       	ld	r18, Z
    1748:	2f 7d       	andi	r18, 0xDF	; 223
    174a:	fc 01       	movw	r30, r24
    174c:	20 83       	st	Z, r18
		#if (ENCODER3_MODE == 'T')
			EncoderTimerInitialize[ENCODER3_FUNC_NO]();
		#elif (ENCODER3_MODE == 'E')
			sbi(*ENCODER_3_PORT.PORT, ENCODER_3_BIT);
    174e:	80 91 c3 05 	lds	r24, 0x05C3
    1752:	90 91 c4 05 	lds	r25, 0x05C4
    1756:	20 91 c3 05 	lds	r18, 0x05C3
    175a:	30 91 c4 05 	lds	r19, 0x05C4
    175e:	f9 01       	movw	r30, r18
    1760:	20 81       	ld	r18, Z
    1762:	20 62       	ori	r18, 0x20	; 32
    1764:	fc 01       	movw	r30, r24
    1766:	20 83       	st	Z, r18
			ExintInitialize[ENCODER3_FUNC_NO]();
    1768:	80 91 0a 05 	lds	r24, 0x050A
    176c:	90 91 0b 05 	lds	r25, 0x050B
    1770:	fc 01       	movw	r30, r24
    1772:	09 95       	icall
		#endif
	#endif

	#if defined(USE_ENCODER4)
		cbi(*ENCODER_4_PORT.DDR, ENCODER_4_BIT);
    1774:	80 91 c1 05 	lds	r24, 0x05C1
    1778:	90 91 c2 05 	lds	r25, 0x05C2
    177c:	20 91 c1 05 	lds	r18, 0x05C1
    1780:	30 91 c2 05 	lds	r19, 0x05C2
    1784:	f9 01       	movw	r30, r18
    1786:	20 81       	ld	r18, Z
    1788:	2f 7b       	andi	r18, 0xBF	; 191
    178a:	fc 01       	movw	r30, r24
    178c:	20 83       	st	Z, r18
		#if (ENCODER4_MODE == 'T')
			EncoderTimerInitialize[ENCODER4_FUNC_NO]();
		#elif (ENCODER4_MODE == 'E')
			sbi(*ENCODER_4_PORT.PORT, ENCODER_4_BIT);
    178e:	80 91 c3 05 	lds	r24, 0x05C3
    1792:	90 91 c4 05 	lds	r25, 0x05C4
    1796:	20 91 c3 05 	lds	r18, 0x05C3
    179a:	30 91 c4 05 	lds	r19, 0x05C4
    179e:	f9 01       	movw	r30, r18
    17a0:	20 81       	ld	r18, Z
    17a2:	20 64       	ori	r18, 0x40	; 64
    17a4:	fc 01       	movw	r30, r24
    17a6:	20 83       	st	Z, r18
			ExintInitialize[ENCODER4_FUNC_NO]();
    17a8:	80 91 0c 05 	lds	r24, 0x050C
    17ac:	90 91 0d 05 	lds	r25, 0x050D
    17b0:	fc 01       	movw	r30, r24
    17b2:	09 95       	icall
		#endif
	#endif

	#if defined(USE_ENCODER5)
		cbi(*ENCODER_5_PORT.DDR, ENCODER_5_BIT);
    17b4:	80 91 c1 05 	lds	r24, 0x05C1
    17b8:	90 91 c2 05 	lds	r25, 0x05C2
    17bc:	20 91 c1 05 	lds	r18, 0x05C1
    17c0:	30 91 c2 05 	lds	r19, 0x05C2
    17c4:	f9 01       	movw	r30, r18
    17c6:	20 81       	ld	r18, Z
    17c8:	2f 77       	andi	r18, 0x7F	; 127
    17ca:	fc 01       	movw	r30, r24
    17cc:	20 83       	st	Z, r18
		#if (ENCODER5_MODE == 'T')
			EncoderTimerInitialize[ENCODER5_FUNC_NO]();
		#elif (ENCODER5_MODE == 'E')
			sbi(*ENCODER_5_PORT.PORT, ENCODER_5_BIT);
    17ce:	80 91 c3 05 	lds	r24, 0x05C3
    17d2:	90 91 c4 05 	lds	r25, 0x05C4
    17d6:	20 91 c3 05 	lds	r18, 0x05C3
    17da:	30 91 c4 05 	lds	r19, 0x05C4
    17de:	f9 01       	movw	r30, r18
    17e0:	20 81       	ld	r18, Z
    17e2:	20 68       	ori	r18, 0x80	; 128
    17e4:	fc 01       	movw	r30, r24
    17e6:	20 83       	st	Z, r18
			ExintInitialize[ENCODER5_FUNC_NO]();
    17e8:	80 91 0e 05 	lds	r24, 0x050E
    17ec:	90 91 0f 05 	lds	r25, 0x050F
    17f0:	fc 01       	movw	r30, r24
    17f2:	09 95       	icall
			sbi(*ENCODER_12_PORT.PORT, ENCODER_12_BIT);
			ExintInitialize[ENCODER12_FUNC_NO]();
		#endif
	#endif
	
	for(loop=0; loop<USING_ENCODER; loop++) {
    17f4:	19 82       	std	Y+1, r1	; 0x01
    17f6:	0d c0       	rjmp	.+26     	; 0x1812 <EncoderInitialize+0x18e>
		EncoderArray[loop] = 0;
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	88 2f       	mov	r24, r24
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	8c 50       	subi	r24, 0x0C	; 12
    1804:	9b 4f       	sbci	r25, 0xFB	; 251
    1806:	fc 01       	movw	r30, r24
    1808:	11 82       	std	Z+1, r1	; 0x01
    180a:	10 82       	st	Z, r1
			sbi(*ENCODER_12_PORT.PORT, ENCODER_12_BIT);
			ExintInitialize[ENCODER12_FUNC_NO]();
		#endif
	#endif
	
	for(loop=0; loop<USING_ENCODER; loop++) {
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	8f 5f       	subi	r24, 0xFF	; 255
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	86 30       	cpi	r24, 0x06	; 6
    1816:	80 f3       	brcs	.-32     	; 0x17f8 <EncoderInitialize+0x174>
		EncoderArray[loop] = 0;
	}
}
    1818:	0f 90       	pop	r0
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <EncoderTimerInitialize0>:

#if defined(USE_TIMER1)
static void EncoderTimerInitialize0(void) {
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
	*TIMER.T1.TCCRB |= (1<<ICNC1_BIT) | (1<<ICES1_BIT);
    1828:	80 91 75 05 	lds	r24, 0x0575
    182c:	90 91 76 05 	lds	r25, 0x0576
    1830:	20 91 75 05 	lds	r18, 0x0575
    1834:	30 91 76 05 	lds	r19, 0x0576
    1838:	f9 01       	movw	r30, r18
    183a:	20 81       	ld	r18, Z
    183c:	20 6c       	ori	r18, 0xC0	; 192
    183e:	fc 01       	movw	r30, r24
    1840:	20 83       	st	Z, r18
	*TIMER.T1.TCIMSK |= (1<<ICIE1_BIT);
    1842:	80 91 83 05 	lds	r24, 0x0583
    1846:	90 91 84 05 	lds	r25, 0x0584
    184a:	20 91 83 05 	lds	r18, 0x0583
    184e:	30 91 84 05 	lds	r19, 0x0584
    1852:	f9 01       	movw	r30, r18
    1854:	20 81       	ld	r18, Z
    1856:	20 62       	ori	r18, 0x20	; 32
    1858:	fc 01       	movw	r30, r24
    185a:	20 83       	st	Z, r18
}
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <EncoderTimerInitialize1>:
#endif

#if defined(USE_TIMER3)
static void EncoderTimerInitialize1(void) {
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
	*TIMER.T3.TCCRB |= (1<<ICNC3_BIT) | (1<<ICES3_BIT);
    186a:	80 91 97 05 	lds	r24, 0x0597
    186e:	90 91 98 05 	lds	r25, 0x0598
    1872:	20 91 97 05 	lds	r18, 0x0597
    1876:	30 91 98 05 	lds	r19, 0x0598
    187a:	f9 01       	movw	r30, r18
    187c:	20 81       	ld	r18, Z
    187e:	20 6c       	ori	r18, 0xC0	; 192
    1880:	fc 01       	movw	r30, r24
    1882:	20 83       	st	Z, r18
	*TIMER.T3.TCIMSK |= (1<<ICIE3_BIT);
    1884:	80 91 a5 05 	lds	r24, 0x05A5
    1888:	90 91 a6 05 	lds	r25, 0x05A6
    188c:	20 91 a5 05 	lds	r18, 0x05A5
    1890:	30 91 a6 05 	lds	r19, 0x05A6
    1894:	f9 01       	movw	r30, r18
    1896:	20 81       	ld	r18, Z
    1898:	20 62       	ori	r18, 0x20	; 32
    189a:	fc 01       	movw	r30, r24
    189c:	20 83       	st	Z, r18
}
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <ClearEncoder0>:
}
#endif


#if defined(USE_ENCODER0)
void ClearEncoder0(void) {
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
	EncoderArray[0] = 0;
    18ac:	10 92 f5 04 	sts	0x04F5, r1
    18b0:	10 92 f4 04 	sts	0x04F4, r1
}
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <ClearEncoder1>:
#endif

#if defined(USE_ENCODER1)
void ClearEncoder1(void) {
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
	EncoderArray[1] = 0;
    18c2:	10 92 f7 04 	sts	0x04F7, r1
    18c6:	10 92 f6 04 	sts	0x04F6, r1
}
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <ClearEncoder2>:
#endif

#if defined(USE_ENCODER2)
void ClearEncoder2(void) {
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
	EncoderArray[2] = 0;
    18d8:	10 92 f9 04 	sts	0x04F9, r1
    18dc:	10 92 f8 04 	sts	0x04F8, r1
}
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <ClearEncoder3>:
#endif

#if defined(USE_ENCODER3)
void ClearEncoder3(void) {
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
	EncoderArray[3] = 0;
    18ee:	10 92 fb 04 	sts	0x04FB, r1
    18f2:	10 92 fa 04 	sts	0x04FA, r1
}
    18f6:	cf 91       	pop	r28
    18f8:	df 91       	pop	r29
    18fa:	08 95       	ret

000018fc <ClearEncoder4>:
#endif

#if defined(USE_ENCODER4)
void ClearEncoder4(void) {
    18fc:	df 93       	push	r29
    18fe:	cf 93       	push	r28
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
	EncoderArray[4] = 0;
    1904:	10 92 fd 04 	sts	0x04FD, r1
    1908:	10 92 fc 04 	sts	0x04FC, r1
}
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <ClearEncoder5>:
#endif

#if defined(USE_ENCODER5)
void ClearEncoder5(void) {
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
	EncoderArray[5] = 0;
    191a:	10 92 ff 04 	sts	0x04FF, r1
    191e:	10 92 fe 04 	sts	0x04FE, r1
}
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	08 95       	ret

00001928 <__vector_1>:
				EncoderArray[0]++;
			}
		#endif
	#elif (ENCODER0_MODE == 'E')
		#if (ENCODER0_FUNC_NO == 0)
			ISR(INT0_vect) {
    1928:	1f 92       	push	r1
    192a:	0f 92       	push	r0
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	0f 92       	push	r0
    1930:	11 24       	eor	r1, r1
    1932:	8f 93       	push	r24
    1934:	9f 93       	push	r25
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
				EncoderArray[0]++;
    193e:	80 91 f4 04 	lds	r24, 0x04F4
    1942:	90 91 f5 04 	lds	r25, 0x04F5
    1946:	01 96       	adiw	r24, 0x01	; 1
    1948:	90 93 f5 04 	sts	0x04F5, r25
    194c:	80 93 f4 04 	sts	0x04F4, r24
			}
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	9f 91       	pop	r25
    1956:	8f 91       	pop	r24
    1958:	0f 90       	pop	r0
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	0f 90       	pop	r0
    195e:	1f 90       	pop	r1
    1960:	18 95       	reti

00001962 <__vector_2>:
		#if (ENCODER1_FUNC_NO == 0)
			ISR(INT0_vect) {
				EncoderArray[1]++;
			}
		#elif (ENCODER1_FUNC_NO == 1)
			ISR(INT1_vect) {
    1962:	1f 92       	push	r1
    1964:	0f 92       	push	r0
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	0f 92       	push	r0
    196a:	11 24       	eor	r1, r1
    196c:	8f 93       	push	r24
    196e:	9f 93       	push	r25
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
				EncoderArray[1]++;
    1978:	80 91 f6 04 	lds	r24, 0x04F6
    197c:	90 91 f7 04 	lds	r25, 0x04F7
    1980:	01 96       	adiw	r24, 0x01	; 1
    1982:	90 93 f7 04 	sts	0x04F7, r25
    1986:	80 93 f6 04 	sts	0x04F6, r24
			}
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	9f 91       	pop	r25
    1990:	8f 91       	pop	r24
    1992:	0f 90       	pop	r0
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	0f 90       	pop	r0
    1998:	1f 90       	pop	r1
    199a:	18 95       	reti

0000199c <__vector_5>:
		#elif (ENCODER2_FUNC_NO == 3)
			ISR(INT3_vect) {
				EncoderArray[2]++;
			}
		#elif (ENCODER2_FUNC_NO == 4)
			ISR(INT4_vect) {
    199c:	1f 92       	push	r1
    199e:	0f 92       	push	r0
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	0f 92       	push	r0
    19a4:	11 24       	eor	r1, r1
    19a6:	8f 93       	push	r24
    19a8:	9f 93       	push	r25
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
				EncoderArray[2]++;
    19b2:	80 91 f8 04 	lds	r24, 0x04F8
    19b6:	90 91 f9 04 	lds	r25, 0x04F9
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	90 93 f9 04 	sts	0x04F9, r25
    19c0:	80 93 f8 04 	sts	0x04F8, r24
			}
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	9f 91       	pop	r25
    19ca:	8f 91       	pop	r24
    19cc:	0f 90       	pop	r0
    19ce:	0f be       	out	0x3f, r0	; 63
    19d0:	0f 90       	pop	r0
    19d2:	1f 90       	pop	r1
    19d4:	18 95       	reti

000019d6 <__vector_6>:
		#elif (ENCODER3_FUNC_NO == 4)
			ISR(INT4_vect) {
				EncoderArray[3]++;
			}
		#elif (ENCODER3_FUNC_NO == 5)
			ISR(INT5_vect) {
    19d6:	1f 92       	push	r1
    19d8:	0f 92       	push	r0
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	0f 92       	push	r0
    19de:	11 24       	eor	r1, r1
    19e0:	8f 93       	push	r24
    19e2:	9f 93       	push	r25
    19e4:	df 93       	push	r29
    19e6:	cf 93       	push	r28
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
				EncoderArray[3]++;
    19ec:	80 91 fa 04 	lds	r24, 0x04FA
    19f0:	90 91 fb 04 	lds	r25, 0x04FB
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	90 93 fb 04 	sts	0x04FB, r25
    19fa:	80 93 fa 04 	sts	0x04FA, r24
			}
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	9f 91       	pop	r25
    1a04:	8f 91       	pop	r24
    1a06:	0f 90       	pop	r0
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	0f 90       	pop	r0
    1a0c:	1f 90       	pop	r1
    1a0e:	18 95       	reti

00001a10 <__vector_7>:
		#elif (ENCODER4_FUNC_NO == 5)
			ISR(INT5_vect) {
				EncoderArray[4]++;
			}
		#elif (ENCODER4_FUNC_NO == 6)
			ISR(INT6_vect) {
    1a10:	1f 92       	push	r1
    1a12:	0f 92       	push	r0
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	0f 92       	push	r0
    1a18:	11 24       	eor	r1, r1
    1a1a:	8f 93       	push	r24
    1a1c:	9f 93       	push	r25
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
				EncoderArray[4]++;
    1a26:	80 91 fc 04 	lds	r24, 0x04FC
    1a2a:	90 91 fd 04 	lds	r25, 0x04FD
    1a2e:	01 96       	adiw	r24, 0x01	; 1
    1a30:	90 93 fd 04 	sts	0x04FD, r25
    1a34:	80 93 fc 04 	sts	0x04FC, r24
			}
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	9f 91       	pop	r25
    1a3e:	8f 91       	pop	r24
    1a40:	0f 90       	pop	r0
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	0f 90       	pop	r0
    1a46:	1f 90       	pop	r1
    1a48:	18 95       	reti

00001a4a <__vector_8>:
		#elif (ENCODER5_FUNC_NO == 6)
			ISR(INT6_vect) {
				EncoderArray[5]++;
			}
		#elif (ENCODER5_FUNC_NO == 7)
			ISR(INT7_vect) {
    1a4a:	1f 92       	push	r1
    1a4c:	0f 92       	push	r0
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	0f 92       	push	r0
    1a52:	11 24       	eor	r1, r1
    1a54:	8f 93       	push	r24
    1a56:	9f 93       	push	r25
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
				EncoderArray[5]++;
    1a60:	80 91 fe 04 	lds	r24, 0x04FE
    1a64:	90 91 ff 04 	lds	r25, 0x04FF
    1a68:	01 96       	adiw	r24, 0x01	; 1
    1a6a:	90 93 ff 04 	sts	0x04FF, r25
    1a6e:	80 93 fe 04 	sts	0x04FE, r24
			}
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	9f 91       	pop	r25
    1a78:	8f 91       	pop	r24
    1a7a:	0f 90       	pop	r0
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	0f 90       	pop	r0
    1a80:	1f 90       	pop	r1
    1a82:	18 95       	reti

00001a84 <ExintSetup>:
#include "./Exint.h"
#include "./ExintDef.h"

void (*ExintInitialize[8])(void);

void ExintSetup(void) {
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
	#if defined(INT0_BIT)
		ExintInitialize[0] = ExintInitialize0;
    1a8c:	89 e7       	ldi	r24, 0x79	; 121
    1a8e:	9d e0       	ldi	r25, 0x0D	; 13
    1a90:	90 93 01 05 	sts	0x0501, r25
    1a94:	80 93 00 05 	sts	0x0500, r24
	#endif
	#if defined(INT1_BIT)
		ExintInitialize[1] = ExintInitialize1;
    1a98:	87 ea       	ldi	r24, 0xA7	; 167
    1a9a:	9d e0       	ldi	r25, 0x0D	; 13
    1a9c:	90 93 03 05 	sts	0x0503, r25
    1aa0:	80 93 02 05 	sts	0x0502, r24
	#endif
	#if defined(INT2_BIT)
		ExintInitialize[2] = ExintInitialize2;
    1aa4:	85 ed       	ldi	r24, 0xD5	; 213
    1aa6:	9d e0       	ldi	r25, 0x0D	; 13
    1aa8:	90 93 05 05 	sts	0x0505, r25
    1aac:	80 93 04 05 	sts	0x0504, r24
	#endif
	#if defined(INT3_BIT)
		ExintInitialize[3] = ExintInitialize3;
    1ab0:	83 e0       	ldi	r24, 0x03	; 3
    1ab2:	9e e0       	ldi	r25, 0x0E	; 14
    1ab4:	90 93 07 05 	sts	0x0507, r25
    1ab8:	80 93 06 05 	sts	0x0506, r24
	#endif
	#if defined(INT4_BIT)
		ExintInitialize[4] = ExintInitialize4;
    1abc:	81 e3       	ldi	r24, 0x31	; 49
    1abe:	9e e0       	ldi	r25, 0x0E	; 14
    1ac0:	90 93 09 05 	sts	0x0509, r25
    1ac4:	80 93 08 05 	sts	0x0508, r24
	#endif
	#if defined(INT5_BIT)
		ExintInitialize[5] = ExintInitialize5;
    1ac8:	8f e5       	ldi	r24, 0x5F	; 95
    1aca:	9e e0       	ldi	r25, 0x0E	; 14
    1acc:	90 93 0b 05 	sts	0x050B, r25
    1ad0:	80 93 0a 05 	sts	0x050A, r24
	#endif
	#if defined(INT6_BIT)
		ExintInitialize[6] = ExintInitialize6;
    1ad4:	8d e8       	ldi	r24, 0x8D	; 141
    1ad6:	9e e0       	ldi	r25, 0x0E	; 14
    1ad8:	90 93 0d 05 	sts	0x050D, r25
    1adc:	80 93 0c 05 	sts	0x050C, r24
	#endif
	#if defined(INT7_BIT)
		ExintInitialize[7] = ExintInitialize7;
    1ae0:	8b eb       	ldi	r24, 0xBB	; 187
    1ae2:	9e e0       	ldi	r25, 0x0E	; 14
    1ae4:	90 93 0f 05 	sts	0x050F, r25
    1ae8:	80 93 0e 05 	sts	0x050E, r24
	#endif
}
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <ExintInitialize0>:

#if defined(INT0_BIT)
static void ExintInitialize0(void) {
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
	sbi(*EXINT.EXIMSK, INT0_BIT);
    1afa:	80 91 ef 05 	lds	r24, 0x05EF
    1afe:	90 91 f0 05 	lds	r25, 0x05F0
    1b02:	20 91 ef 05 	lds	r18, 0x05EF
    1b06:	30 91 f0 05 	lds	r19, 0x05F0
    1b0a:	f9 01       	movw	r30, r18
    1b0c:	20 81       	ld	r18, Z
    1b0e:	21 60       	ori	r18, 0x01	; 1
    1b10:	fc 01       	movw	r30, r24
    1b12:	20 83       	st	Z, r18
	sbi(*EXINT.EXICRA, ISC01_BIT);
    1b14:	80 91 eb 05 	lds	r24, 0x05EB
    1b18:	90 91 ec 05 	lds	r25, 0x05EC
    1b1c:	20 91 eb 05 	lds	r18, 0x05EB
    1b20:	30 91 ec 05 	lds	r19, 0x05EC
    1b24:	f9 01       	movw	r30, r18
    1b26:	20 81       	ld	r18, Z
    1b28:	22 60       	ori	r18, 0x02	; 2
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	20 83       	st	Z, r18
	sbi(*EXINT.EXICRA, ISC00_BIT);
    1b2e:	80 91 eb 05 	lds	r24, 0x05EB
    1b32:	90 91 ec 05 	lds	r25, 0x05EC
    1b36:	20 91 eb 05 	lds	r18, 0x05EB
    1b3a:	30 91 ec 05 	lds	r19, 0x05EC
    1b3e:	f9 01       	movw	r30, r18
    1b40:	20 81       	ld	r18, Z
    1b42:	21 60       	ori	r18, 0x01	; 1
    1b44:	fc 01       	movw	r30, r24
    1b46:	20 83       	st	Z, r18
}
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <ExintInitialize1>:
#endif

#if defined(INT1_BIT)
static void ExintInitialize1(void) {
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
	sbi(*EXINT.EXIMSK, INT1_BIT);
    1b56:	80 91 ef 05 	lds	r24, 0x05EF
    1b5a:	90 91 f0 05 	lds	r25, 0x05F0
    1b5e:	20 91 ef 05 	lds	r18, 0x05EF
    1b62:	30 91 f0 05 	lds	r19, 0x05F0
    1b66:	f9 01       	movw	r30, r18
    1b68:	20 81       	ld	r18, Z
    1b6a:	22 60       	ori	r18, 0x02	; 2
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	20 83       	st	Z, r18
	sbi(*EXINT.EXICRA, ISC11_BIT);
    1b70:	80 91 eb 05 	lds	r24, 0x05EB
    1b74:	90 91 ec 05 	lds	r25, 0x05EC
    1b78:	20 91 eb 05 	lds	r18, 0x05EB
    1b7c:	30 91 ec 05 	lds	r19, 0x05EC
    1b80:	f9 01       	movw	r30, r18
    1b82:	20 81       	ld	r18, Z
    1b84:	28 60       	ori	r18, 0x08	; 8
    1b86:	fc 01       	movw	r30, r24
    1b88:	20 83       	st	Z, r18
	sbi(*EXINT.EXICRA, ISC10_BIT);
    1b8a:	80 91 eb 05 	lds	r24, 0x05EB
    1b8e:	90 91 ec 05 	lds	r25, 0x05EC
    1b92:	20 91 eb 05 	lds	r18, 0x05EB
    1b96:	30 91 ec 05 	lds	r19, 0x05EC
    1b9a:	f9 01       	movw	r30, r18
    1b9c:	20 81       	ld	r18, Z
    1b9e:	24 60       	ori	r18, 0x04	; 4
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	20 83       	st	Z, r18
}
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <ExintInitialize2>:
#endif

#if defined(INT2_BIT)
static void ExintInitialize2(void) {
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
	sbi(*EXINT.EXIMSK, INT2_BIT);
    1bb2:	80 91 ef 05 	lds	r24, 0x05EF
    1bb6:	90 91 f0 05 	lds	r25, 0x05F0
    1bba:	20 91 ef 05 	lds	r18, 0x05EF
    1bbe:	30 91 f0 05 	lds	r19, 0x05F0
    1bc2:	f9 01       	movw	r30, r18
    1bc4:	20 81       	ld	r18, Z
    1bc6:	24 60       	ori	r18, 0x04	; 4
    1bc8:	fc 01       	movw	r30, r24
    1bca:	20 83       	st	Z, r18
	sbi(*EXINT.EXICRA, ISC21_BIT);
    1bcc:	80 91 eb 05 	lds	r24, 0x05EB
    1bd0:	90 91 ec 05 	lds	r25, 0x05EC
    1bd4:	20 91 eb 05 	lds	r18, 0x05EB
    1bd8:	30 91 ec 05 	lds	r19, 0x05EC
    1bdc:	f9 01       	movw	r30, r18
    1bde:	20 81       	ld	r18, Z
    1be0:	20 62       	ori	r18, 0x20	; 32
    1be2:	fc 01       	movw	r30, r24
    1be4:	20 83       	st	Z, r18
	sbi(*EXINT.EXICRA, ISC20_BIT);
    1be6:	80 91 eb 05 	lds	r24, 0x05EB
    1bea:	90 91 ec 05 	lds	r25, 0x05EC
    1bee:	20 91 eb 05 	lds	r18, 0x05EB
    1bf2:	30 91 ec 05 	lds	r19, 0x05EC
    1bf6:	f9 01       	movw	r30, r18
    1bf8:	20 81       	ld	r18, Z
    1bfa:	20 61       	ori	r18, 0x10	; 16
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	20 83       	st	Z, r18
}
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <ExintInitialize3>:
#endif

#if defined(INT3_BIT)
static void ExintInitialize3(void) {
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
	sbi(*EXINT.EXIMSK, INT3_BIT);
    1c0e:	80 91 ef 05 	lds	r24, 0x05EF
    1c12:	90 91 f0 05 	lds	r25, 0x05F0
    1c16:	20 91 ef 05 	lds	r18, 0x05EF
    1c1a:	30 91 f0 05 	lds	r19, 0x05F0
    1c1e:	f9 01       	movw	r30, r18
    1c20:	20 81       	ld	r18, Z
    1c22:	28 60       	ori	r18, 0x08	; 8
    1c24:	fc 01       	movw	r30, r24
    1c26:	20 83       	st	Z, r18
	sbi(*EXINT.EXICRA, ISC31_BIT);
    1c28:	80 91 eb 05 	lds	r24, 0x05EB
    1c2c:	90 91 ec 05 	lds	r25, 0x05EC
    1c30:	20 91 eb 05 	lds	r18, 0x05EB
    1c34:	30 91 ec 05 	lds	r19, 0x05EC
    1c38:	f9 01       	movw	r30, r18
    1c3a:	20 81       	ld	r18, Z
    1c3c:	20 68       	ori	r18, 0x80	; 128
    1c3e:	fc 01       	movw	r30, r24
    1c40:	20 83       	st	Z, r18
	sbi(*EXINT.EXICRA, ISC30_BIT);
    1c42:	80 91 eb 05 	lds	r24, 0x05EB
    1c46:	90 91 ec 05 	lds	r25, 0x05EC
    1c4a:	20 91 eb 05 	lds	r18, 0x05EB
    1c4e:	30 91 ec 05 	lds	r19, 0x05EC
    1c52:	f9 01       	movw	r30, r18
    1c54:	20 81       	ld	r18, Z
    1c56:	20 64       	ori	r18, 0x40	; 64
    1c58:	fc 01       	movw	r30, r24
    1c5a:	20 83       	st	Z, r18
}
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <ExintInitialize4>:
#endif

#if defined(INT4_BIT)
static void ExintInitialize4(void) {
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
	sbi(*EXINT.EXIMSK, INT4_BIT);
    1c6a:	80 91 ef 05 	lds	r24, 0x05EF
    1c6e:	90 91 f0 05 	lds	r25, 0x05F0
    1c72:	20 91 ef 05 	lds	r18, 0x05EF
    1c76:	30 91 f0 05 	lds	r19, 0x05F0
    1c7a:	f9 01       	movw	r30, r18
    1c7c:	20 81       	ld	r18, Z
    1c7e:	20 61       	ori	r18, 0x10	; 16
    1c80:	fc 01       	movw	r30, r24
    1c82:	20 83       	st	Z, r18
	sbi(*EXINT.EXICRB, ISC41_BIT);
    1c84:	80 91 ed 05 	lds	r24, 0x05ED
    1c88:	90 91 ee 05 	lds	r25, 0x05EE
    1c8c:	20 91 ed 05 	lds	r18, 0x05ED
    1c90:	30 91 ee 05 	lds	r19, 0x05EE
    1c94:	f9 01       	movw	r30, r18
    1c96:	20 81       	ld	r18, Z
    1c98:	22 60       	ori	r18, 0x02	; 2
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	20 83       	st	Z, r18
	sbi(*EXINT.EXICRB, ISC40_BIT);
    1c9e:	80 91 ed 05 	lds	r24, 0x05ED
    1ca2:	90 91 ee 05 	lds	r25, 0x05EE
    1ca6:	20 91 ed 05 	lds	r18, 0x05ED
    1caa:	30 91 ee 05 	lds	r19, 0x05EE
    1cae:	f9 01       	movw	r30, r18
    1cb0:	20 81       	ld	r18, Z
    1cb2:	21 60       	ori	r18, 0x01	; 1
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	20 83       	st	Z, r18
}
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <ExintInitialize5>:
#endif

#if defined(INT5_BIT)
static void ExintInitialize5(void) {
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
	sbi(*EXINT.EXIMSK, INT5_BIT);
    1cc6:	80 91 ef 05 	lds	r24, 0x05EF
    1cca:	90 91 f0 05 	lds	r25, 0x05F0
    1cce:	20 91 ef 05 	lds	r18, 0x05EF
    1cd2:	30 91 f0 05 	lds	r19, 0x05F0
    1cd6:	f9 01       	movw	r30, r18
    1cd8:	20 81       	ld	r18, Z
    1cda:	20 62       	ori	r18, 0x20	; 32
    1cdc:	fc 01       	movw	r30, r24
    1cde:	20 83       	st	Z, r18
	sbi(*EXINT.EXICRB, ISC51_BIT);
    1ce0:	80 91 ed 05 	lds	r24, 0x05ED
    1ce4:	90 91 ee 05 	lds	r25, 0x05EE
    1ce8:	20 91 ed 05 	lds	r18, 0x05ED
    1cec:	30 91 ee 05 	lds	r19, 0x05EE
    1cf0:	f9 01       	movw	r30, r18
    1cf2:	20 81       	ld	r18, Z
    1cf4:	28 60       	ori	r18, 0x08	; 8
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	20 83       	st	Z, r18
	sbi(*EXINT.EXICRB, ISC50_BIT);
    1cfa:	80 91 ed 05 	lds	r24, 0x05ED
    1cfe:	90 91 ee 05 	lds	r25, 0x05EE
    1d02:	20 91 ed 05 	lds	r18, 0x05ED
    1d06:	30 91 ee 05 	lds	r19, 0x05EE
    1d0a:	f9 01       	movw	r30, r18
    1d0c:	20 81       	ld	r18, Z
    1d0e:	24 60       	ori	r18, 0x04	; 4
    1d10:	fc 01       	movw	r30, r24
    1d12:	20 83       	st	Z, r18
}
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <ExintInitialize6>:
#endif

#if defined(INT6_BIT)
static void ExintInitialize6(void) {
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
	sbi(*EXINT.EXIMSK, INT6_BIT);
    1d22:	80 91 ef 05 	lds	r24, 0x05EF
    1d26:	90 91 f0 05 	lds	r25, 0x05F0
    1d2a:	20 91 ef 05 	lds	r18, 0x05EF
    1d2e:	30 91 f0 05 	lds	r19, 0x05F0
    1d32:	f9 01       	movw	r30, r18
    1d34:	20 81       	ld	r18, Z
    1d36:	20 64       	ori	r18, 0x40	; 64
    1d38:	fc 01       	movw	r30, r24
    1d3a:	20 83       	st	Z, r18
	sbi(*EXINT.EXICRB, ISC61_BIT);
    1d3c:	80 91 ed 05 	lds	r24, 0x05ED
    1d40:	90 91 ee 05 	lds	r25, 0x05EE
    1d44:	20 91 ed 05 	lds	r18, 0x05ED
    1d48:	30 91 ee 05 	lds	r19, 0x05EE
    1d4c:	f9 01       	movw	r30, r18
    1d4e:	20 81       	ld	r18, Z
    1d50:	20 62       	ori	r18, 0x20	; 32
    1d52:	fc 01       	movw	r30, r24
    1d54:	20 83       	st	Z, r18
	sbi(*EXINT.EXICRB, ISC60_BIT);
    1d56:	80 91 ed 05 	lds	r24, 0x05ED
    1d5a:	90 91 ee 05 	lds	r25, 0x05EE
    1d5e:	20 91 ed 05 	lds	r18, 0x05ED
    1d62:	30 91 ee 05 	lds	r19, 0x05EE
    1d66:	f9 01       	movw	r30, r18
    1d68:	20 81       	ld	r18, Z
    1d6a:	20 61       	ori	r18, 0x10	; 16
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	20 83       	st	Z, r18
}
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	08 95       	ret

00001d76 <ExintInitialize7>:
#endif

#if defined(INT7_BIT)
static void ExintInitialize7(void) {
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
	sbi(*EXINT.EXIMSK, INT7_BIT);
    1d7e:	80 91 ef 05 	lds	r24, 0x05EF
    1d82:	90 91 f0 05 	lds	r25, 0x05F0
    1d86:	20 91 ef 05 	lds	r18, 0x05EF
    1d8a:	30 91 f0 05 	lds	r19, 0x05F0
    1d8e:	f9 01       	movw	r30, r18
    1d90:	20 81       	ld	r18, Z
    1d92:	20 68       	ori	r18, 0x80	; 128
    1d94:	fc 01       	movw	r30, r24
    1d96:	20 83       	st	Z, r18
	sbi(*EXINT.EXICRB, ISC71_BIT);
    1d98:	80 91 ed 05 	lds	r24, 0x05ED
    1d9c:	90 91 ee 05 	lds	r25, 0x05EE
    1da0:	20 91 ed 05 	lds	r18, 0x05ED
    1da4:	30 91 ee 05 	lds	r19, 0x05EE
    1da8:	f9 01       	movw	r30, r18
    1daa:	20 81       	ld	r18, Z
    1dac:	20 68       	ori	r18, 0x80	; 128
    1dae:	fc 01       	movw	r30, r24
    1db0:	20 83       	st	Z, r18
	sbi(*EXINT.EXICRB, ISC70_BIT);
    1db2:	80 91 ed 05 	lds	r24, 0x05ED
    1db6:	90 91 ee 05 	lds	r25, 0x05EE
    1dba:	20 91 ed 05 	lds	r18, 0x05ED
    1dbe:	30 91 ee 05 	lds	r19, 0x05EE
    1dc2:	f9 01       	movw	r30, r18
    1dc4:	20 81       	ld	r18, Z
    1dc6:	20 64       	ori	r18, 0x40	; 64
    1dc8:	fc 01       	movw	r30, r24
    1dca:	20 83       	st	Z, r18
}
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	08 95       	ret

00001dd2 <SensorInitialize>:

#if defined(USE_SENSOR)

bool SensorArray[USING_SENSOR];

void SensorInitialize() {
    1dd2:	df 93       	push	r29
    1dd4:	cf 93       	push	r28
    1dd6:	0f 92       	push	r0
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
	uint8_t loop;

	#if (USING_SENSOR > 0)
		cbi(*SENSOR_0_PORT.DDR, SENSOR_0_BIT);
    1ddc:	80 91 c7 05 	lds	r24, 0x05C7
    1de0:	90 91 c8 05 	lds	r25, 0x05C8
    1de4:	20 91 c7 05 	lds	r18, 0x05C7
    1de8:	30 91 c8 05 	lds	r19, 0x05C8
    1dec:	f9 01       	movw	r30, r18
    1dee:	20 81       	ld	r18, Z
    1df0:	2e 7f       	andi	r18, 0xFE	; 254
    1df2:	fc 01       	movw	r30, r24
    1df4:	20 83       	st	Z, r18
		sbi(*SENSOR_0_PORT.PORT, SENSOR_0_BIT);
    1df6:	80 91 c9 05 	lds	r24, 0x05C9
    1dfa:	90 91 ca 05 	lds	r25, 0x05CA
    1dfe:	20 91 c9 05 	lds	r18, 0x05C9
    1e02:	30 91 ca 05 	lds	r19, 0x05CA
    1e06:	f9 01       	movw	r30, r18
    1e08:	20 81       	ld	r18, Z
    1e0a:	21 60       	ori	r18, 0x01	; 1
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	20 83       	st	Z, r18
	#endif
	#if (USING_SENSOR > 1)
		cbi(*SENSOR_1_PORT.DDR, SENSOR_1_BIT);
    1e10:	80 91 c7 05 	lds	r24, 0x05C7
    1e14:	90 91 c8 05 	lds	r25, 0x05C8
    1e18:	20 91 c7 05 	lds	r18, 0x05C7
    1e1c:	30 91 c8 05 	lds	r19, 0x05C8
    1e20:	f9 01       	movw	r30, r18
    1e22:	20 81       	ld	r18, Z
    1e24:	2d 7f       	andi	r18, 0xFD	; 253
    1e26:	fc 01       	movw	r30, r24
    1e28:	20 83       	st	Z, r18
		sbi(*SENSOR_1_PORT.PORT, SENSOR_1_BIT);
    1e2a:	80 91 c9 05 	lds	r24, 0x05C9
    1e2e:	90 91 ca 05 	lds	r25, 0x05CA
    1e32:	20 91 c9 05 	lds	r18, 0x05C9
    1e36:	30 91 ca 05 	lds	r19, 0x05CA
    1e3a:	f9 01       	movw	r30, r18
    1e3c:	20 81       	ld	r18, Z
    1e3e:	22 60       	ori	r18, 0x02	; 2
    1e40:	fc 01       	movw	r30, r24
    1e42:	20 83       	st	Z, r18
	#endif
	#if (USING_SENSOR > 2)
		cbi(*SENSOR_2_PORT.DDR, SENSOR_2_BIT);
    1e44:	80 91 c7 05 	lds	r24, 0x05C7
    1e48:	90 91 c8 05 	lds	r25, 0x05C8
    1e4c:	20 91 c7 05 	lds	r18, 0x05C7
    1e50:	30 91 c8 05 	lds	r19, 0x05C8
    1e54:	f9 01       	movw	r30, r18
    1e56:	20 81       	ld	r18, Z
    1e58:	2b 7f       	andi	r18, 0xFB	; 251
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	20 83       	st	Z, r18
		sbi(*SENSOR_2_PORT.PORT, SENSOR_2_BIT);
    1e5e:	80 91 c9 05 	lds	r24, 0x05C9
    1e62:	90 91 ca 05 	lds	r25, 0x05CA
    1e66:	20 91 c9 05 	lds	r18, 0x05C9
    1e6a:	30 91 ca 05 	lds	r19, 0x05CA
    1e6e:	f9 01       	movw	r30, r18
    1e70:	20 81       	ld	r18, Z
    1e72:	24 60       	ori	r18, 0x04	; 4
    1e74:	fc 01       	movw	r30, r24
    1e76:	20 83       	st	Z, r18
	#endif
	#if (USING_SENSOR > 3)
		cbi(*SENSOR_3_PORT.DDR, SENSOR_3_BIT);
    1e78:	80 91 c7 05 	lds	r24, 0x05C7
    1e7c:	90 91 c8 05 	lds	r25, 0x05C8
    1e80:	20 91 c7 05 	lds	r18, 0x05C7
    1e84:	30 91 c8 05 	lds	r19, 0x05C8
    1e88:	f9 01       	movw	r30, r18
    1e8a:	20 81       	ld	r18, Z
    1e8c:	27 7f       	andi	r18, 0xF7	; 247
    1e8e:	fc 01       	movw	r30, r24
    1e90:	20 83       	st	Z, r18
		sbi(*SENSOR_3_PORT.PORT, SENSOR_3_BIT);
    1e92:	80 91 c9 05 	lds	r24, 0x05C9
    1e96:	90 91 ca 05 	lds	r25, 0x05CA
    1e9a:	20 91 c9 05 	lds	r18, 0x05C9
    1e9e:	30 91 ca 05 	lds	r19, 0x05CA
    1ea2:	f9 01       	movw	r30, r18
    1ea4:	20 81       	ld	r18, Z
    1ea6:	28 60       	ori	r18, 0x08	; 8
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	20 83       	st	Z, r18
	#if (USING_SENSOR > 4)
		cbi(*SENSOR_4_PORT.DDR, SENSOR_4_BIT);
		sbi(*SENSOR_4_PORT.PORT, SENSOR_4_BIT);
	#endif
	
	for(loop=0; loop<USING_SENSOR; loop++) {
    1eac:	19 82       	std	Y+1, r1	; 0x01
    1eae:	0a c0       	rjmp	.+20     	; 0x1ec4 <SensorInitialize+0xf2>
		SensorArray[loop] = SENSOR_OFF;
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	88 2f       	mov	r24, r24
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	80 5f       	subi	r24, 0xF0	; 240
    1eb8:	9a 4f       	sbci	r25, 0xFA	; 250
    1eba:	fc 01       	movw	r30, r24
    1ebc:	10 82       	st	Z, r1
	#if (USING_SENSOR > 4)
		cbi(*SENSOR_4_PORT.DDR, SENSOR_4_BIT);
		sbi(*SENSOR_4_PORT.PORT, SENSOR_4_BIT);
	#endif
	
	for(loop=0; loop<USING_SENSOR; loop++) {
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	8f 5f       	subi	r24, 0xFF	; 255
    1ec2:	89 83       	std	Y+1, r24	; 0x01
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	84 30       	cpi	r24, 0x04	; 4
    1ec8:	98 f3       	brcs	.-26     	; 0x1eb0 <SensorInitialize+0xde>
		SensorArray[loop] = SENSOR_OFF;
	}
}
    1eca:	0f 90       	pop	r0
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <GetSensorStatus>:

void GetSensorStatus(void) {
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
	#if (USING_SENSOR > 0)
		if( !(*SENSOR_0_PORT.PIN & (1<<SENSOR_0_BIT)))	SensorArray[0] = SENSOR_ON;
    1eda:	80 91 cb 05 	lds	r24, 0x05CB
    1ede:	90 91 cc 05 	lds	r25, 0x05CC
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	80 81       	ld	r24, Z
    1ee6:	88 2f       	mov	r24, r24
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	81 70       	andi	r24, 0x01	; 1
    1eec:	90 70       	andi	r25, 0x00	; 0
    1eee:	00 97       	sbiw	r24, 0x00	; 0
    1ef0:	21 f4       	brne	.+8      	; 0x1efa <GetSensorStatus+0x28>
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	80 93 10 05 	sts	0x0510, r24
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <GetSensorStatus+0x2c>
		else											SensorArray[0] = SENSOR_OFF;
    1efa:	10 92 10 05 	sts	0x0510, r1
	#endif
	#if (USING_SENSOR > 1)
		if( !(*SENSOR_1_PORT.PIN & (1<<SENSOR_1_BIT)))	SensorArray[1] = SENSOR_ON;
    1efe:	80 91 cb 05 	lds	r24, 0x05CB
    1f02:	90 91 cc 05 	lds	r25, 0x05CC
    1f06:	fc 01       	movw	r30, r24
    1f08:	80 81       	ld	r24, Z
    1f0a:	88 2f       	mov	r24, r24
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	82 70       	andi	r24, 0x02	; 2
    1f10:	90 70       	andi	r25, 0x00	; 0
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	21 f4       	brne	.+8      	; 0x1f1e <GetSensorStatus+0x4c>
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	80 93 11 05 	sts	0x0511, r24
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <GetSensorStatus+0x50>
		else											SensorArray[1] = SENSOR_OFF;
    1f1e:	10 92 11 05 	sts	0x0511, r1
	#endif
	#if (USING_SENSOR > 2)
		if( !(*SENSOR_2_PORT.PIN & (1<<SENSOR_2_BIT)))	SensorArray[2] = SENSOR_ON;
    1f22:	80 91 cb 05 	lds	r24, 0x05CB
    1f26:	90 91 cc 05 	lds	r25, 0x05CC
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	80 81       	ld	r24, Z
    1f2e:	88 2f       	mov	r24, r24
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	84 70       	andi	r24, 0x04	; 4
    1f34:	90 70       	andi	r25, 0x00	; 0
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	21 f4       	brne	.+8      	; 0x1f42 <GetSensorStatus+0x70>
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	80 93 12 05 	sts	0x0512, r24
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <GetSensorStatus+0x74>
		else											SensorArray[2] = SENSOR_OFF;
    1f42:	10 92 12 05 	sts	0x0512, r1
	#endif
	#if (USING_SENSOR > 3)
		if( !(*SENSOR_3_PORT.PIN & (1<<SENSOR_3_BIT)))	SensorArray[3] = SENSOR_ON;
    1f46:	80 91 cb 05 	lds	r24, 0x05CB
    1f4a:	90 91 cc 05 	lds	r25, 0x05CC
    1f4e:	fc 01       	movw	r30, r24
    1f50:	80 81       	ld	r24, Z
    1f52:	88 2f       	mov	r24, r24
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	88 70       	andi	r24, 0x08	; 8
    1f58:	90 70       	andi	r25, 0x00	; 0
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	21 f4       	brne	.+8      	; 0x1f66 <GetSensorStatus+0x94>
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	80 93 13 05 	sts	0x0513, r24
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <GetSensorStatus+0x98>
		else											SensorArray[3] = SENSOR_OFF;
    1f66:	10 92 13 05 	sts	0x0513, r1
	#endif
	#if (USING_SENSOR > 4)
		if( !(*SENSOR_4_PORT.PIN & (1<<SENSOR_4_BIT)))	SensorArray[4] = SENSOR_ON;
		else											SensorArray[4] = SENSOR_OFF;
	#endif
}
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <SwitchInitialize>:
#if defined(USE_SWITCH)
bool SwitchArray[USING_SWITCH];
#endif

#if defined(USE_SWITCH)
void SwitchInitialize() {
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	0f 92       	push	r0
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
	uint8_t loop;

	#if (USING_SWITCH > 0)
		cbi(*SWITCH_0_PORT.DDR, SWITCH_0_BIT);
    1f7a:	80 91 a9 05 	lds	r24, 0x05A9
    1f7e:	90 91 aa 05 	lds	r25, 0x05AA
    1f82:	20 91 a9 05 	lds	r18, 0x05A9
    1f86:	30 91 aa 05 	lds	r19, 0x05AA
    1f8a:	f9 01       	movw	r30, r18
    1f8c:	20 81       	ld	r18, Z
    1f8e:	27 7f       	andi	r18, 0xF7	; 247
    1f90:	fc 01       	movw	r30, r24
    1f92:	20 83       	st	Z, r18
		sbi(*SWITCH_0_PORT.PORT, SWITCH_0_BIT);
    1f94:	80 91 ab 05 	lds	r24, 0x05AB
    1f98:	90 91 ac 05 	lds	r25, 0x05AC
    1f9c:	20 91 ab 05 	lds	r18, 0x05AB
    1fa0:	30 91 ac 05 	lds	r19, 0x05AC
    1fa4:	f9 01       	movw	r30, r18
    1fa6:	20 81       	ld	r18, Z
    1fa8:	28 60       	ori	r18, 0x08	; 8
    1faa:	fc 01       	movw	r30, r24
    1fac:	20 83       	st	Z, r18
	#endif
	#if (USING_SWITCH > 1)
		cbi(*SWITCH_1_PORT.DDR, SWITCH_1_BIT);
    1fae:	80 91 a9 05 	lds	r24, 0x05A9
    1fb2:	90 91 aa 05 	lds	r25, 0x05AA
    1fb6:	20 91 a9 05 	lds	r18, 0x05A9
    1fba:	30 91 aa 05 	lds	r19, 0x05AA
    1fbe:	f9 01       	movw	r30, r18
    1fc0:	20 81       	ld	r18, Z
    1fc2:	2b 7f       	andi	r18, 0xFB	; 251
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	20 83       	st	Z, r18
		sbi(*SWITCH_1_PORT.PORT, SWITCH_1_BIT);
    1fc8:	80 91 ab 05 	lds	r24, 0x05AB
    1fcc:	90 91 ac 05 	lds	r25, 0x05AC
    1fd0:	20 91 ab 05 	lds	r18, 0x05AB
    1fd4:	30 91 ac 05 	lds	r19, 0x05AC
    1fd8:	f9 01       	movw	r30, r18
    1fda:	20 81       	ld	r18, Z
    1fdc:	24 60       	ori	r18, 0x04	; 4
    1fde:	fc 01       	movw	r30, r24
    1fe0:	20 83       	st	Z, r18
	#endif
	#if (USING_SWITCH > 2)
		cbi(*SWITCH_2_PORT.DDR, SWITCH_2_BIT);
    1fe2:	80 91 cd 05 	lds	r24, 0x05CD
    1fe6:	90 91 ce 05 	lds	r25, 0x05CE
    1fea:	20 91 cd 05 	lds	r18, 0x05CD
    1fee:	30 91 ce 05 	lds	r19, 0x05CE
    1ff2:	f9 01       	movw	r30, r18
    1ff4:	20 81       	ld	r18, Z
    1ff6:	2d 7f       	andi	r18, 0xFD	; 253
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	20 83       	st	Z, r18
		sbi(*SWITCH_2_PORT.PORT, SWITCH_2_BIT);
    1ffc:	80 91 cf 05 	lds	r24, 0x05CF
    2000:	90 91 d0 05 	lds	r25, 0x05D0
    2004:	20 91 cf 05 	lds	r18, 0x05CF
    2008:	30 91 d0 05 	lds	r19, 0x05D0
    200c:	f9 01       	movw	r30, r18
    200e:	20 81       	ld	r18, Z
    2010:	22 60       	ori	r18, 0x02	; 2
    2012:	fc 01       	movw	r30, r24
    2014:	20 83       	st	Z, r18
	#endif
	#if (USING_SWITCH > 3)
		cbi(*SWITCH_3_PORT.DDR, SWITCH_3_BIT);
    2016:	80 91 b5 05 	lds	r24, 0x05B5
    201a:	90 91 b6 05 	lds	r25, 0x05B6
    201e:	20 91 b5 05 	lds	r18, 0x05B5
    2022:	30 91 b6 05 	lds	r19, 0x05B6
    2026:	f9 01       	movw	r30, r18
    2028:	20 81       	ld	r18, Z
    202a:	2e 7f       	andi	r18, 0xFE	; 254
    202c:	fc 01       	movw	r30, r24
    202e:	20 83       	st	Z, r18
		sbi(*SWITCH_3_PORT.PORT, SWITCH_3_BIT);
    2030:	80 91 b7 05 	lds	r24, 0x05B7
    2034:	90 91 b8 05 	lds	r25, 0x05B8
    2038:	20 91 b7 05 	lds	r18, 0x05B7
    203c:	30 91 b8 05 	lds	r19, 0x05B8
    2040:	f9 01       	movw	r30, r18
    2042:	20 81       	ld	r18, Z
    2044:	21 60       	ori	r18, 0x01	; 1
    2046:	fc 01       	movw	r30, r24
    2048:	20 83       	st	Z, r18
	#endif
	#if (USING_SWITCH > 4)
		cbi(*SWITCH_4_PORT.DDR, SWITCH_4_BIT);
    204a:	80 91 b5 05 	lds	r24, 0x05B5
    204e:	90 91 b6 05 	lds	r25, 0x05B6
    2052:	20 91 b5 05 	lds	r18, 0x05B5
    2056:	30 91 b6 05 	lds	r19, 0x05B6
    205a:	f9 01       	movw	r30, r18
    205c:	20 81       	ld	r18, Z
    205e:	2d 7f       	andi	r18, 0xFD	; 253
    2060:	fc 01       	movw	r30, r24
    2062:	20 83       	st	Z, r18
		sbi(*SWITCH_4_PORT.PORT, SWITCH_4_BIT);
    2064:	80 91 b7 05 	lds	r24, 0x05B7
    2068:	90 91 b8 05 	lds	r25, 0x05B8
    206c:	20 91 b7 05 	lds	r18, 0x05B7
    2070:	30 91 b8 05 	lds	r19, 0x05B8
    2074:	f9 01       	movw	r30, r18
    2076:	20 81       	ld	r18, Z
    2078:	22 60       	ori	r18, 0x02	; 2
    207a:	fc 01       	movw	r30, r24
    207c:	20 83       	st	Z, r18
	#endif
	#if (USING_SWITCH > 5)
		cbi(*SWITCH_5_PORT.DDR, SWITCH_5_BIT);
    207e:	80 91 b5 05 	lds	r24, 0x05B5
    2082:	90 91 b6 05 	lds	r25, 0x05B6
    2086:	20 91 b5 05 	lds	r18, 0x05B5
    208a:	30 91 b6 05 	lds	r19, 0x05B6
    208e:	f9 01       	movw	r30, r18
    2090:	20 81       	ld	r18, Z
    2092:	2b 7f       	andi	r18, 0xFB	; 251
    2094:	fc 01       	movw	r30, r24
    2096:	20 83       	st	Z, r18
		sbi(*SWITCH_5_PORT.PORT, SWITCH_5_BIT);
    2098:	80 91 b7 05 	lds	r24, 0x05B7
    209c:	90 91 b8 05 	lds	r25, 0x05B8
    20a0:	20 91 b7 05 	lds	r18, 0x05B7
    20a4:	30 91 b8 05 	lds	r19, 0x05B8
    20a8:	f9 01       	movw	r30, r18
    20aa:	20 81       	ld	r18, Z
    20ac:	24 60       	ori	r18, 0x04	; 4
    20ae:	fc 01       	movw	r30, r24
    20b0:	20 83       	st	Z, r18
	#endif
	#if (USING_SWITCH > 6)
		cbi(*SWITCH_6_PORT.DDR, SWITCH_6_BIT);
    20b2:	80 91 b5 05 	lds	r24, 0x05B5
    20b6:	90 91 b6 05 	lds	r25, 0x05B6
    20ba:	20 91 b5 05 	lds	r18, 0x05B5
    20be:	30 91 b6 05 	lds	r19, 0x05B6
    20c2:	f9 01       	movw	r30, r18
    20c4:	20 81       	ld	r18, Z
    20c6:	27 7f       	andi	r18, 0xF7	; 247
    20c8:	fc 01       	movw	r30, r24
    20ca:	20 83       	st	Z, r18
		sbi(*SWITCH_6_PORT.PORT, SWITCH_6_BIT);
    20cc:	80 91 b7 05 	lds	r24, 0x05B7
    20d0:	90 91 b8 05 	lds	r25, 0x05B8
    20d4:	20 91 b7 05 	lds	r18, 0x05B7
    20d8:	30 91 b8 05 	lds	r19, 0x05B8
    20dc:	f9 01       	movw	r30, r18
    20de:	20 81       	ld	r18, Z
    20e0:	28 60       	ori	r18, 0x08	; 8
    20e2:	fc 01       	movw	r30, r24
    20e4:	20 83       	st	Z, r18
	#endif
	#if (USING_SWITCH > 7)
		cbi(*SWITCH_7_PORT.DDR, SWITCH_7_BIT);
    20e6:	80 91 b5 05 	lds	r24, 0x05B5
    20ea:	90 91 b6 05 	lds	r25, 0x05B6
    20ee:	20 91 b5 05 	lds	r18, 0x05B5
    20f2:	30 91 b6 05 	lds	r19, 0x05B6
    20f6:	f9 01       	movw	r30, r18
    20f8:	20 81       	ld	r18, Z
    20fa:	2f 7e       	andi	r18, 0xEF	; 239
    20fc:	fc 01       	movw	r30, r24
    20fe:	20 83       	st	Z, r18
		sbi(*SWITCH_7_PORT.PORT, SWITCH_7_BIT);
    2100:	80 91 b7 05 	lds	r24, 0x05B7
    2104:	90 91 b8 05 	lds	r25, 0x05B8
    2108:	20 91 b7 05 	lds	r18, 0x05B7
    210c:	30 91 b8 05 	lds	r19, 0x05B8
    2110:	f9 01       	movw	r30, r18
    2112:	20 81       	ld	r18, Z
    2114:	20 61       	ori	r18, 0x10	; 16
    2116:	fc 01       	movw	r30, r24
    2118:	20 83       	st	Z, r18
	#if (USING_SWITCH > 8)
		cbi(*SWITCH_8_PORT.DDR, SWITCH_8_BIT);
		sbi(*SWITCH_8_PORT.PORT, SWITCH_8_BIT);
	#endif
	
	for(loop=0; loop<USING_SWITCH; loop++) {
    211a:	19 82       	std	Y+1, r1	; 0x01
    211c:	0a c0       	rjmp	.+20     	; 0x2132 <SwitchInitialize+0x1c2>
		SwitchArray[loop] = SWITCH_OFF;
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	88 2f       	mov	r24, r24
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	8c 5e       	subi	r24, 0xEC	; 236
    2126:	9a 4f       	sbci	r25, 0xFA	; 250
    2128:	fc 01       	movw	r30, r24
    212a:	10 82       	st	Z, r1
	#if (USING_SWITCH > 8)
		cbi(*SWITCH_8_PORT.DDR, SWITCH_8_BIT);
		sbi(*SWITCH_8_PORT.PORT, SWITCH_8_BIT);
	#endif
	
	for(loop=0; loop<USING_SWITCH; loop++) {
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	8f 5f       	subi	r24, 0xFF	; 255
    2130:	89 83       	std	Y+1, r24	; 0x01
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	88 30       	cpi	r24, 0x08	; 8
    2136:	98 f3       	brcs	.-26     	; 0x211e <SwitchInitialize+0x1ae>
		SwitchArray[loop] = SWITCH_OFF;
	}
}
    2138:	0f 90       	pop	r0
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <DipSwitchInitialize>:
#endif

#if (defined(USE_DIP_SWITCH) || defined(USE_MU))
void DipSwitchInitialize() {
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
	cbi(*DIP_0_PORT.DDR, DIP_0_BIT);
    2148:	80 91 c7 05 	lds	r24, 0x05C7
    214c:	90 91 c8 05 	lds	r25, 0x05C8
    2150:	20 91 c7 05 	lds	r18, 0x05C7
    2154:	30 91 c8 05 	lds	r19, 0x05C8
    2158:	f9 01       	movw	r30, r18
    215a:	20 81       	ld	r18, Z
    215c:	2f 7e       	andi	r18, 0xEF	; 239
    215e:	fc 01       	movw	r30, r24
    2160:	20 83       	st	Z, r18
	sbi(*DIP_0_PORT.PORT, DIP_0_BIT);
    2162:	80 91 c9 05 	lds	r24, 0x05C9
    2166:	90 91 ca 05 	lds	r25, 0x05CA
    216a:	20 91 c9 05 	lds	r18, 0x05C9
    216e:	30 91 ca 05 	lds	r19, 0x05CA
    2172:	f9 01       	movw	r30, r18
    2174:	20 81       	ld	r18, Z
    2176:	20 61       	ori	r18, 0x10	; 16
    2178:	fc 01       	movw	r30, r24
    217a:	20 83       	st	Z, r18
	cbi(*DIP_1_PORT.DDR, DIP_1_BIT);
    217c:	80 91 c7 05 	lds	r24, 0x05C7
    2180:	90 91 c8 05 	lds	r25, 0x05C8
    2184:	20 91 c7 05 	lds	r18, 0x05C7
    2188:	30 91 c8 05 	lds	r19, 0x05C8
    218c:	f9 01       	movw	r30, r18
    218e:	20 81       	ld	r18, Z
    2190:	2f 7d       	andi	r18, 0xDF	; 223
    2192:	fc 01       	movw	r30, r24
    2194:	20 83       	st	Z, r18
	sbi(*DIP_1_PORT.PORT, DIP_1_BIT);
    2196:	80 91 c9 05 	lds	r24, 0x05C9
    219a:	90 91 ca 05 	lds	r25, 0x05CA
    219e:	20 91 c9 05 	lds	r18, 0x05C9
    21a2:	30 91 ca 05 	lds	r19, 0x05CA
    21a6:	f9 01       	movw	r30, r18
    21a8:	20 81       	ld	r18, Z
    21aa:	20 62       	ori	r18, 0x20	; 32
    21ac:	fc 01       	movw	r30, r24
    21ae:	20 83       	st	Z, r18
	cbi(*DIP_2_PORT.DDR, DIP_2_BIT);
    21b0:	80 91 c7 05 	lds	r24, 0x05C7
    21b4:	90 91 c8 05 	lds	r25, 0x05C8
    21b8:	20 91 c7 05 	lds	r18, 0x05C7
    21bc:	30 91 c8 05 	lds	r19, 0x05C8
    21c0:	f9 01       	movw	r30, r18
    21c2:	20 81       	ld	r18, Z
    21c4:	2f 7b       	andi	r18, 0xBF	; 191
    21c6:	fc 01       	movw	r30, r24
    21c8:	20 83       	st	Z, r18
	sbi(*DIP_2_PORT.PORT, DIP_2_BIT);
    21ca:	80 91 c9 05 	lds	r24, 0x05C9
    21ce:	90 91 ca 05 	lds	r25, 0x05CA
    21d2:	20 91 c9 05 	lds	r18, 0x05C9
    21d6:	30 91 ca 05 	lds	r19, 0x05CA
    21da:	f9 01       	movw	r30, r18
    21dc:	20 81       	ld	r18, Z
    21de:	20 64       	ori	r18, 0x40	; 64
    21e0:	fc 01       	movw	r30, r24
    21e2:	20 83       	st	Z, r18
	cbi(*DIP_3_PORT.DDR, DIP_3_BIT);
    21e4:	80 91 c7 05 	lds	r24, 0x05C7
    21e8:	90 91 c8 05 	lds	r25, 0x05C8
    21ec:	20 91 c7 05 	lds	r18, 0x05C7
    21f0:	30 91 c8 05 	lds	r19, 0x05C8
    21f4:	f9 01       	movw	r30, r18
    21f6:	20 81       	ld	r18, Z
    21f8:	2f 77       	andi	r18, 0x7F	; 127
    21fa:	fc 01       	movw	r30, r24
    21fc:	20 83       	st	Z, r18
	sbi(*DIP_3_PORT.PORT, DIP_3_BIT);
    21fe:	80 91 c9 05 	lds	r24, 0x05C9
    2202:	90 91 ca 05 	lds	r25, 0x05CA
    2206:	20 91 c9 05 	lds	r18, 0x05C9
    220a:	30 91 ca 05 	lds	r19, 0x05CA
    220e:	f9 01       	movw	r30, r18
    2210:	20 81       	ld	r18, Z
    2212:	20 68       	ori	r18, 0x80	; 128
    2214:	fc 01       	movw	r30, r24
    2216:	20 83       	st	Z, r18
}
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	08 95       	ret

0000221e <GetSwitchStatus>:
#endif

#if defined(USE_SWITCH)
void GetSwitchStatus(void) {
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
	#if (USING_SWITCH > 0)
		if( !(*SWITCH_0_PORT.PIN & (1<<SWITCH_0_BIT)))	SwitchArray[0] = SWITCH_ON;
    2226:	80 91 ad 05 	lds	r24, 0x05AD
    222a:	90 91 ae 05 	lds	r25, 0x05AE
    222e:	fc 01       	movw	r30, r24
    2230:	80 81       	ld	r24, Z
    2232:	88 2f       	mov	r24, r24
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	88 70       	andi	r24, 0x08	; 8
    2238:	90 70       	andi	r25, 0x00	; 0
    223a:	00 97       	sbiw	r24, 0x00	; 0
    223c:	21 f4       	brne	.+8      	; 0x2246 <GetSwitchStatus+0x28>
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	80 93 14 05 	sts	0x0514, r24
    2244:	02 c0       	rjmp	.+4      	; 0x224a <GetSwitchStatus+0x2c>
		else											SwitchArray[0] = SWITCH_OFF;
    2246:	10 92 14 05 	sts	0x0514, r1
	#endif
	#if (USING_SWITCH > 1)
		if( !(*SWITCH_1_PORT.PIN & (1<<SWITCH_1_BIT)))	SwitchArray[1] = SWITCH_ON;
    224a:	80 91 ad 05 	lds	r24, 0x05AD
    224e:	90 91 ae 05 	lds	r25, 0x05AE
    2252:	fc 01       	movw	r30, r24
    2254:	80 81       	ld	r24, Z
    2256:	88 2f       	mov	r24, r24
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	84 70       	andi	r24, 0x04	; 4
    225c:	90 70       	andi	r25, 0x00	; 0
    225e:	00 97       	sbiw	r24, 0x00	; 0
    2260:	21 f4       	brne	.+8      	; 0x226a <GetSwitchStatus+0x4c>
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	80 93 15 05 	sts	0x0515, r24
    2268:	02 c0       	rjmp	.+4      	; 0x226e <GetSwitchStatus+0x50>
		else											SwitchArray[1] = SWITCH_OFF;
    226a:	10 92 15 05 	sts	0x0515, r1
	#endif
	#if (USING_SWITCH > 2)
		if( !(*SWITCH_2_PORT.PIN & (1<<SWITCH_2_BIT)))	SwitchArray[2] = SWITCH_ON;
    226e:	80 91 d1 05 	lds	r24, 0x05D1
    2272:	90 91 d2 05 	lds	r25, 0x05D2
    2276:	fc 01       	movw	r30, r24
    2278:	80 81       	ld	r24, Z
    227a:	88 2f       	mov	r24, r24
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	82 70       	andi	r24, 0x02	; 2
    2280:	90 70       	andi	r25, 0x00	; 0
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	21 f4       	brne	.+8      	; 0x228e <GetSwitchStatus+0x70>
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	80 93 16 05 	sts	0x0516, r24
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <GetSwitchStatus+0x74>
		else											SwitchArray[2] = SWITCH_OFF;
    228e:	10 92 16 05 	sts	0x0516, r1
	#endif
	#if (USING_SWITCH > 3)
		if( !(*SWITCH_3_PORT.PIN & (1<<SWITCH_3_BIT)))	SwitchArray[3] = SWITCH_ON;
    2292:	80 91 b9 05 	lds	r24, 0x05B9
    2296:	90 91 ba 05 	lds	r25, 0x05BA
    229a:	fc 01       	movw	r30, r24
    229c:	80 81       	ld	r24, Z
    229e:	88 2f       	mov	r24, r24
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	81 70       	andi	r24, 0x01	; 1
    22a4:	90 70       	andi	r25, 0x00	; 0
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	21 f4       	brne	.+8      	; 0x22b2 <GetSwitchStatus+0x94>
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	80 93 17 05 	sts	0x0517, r24
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <GetSwitchStatus+0x98>
		else											SwitchArray[3] = SWITCH_OFF;
    22b2:	10 92 17 05 	sts	0x0517, r1
	#endif
	#if (USING_SWITCH > 4)
		if( !(*SWITCH_4_PORT.PIN & (1<<SWITCH_4_BIT)))	SwitchArray[4] = SWITCH_ON;
    22b6:	80 91 b9 05 	lds	r24, 0x05B9
    22ba:	90 91 ba 05 	lds	r25, 0x05BA
    22be:	fc 01       	movw	r30, r24
    22c0:	80 81       	ld	r24, Z
    22c2:	88 2f       	mov	r24, r24
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	82 70       	andi	r24, 0x02	; 2
    22c8:	90 70       	andi	r25, 0x00	; 0
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	21 f4       	brne	.+8      	; 0x22d6 <GetSwitchStatus+0xb8>
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	80 93 18 05 	sts	0x0518, r24
    22d4:	02 c0       	rjmp	.+4      	; 0x22da <GetSwitchStatus+0xbc>
		else											SwitchArray[4] = SWITCH_OFF;
    22d6:	10 92 18 05 	sts	0x0518, r1
	#endif
	#if (USING_SWITCH > 5)
		if( !(*SWITCH_5_PORT.PIN & (1<<SWITCH_5_BIT)))	SwitchArray[5] = SWITCH_ON;
    22da:	80 91 b9 05 	lds	r24, 0x05B9
    22de:	90 91 ba 05 	lds	r25, 0x05BA
    22e2:	fc 01       	movw	r30, r24
    22e4:	80 81       	ld	r24, Z
    22e6:	88 2f       	mov	r24, r24
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	84 70       	andi	r24, 0x04	; 4
    22ec:	90 70       	andi	r25, 0x00	; 0
    22ee:	00 97       	sbiw	r24, 0x00	; 0
    22f0:	21 f4       	brne	.+8      	; 0x22fa <GetSwitchStatus+0xdc>
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	80 93 19 05 	sts	0x0519, r24
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <GetSwitchStatus+0xe0>
		else											SwitchArray[5] = SWITCH_OFF;
    22fa:	10 92 19 05 	sts	0x0519, r1
	#endif
	#if (USING_SWITCH > 6)
		if( !(*SWITCH_6_PORT.PIN & (1<<SWITCH_6_BIT)))	SwitchArray[6] = SWITCH_ON;
    22fe:	80 91 b9 05 	lds	r24, 0x05B9
    2302:	90 91 ba 05 	lds	r25, 0x05BA
    2306:	fc 01       	movw	r30, r24
    2308:	80 81       	ld	r24, Z
    230a:	88 2f       	mov	r24, r24
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	88 70       	andi	r24, 0x08	; 8
    2310:	90 70       	andi	r25, 0x00	; 0
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	21 f4       	brne	.+8      	; 0x231e <GetSwitchStatus+0x100>
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	80 93 1a 05 	sts	0x051A, r24
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <GetSwitchStatus+0x104>
		else											SwitchArray[6] = SWITCH_OFF;
    231e:	10 92 1a 05 	sts	0x051A, r1
	#endif
	#if (USING_SWITCH > 7)
		if( !(*SWITCH_7_PORT.PIN & (1<<SWITCH_7_BIT)))	SwitchArray[7] = SWITCH_ON;
    2322:	80 91 b9 05 	lds	r24, 0x05B9
    2326:	90 91 ba 05 	lds	r25, 0x05BA
    232a:	fc 01       	movw	r30, r24
    232c:	80 81       	ld	r24, Z
    232e:	88 2f       	mov	r24, r24
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	80 71       	andi	r24, 0x10	; 16
    2334:	90 70       	andi	r25, 0x00	; 0
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	21 f4       	brne	.+8      	; 0x2342 <GetSwitchStatus+0x124>
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	80 93 1b 05 	sts	0x051B, r24
    2340:	02 c0       	rjmp	.+4      	; 0x2346 <GetSwitchStatus+0x128>
		else											SwitchArray[7] = SWITCH_OFF;
    2342:	10 92 1b 05 	sts	0x051B, r1
	#endif
	#if (USING_SWITCH > 8)
		if( !(*SWITCH_8_PORT.PIN & (1<<SWITCH_8_BIT)))	SwitchArray[8] = SWITCH_ON;
		else											SwitchArray[8] = SWITCH_OFF;
	#endif
}
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <SwitchStatusReset>:
#endif

#if defined(USE_SWITCH)
void SwitchStatusReset(void) {
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	0f 92       	push	r0
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
	uint8_t loop;
	
	for(loop=0; loop<USING_SWITCH; loop++) {
    2356:	19 82       	std	Y+1, r1	; 0x01
    2358:	0a c0       	rjmp	.+20     	; 0x236e <SwitchStatusReset+0x22>
		SwitchArray[loop] = SWITCH_OFF;
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	88 2f       	mov	r24, r24
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	8c 5e       	subi	r24, 0xEC	; 236
    2362:	9a 4f       	sbci	r25, 0xFA	; 250
    2364:	fc 01       	movw	r30, r24
    2366:	10 82       	st	Z, r1

#if defined(USE_SWITCH)
void SwitchStatusReset(void) {
	uint8_t loop;
	
	for(loop=0; loop<USING_SWITCH; loop++) {
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	8f 5f       	subi	r24, 0xFF	; 255
    236c:	89 83       	std	Y+1, r24	; 0x01
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	88 30       	cpi	r24, 0x08	; 8
    2372:	98 f3       	brcs	.-26     	; 0x235a <SwitchStatusReset+0xe>
		SwitchArray[loop] = SWITCH_OFF;
	}
}
    2374:	0f 90       	pop	r0
    2376:	cf 91       	pop	r28
    2378:	df 91       	pop	r29
    237a:	08 95       	ret

0000237c <GetDipSwitchStatus>:
#endif

#if (defined(USE_DIP_SWITCH) || defined(USE_MU))
uint8_t GetDipSwitchStatus(void) {
    237c:	df 93       	push	r29
    237e:	cf 93       	push	r28
    2380:	0f 92       	push	r0
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer;
	
	buffer = 0x00;
    2386:	19 82       	std	Y+1, r1	; 0x01
	
	if( !bit_is_set(*DIP_0_PORT.PIN, DIP_0_BIT) ) {
    2388:	80 91 cb 05 	lds	r24, 0x05CB
    238c:	90 91 cc 05 	lds	r25, 0x05CC
    2390:	fc 01       	movw	r30, r24
    2392:	80 81       	ld	r24, Z
    2394:	88 2f       	mov	r24, r24
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	80 71       	andi	r24, 0x10	; 16
    239a:	90 70       	andi	r25, 0x00	; 0
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	19 f4       	brne	.+6      	; 0x23a6 <GetDipSwitchStatus+0x2a>
		buffer |= DIP_0;
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	81 60       	ori	r24, 0x01	; 1
    23a4:	89 83       	std	Y+1, r24	; 0x01
	}
	if( !bit_is_set(*DIP_1_PORT.PIN, DIP_1_BIT) ) {
    23a6:	80 91 cb 05 	lds	r24, 0x05CB
    23aa:	90 91 cc 05 	lds	r25, 0x05CC
    23ae:	fc 01       	movw	r30, r24
    23b0:	80 81       	ld	r24, Z
    23b2:	88 2f       	mov	r24, r24
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	80 72       	andi	r24, 0x20	; 32
    23b8:	90 70       	andi	r25, 0x00	; 0
    23ba:	00 97       	sbiw	r24, 0x00	; 0
    23bc:	19 f4       	brne	.+6      	; 0x23c4 <GetDipSwitchStatus+0x48>
		buffer |= DIP_1;
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	82 60       	ori	r24, 0x02	; 2
    23c2:	89 83       	std	Y+1, r24	; 0x01
	}
	if( !bit_is_set(*DIP_2_PORT.PIN, DIP_2_BIT) ) {
    23c4:	80 91 cb 05 	lds	r24, 0x05CB
    23c8:	90 91 cc 05 	lds	r25, 0x05CC
    23cc:	fc 01       	movw	r30, r24
    23ce:	80 81       	ld	r24, Z
    23d0:	88 2f       	mov	r24, r24
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	80 74       	andi	r24, 0x40	; 64
    23d6:	90 70       	andi	r25, 0x00	; 0
    23d8:	00 97       	sbiw	r24, 0x00	; 0
    23da:	19 f4       	brne	.+6      	; 0x23e2 <GetDipSwitchStatus+0x66>
		buffer |= DIP_2;
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	84 60       	ori	r24, 0x04	; 4
    23e0:	89 83       	std	Y+1, r24	; 0x01
	}
	if( !bit_is_set(*DIP_3_PORT.PIN, DIP_3_BIT) ) {
    23e2:	80 91 cb 05 	lds	r24, 0x05CB
    23e6:	90 91 cc 05 	lds	r25, 0x05CC
    23ea:	fc 01       	movw	r30, r24
    23ec:	80 81       	ld	r24, Z
    23ee:	88 23       	and	r24, r24
    23f0:	1c f0       	brlt	.+6      	; 0x23f8 <GetDipSwitchStatus+0x7c>
		buffer |= DIP_3;
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	88 60       	ori	r24, 0x08	; 8
    23f6:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return buffer;
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    23fa:	0f 90       	pop	r0
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	08 95       	ret

00002402 <main>:
#include <avr/io.h>
#include "./System/Setup/SetupDef.h"
#include "./System/Initialize/InitializeDef.h"
#include "./System/Process/ProcessDef.h"

int main(void){
    2402:	df 93       	push	r29
    2404:	cf 93       	push	r28
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
	SystemSetup();
    240a:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <SystemSetup>
	SystemInitialize();
    240e:	0e 94 05 18 	call	0x300a	; 0x300a <SystemInitialize>
	SystemProcess();	
    2412:	0e 94 2e 19 	call	0x325c	; 0x325c <SystemProcess>
	while(1);	
    2416:	ff cf       	rjmp	.-2      	; 0x2416 <main+0x14>

00002418 <AirInitialize>:
#include "./AirDef.h"

bool AirArray[USING_AIR];
void (*AirFunctions[USING_AIR])(bool status);

void AirInitialize(void) {
    2418:	df 93       	push	r29
    241a:	cf 93       	push	r28
    241c:	0f 92       	push	r0
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
	uint8_t loop;
	
	#if defined(USE_AIR00)
		sbi(*AIR_0_PORT.DDR, AIR_0_BIT);
    2422:	80 91 bb 05 	lds	r24, 0x05BB
    2426:	90 91 bc 05 	lds	r25, 0x05BC
    242a:	20 91 bb 05 	lds	r18, 0x05BB
    242e:	30 91 bc 05 	lds	r19, 0x05BC
    2432:	f9 01       	movw	r30, r18
    2434:	20 81       	ld	r18, Z
    2436:	20 62       	ori	r18, 0x20	; 32
    2438:	fc 01       	movw	r30, r24
    243a:	20 83       	st	Z, r18
		AirFunctions[0] = SetActionAir0;
    243c:	84 e9       	ldi	r24, 0x94	; 148
    243e:	92 e1       	ldi	r25, 0x12	; 18
    2440:	90 93 1d 05 	sts	0x051D, r25
    2444:	80 93 1c 05 	sts	0x051C, r24
	#endif
	#if defined(USE_AIR01)
		sbi(*AIR_1_PORT.DDR, AIR_1_BIT);
    2448:	80 91 bb 05 	lds	r24, 0x05BB
    244c:	90 91 bc 05 	lds	r25, 0x05BC
    2450:	20 91 bb 05 	lds	r18, 0x05BB
    2454:	30 91 bc 05 	lds	r19, 0x05BC
    2458:	f9 01       	movw	r30, r18
    245a:	20 81       	ld	r18, Z
    245c:	20 64       	ori	r18, 0x40	; 64
    245e:	fc 01       	movw	r30, r24
    2460:	20 83       	st	Z, r18
		AirFunctions[1] = SetActionAir1;
    2462:	8c eb       	ldi	r24, 0xBC	; 188
    2464:	92 e1       	ldi	r25, 0x12	; 18
    2466:	90 93 1f 05 	sts	0x051F, r25
    246a:	80 93 1e 05 	sts	0x051E, r24
	#endif
	#if defined(USE_AIR02)
		sbi(*AIR_2_PORT.DDR, AIR_2_BIT);
    246e:	80 91 bb 05 	lds	r24, 0x05BB
    2472:	90 91 bc 05 	lds	r25, 0x05BC
    2476:	20 91 bb 05 	lds	r18, 0x05BB
    247a:	30 91 bc 05 	lds	r19, 0x05BC
    247e:	f9 01       	movw	r30, r18
    2480:	20 81       	ld	r18, Z
    2482:	20 68       	ori	r18, 0x80	; 128
    2484:	fc 01       	movw	r30, r24
    2486:	20 83       	st	Z, r18
		AirFunctions[2] = SetActionAir2;
    2488:	84 ee       	ldi	r24, 0xE4	; 228
    248a:	92 e1       	ldi	r25, 0x12	; 18
    248c:	90 93 21 05 	sts	0x0521, r25
    2490:	80 93 20 05 	sts	0x0520, r24
	#endif
	#if defined(USE_AIR03)
		sbi(*AIR_3_PORT.DDR, AIR_3_BIT);
    2494:	80 91 cd 05 	lds	r24, 0x05CD
    2498:	90 91 ce 05 	lds	r25, 0x05CE
    249c:	20 91 cd 05 	lds	r18, 0x05CD
    24a0:	30 91 ce 05 	lds	r19, 0x05CE
    24a4:	f9 01       	movw	r30, r18
    24a6:	20 81       	ld	r18, Z
    24a8:	21 60       	ori	r18, 0x01	; 1
    24aa:	fc 01       	movw	r30, r24
    24ac:	20 83       	st	Z, r18
		AirFunctions[3] = SetActionAir3;
    24ae:	8c e0       	ldi	r24, 0x0C	; 12
    24b0:	93 e1       	ldi	r25, 0x13	; 19
    24b2:	90 93 23 05 	sts	0x0523, r25
    24b6:	80 93 22 05 	sts	0x0522, r24
		sbi(*AIR_9_PORT.DDR, AIR_9_BIT);
		AirFunctions[9] = SetActionAir9;
	#endif

// エア出力状態配列の初期化
	for(loop=0; loop<USING_AIR; loop++) {
    24ba:	19 82       	std	Y+1, r1	; 0x01
    24bc:	0a c0       	rjmp	.+20     	; 0x24d2 <AirInitialize+0xba>
		AirArray[loop] = AIR_OFF;
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	88 2f       	mov	r24, r24
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	8c 5d       	subi	r24, 0xDC	; 220
    24c6:	9a 4f       	sbci	r25, 0xFA	; 250
    24c8:	fc 01       	movw	r30, r24
    24ca:	10 82       	st	Z, r1
		sbi(*AIR_9_PORT.DDR, AIR_9_BIT);
		AirFunctions[9] = SetActionAir9;
	#endif

// エア出力状態配列の初期化
	for(loop=0; loop<USING_AIR; loop++) {
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	8f 5f       	subi	r24, 0xFF	; 255
    24d0:	89 83       	std	Y+1, r24	; 0x01
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	84 30       	cpi	r24, 0x04	; 4
    24d6:	98 f3       	brcs	.-26     	; 0x24be <AirInitialize+0xa6>
		AirArray[loop] = AIR_OFF;
	}
	
	return ;
}
    24d8:	0f 90       	pop	r0
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	08 95       	ret

000024e0 <AirUpdate>:

void AirUpdate(void) {
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	0f 92       	push	r0
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
// 変数を宣言
	uint8_t loop;
// 各ポートの状態を更新
	for(loop=0; loop<USING_AIR; loop++) {
    24ea:	19 82       	std	Y+1, r1	; 0x01
    24ec:	16 c0       	rjmp	.+44     	; 0x251a <AirUpdate+0x3a>
		AirFunctions[loop](AirArray[loop]);
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	88 2f       	mov	r24, r24
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	88 0f       	add	r24, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	84 5e       	subi	r24, 0xE4	; 228
    24fa:	9a 4f       	sbci	r25, 0xFA	; 250
    24fc:	fc 01       	movw	r30, r24
    24fe:	20 81       	ld	r18, Z
    2500:	31 81       	ldd	r19, Z+1	; 0x01
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	88 2f       	mov	r24, r24
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	8c 5d       	subi	r24, 0xDC	; 220
    250a:	9a 4f       	sbci	r25, 0xFA	; 250
    250c:	fc 01       	movw	r30, r24
    250e:	80 81       	ld	r24, Z
    2510:	f9 01       	movw	r30, r18
    2512:	09 95       	icall

void AirUpdate(void) {
// 変数を宣言
	uint8_t loop;
// 各ポートの状態を更新
	for(loop=0; loop<USING_AIR; loop++) {
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	8f 5f       	subi	r24, 0xFF	; 255
    2518:	89 83       	std	Y+1, r24	; 0x01
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	84 30       	cpi	r24, 0x04	; 4
    251e:	38 f3       	brcs	.-50     	; 0x24ee <AirUpdate+0xe>
		AirFunctions[loop](AirArray[loop]);
	}
}
    2520:	0f 90       	pop	r0
    2522:	cf 91       	pop	r28
    2524:	df 91       	pop	r29
    2526:	08 95       	ret

00002528 <SetActionAir0>:

#if defined(USE_AIR00)
static void SetActionAir0(bool status) {
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	0f 92       	push	r0
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
    2532:	89 83       	std	Y+1, r24	; 0x01
	if(status)	cbi(*AIR_0_PORT.PORT, AIR_0_BIT);
    2534:	89 81       	ldd	r24, Y+1	; 0x01
    2536:	88 23       	and	r24, r24
    2538:	71 f0       	breq	.+28     	; 0x2556 <SetActionAir0+0x2e>
    253a:	80 91 bd 05 	lds	r24, 0x05BD
    253e:	90 91 be 05 	lds	r25, 0x05BE
    2542:	20 91 bd 05 	lds	r18, 0x05BD
    2546:	30 91 be 05 	lds	r19, 0x05BE
    254a:	f9 01       	movw	r30, r18
    254c:	20 81       	ld	r18, Z
    254e:	2f 7d       	andi	r18, 0xDF	; 223
    2550:	fc 01       	movw	r30, r24
    2552:	20 83       	st	Z, r18
    2554:	0d c0       	rjmp	.+26     	; 0x2570 <SetActionAir0+0x48>
	else		sbi(*AIR_0_PORT.PORT, AIR_0_BIT);
    2556:	80 91 bd 05 	lds	r24, 0x05BD
    255a:	90 91 be 05 	lds	r25, 0x05BE
    255e:	20 91 bd 05 	lds	r18, 0x05BD
    2562:	30 91 be 05 	lds	r19, 0x05BE
    2566:	f9 01       	movw	r30, r18
    2568:	20 81       	ld	r18, Z
    256a:	20 62       	ori	r18, 0x20	; 32
    256c:	fc 01       	movw	r30, r24
    256e:	20 83       	st	Z, r18
}
    2570:	0f 90       	pop	r0
    2572:	cf 91       	pop	r28
    2574:	df 91       	pop	r29
    2576:	08 95       	ret

00002578 <SetActionAir1>:
#endif

#if defined(USE_AIR01)
static void SetActionAir1(bool status) {
    2578:	df 93       	push	r29
    257a:	cf 93       	push	r28
    257c:	0f 92       	push	r0
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	89 83       	std	Y+1, r24	; 0x01
	if(status)	cbi(*AIR_1_PORT.PORT, AIR_1_BIT);
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	88 23       	and	r24, r24
    2588:	71 f0       	breq	.+28     	; 0x25a6 <SetActionAir1+0x2e>
    258a:	80 91 bd 05 	lds	r24, 0x05BD
    258e:	90 91 be 05 	lds	r25, 0x05BE
    2592:	20 91 bd 05 	lds	r18, 0x05BD
    2596:	30 91 be 05 	lds	r19, 0x05BE
    259a:	f9 01       	movw	r30, r18
    259c:	20 81       	ld	r18, Z
    259e:	2f 7b       	andi	r18, 0xBF	; 191
    25a0:	fc 01       	movw	r30, r24
    25a2:	20 83       	st	Z, r18
    25a4:	0d c0       	rjmp	.+26     	; 0x25c0 <SetActionAir1+0x48>
	else		sbi(*AIR_1_PORT.PORT, AIR_1_BIT);
    25a6:	80 91 bd 05 	lds	r24, 0x05BD
    25aa:	90 91 be 05 	lds	r25, 0x05BE
    25ae:	20 91 bd 05 	lds	r18, 0x05BD
    25b2:	30 91 be 05 	lds	r19, 0x05BE
    25b6:	f9 01       	movw	r30, r18
    25b8:	20 81       	ld	r18, Z
    25ba:	20 64       	ori	r18, 0x40	; 64
    25bc:	fc 01       	movw	r30, r24
    25be:	20 83       	st	Z, r18
}
    25c0:	0f 90       	pop	r0
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	08 95       	ret

000025c8 <SetActionAir2>:
#endif

#if defined(USE_AIR02)
static void SetActionAir2(bool status) {
    25c8:	df 93       	push	r29
    25ca:	cf 93       	push	r28
    25cc:	0f 92       	push	r0
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
    25d2:	89 83       	std	Y+1, r24	; 0x01
	if(status)	cbi(*AIR_2_PORT.PORT, AIR_2_BIT);
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	88 23       	and	r24, r24
    25d8:	71 f0       	breq	.+28     	; 0x25f6 <SetActionAir2+0x2e>
    25da:	80 91 bd 05 	lds	r24, 0x05BD
    25de:	90 91 be 05 	lds	r25, 0x05BE
    25e2:	20 91 bd 05 	lds	r18, 0x05BD
    25e6:	30 91 be 05 	lds	r19, 0x05BE
    25ea:	f9 01       	movw	r30, r18
    25ec:	20 81       	ld	r18, Z
    25ee:	2f 77       	andi	r18, 0x7F	; 127
    25f0:	fc 01       	movw	r30, r24
    25f2:	20 83       	st	Z, r18
    25f4:	0d c0       	rjmp	.+26     	; 0x2610 <SetActionAir2+0x48>
	else		sbi(*AIR_2_PORT.PORT, AIR_2_BIT);
    25f6:	80 91 bd 05 	lds	r24, 0x05BD
    25fa:	90 91 be 05 	lds	r25, 0x05BE
    25fe:	20 91 bd 05 	lds	r18, 0x05BD
    2602:	30 91 be 05 	lds	r19, 0x05BE
    2606:	f9 01       	movw	r30, r18
    2608:	20 81       	ld	r18, Z
    260a:	20 68       	ori	r18, 0x80	; 128
    260c:	fc 01       	movw	r30, r24
    260e:	20 83       	st	Z, r18
}
    2610:	0f 90       	pop	r0
    2612:	cf 91       	pop	r28
    2614:	df 91       	pop	r29
    2616:	08 95       	ret

00002618 <SetActionAir3>:
#endif

#if defined(USE_AIR03)
static void SetActionAir3(bool status) {
    2618:	df 93       	push	r29
    261a:	cf 93       	push	r28
    261c:	0f 92       	push	r0
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    2622:	89 83       	std	Y+1, r24	; 0x01
	if(status)	cbi(*AIR_3_PORT.PORT, AIR_3_BIT);
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	88 23       	and	r24, r24
    2628:	71 f0       	breq	.+28     	; 0x2646 <SetActionAir3+0x2e>
    262a:	80 91 cf 05 	lds	r24, 0x05CF
    262e:	90 91 d0 05 	lds	r25, 0x05D0
    2632:	20 91 cf 05 	lds	r18, 0x05CF
    2636:	30 91 d0 05 	lds	r19, 0x05D0
    263a:	f9 01       	movw	r30, r18
    263c:	20 81       	ld	r18, Z
    263e:	2e 7f       	andi	r18, 0xFE	; 254
    2640:	fc 01       	movw	r30, r24
    2642:	20 83       	st	Z, r18
    2644:	0d c0       	rjmp	.+26     	; 0x2660 <SetActionAir3+0x48>
	else		sbi(*AIR_3_PORT.PORT, AIR_3_BIT);
    2646:	80 91 cf 05 	lds	r24, 0x05CF
    264a:	90 91 d0 05 	lds	r25, 0x05D0
    264e:	20 91 cf 05 	lds	r18, 0x05CF
    2652:	30 91 d0 05 	lds	r19, 0x05D0
    2656:	f9 01       	movw	r30, r18
    2658:	20 81       	ld	r18, Z
    265a:	21 60       	ori	r18, 0x01	; 1
    265c:	fc 01       	movw	r30, r24
    265e:	20 83       	st	Z, r18
}
    2660:	0f 90       	pop	r0
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <BuzzerInitialize>:
#include "./Buzzer.h"
#include "./BuzzerDef.h"

bool BuzzerStatus;

void BuzzerInitialize() {
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
	sbi(*BUZZER_PORT.DDR, BUZZER_BIT);
    2670:	80 91 a9 05 	lds	r24, 0x05A9
    2674:	90 91 aa 05 	lds	r25, 0x05AA
    2678:	20 91 a9 05 	lds	r18, 0x05A9
    267c:	30 91 aa 05 	lds	r19, 0x05AA
    2680:	f9 01       	movw	r30, r18
    2682:	20 81       	ld	r18, Z
    2684:	22 60       	ori	r18, 0x02	; 2
    2686:	fc 01       	movw	r30, r24
    2688:	20 83       	st	Z, r18
	cbi(*BUZZER_PORT.PORT, BUZZER_BIT);
    268a:	80 91 ab 05 	lds	r24, 0x05AB
    268e:	90 91 ac 05 	lds	r25, 0x05AC
    2692:	20 91 ab 05 	lds	r18, 0x05AB
    2696:	30 91 ac 05 	lds	r19, 0x05AC
    269a:	f9 01       	movw	r30, r18
    269c:	20 81       	ld	r18, Z
    269e:	2d 7f       	andi	r18, 0xFD	; 253
    26a0:	fc 01       	movw	r30, r24
    26a2:	20 83       	st	Z, r18
	BuzzerStatus = BUZZER_OFF;
    26a4:	10 92 28 05 	sts	0x0528, r1
}
    26a8:	cf 91       	pop	r28
    26aa:	df 91       	pop	r29
    26ac:	08 95       	ret

000026ae <BuzzerUpdate>:

void BuzzerUpdate(void) {
    26ae:	df 93       	push	r29
    26b0:	cf 93       	push	r28
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
	Buzzer(BuzzerStatus);
    26b6:	80 91 28 05 	lds	r24, 0x0528
    26ba:	0e 94 62 13 	call	0x26c4	; 0x26c4 <Buzzer>
}
    26be:	cf 91       	pop	r28
    26c0:	df 91       	pop	r29
    26c2:	08 95       	ret

000026c4 <Buzzer>:

static void Buzzer(bool status) {
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	0f 92       	push	r0
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
    26ce:	89 83       	std	Y+1, r24	; 0x01
	if(status)	sbi(*BUZZER_PORT.PORT, BUZZER_BIT);
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	88 23       	and	r24, r24
    26d4:	71 f0       	breq	.+28     	; 0x26f2 <Buzzer+0x2e>
    26d6:	80 91 ab 05 	lds	r24, 0x05AB
    26da:	90 91 ac 05 	lds	r25, 0x05AC
    26de:	20 91 ab 05 	lds	r18, 0x05AB
    26e2:	30 91 ac 05 	lds	r19, 0x05AC
    26e6:	f9 01       	movw	r30, r18
    26e8:	20 81       	ld	r18, Z
    26ea:	22 60       	ori	r18, 0x02	; 2
    26ec:	fc 01       	movw	r30, r24
    26ee:	20 83       	st	Z, r18
    26f0:	0d c0       	rjmp	.+26     	; 0x270c <Buzzer+0x48>
	else		cbi(*BUZZER_PORT.PORT, BUZZER_BIT);
    26f2:	80 91 ab 05 	lds	r24, 0x05AB
    26f6:	90 91 ac 05 	lds	r25, 0x05AC
    26fa:	20 91 ab 05 	lds	r18, 0x05AB
    26fe:	30 91 ac 05 	lds	r19, 0x05AC
    2702:	f9 01       	movw	r30, r18
    2704:	20 81       	ld	r18, Z
    2706:	2d 7f       	andi	r18, 0xFD	; 253
    2708:	fc 01       	movw	r30, r24
    270a:	20 83       	st	Z, r18
}
    270c:	0f 90       	pop	r0
    270e:	cf 91       	pop	r28
    2710:	df 91       	pop	r29
    2712:	08 95       	ret

00002714 <LedInitialize>:

volatile bool LedArray[USING_LED];
void (*Led4bitPack[5])(uint8_t value);
void (*LedFunctions[USING_LED])(bool status);

void LedInitialize(void) {
    2714:	df 93       	push	r29
    2716:	cf 93       	push	r28
    2718:	0f 92       	push	r0
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
	uint8_t loop;
	
	#if defined(USE_LED00)
		sbi(*LED_00_PORT.DDR, LED_00_BIT);
    271e:	80 91 a9 05 	lds	r24, 0x05A9
    2722:	90 91 aa 05 	lds	r25, 0x05AA
    2726:	20 91 a9 05 	lds	r18, 0x05A9
    272a:	30 91 aa 05 	lds	r19, 0x05AA
    272e:	f9 01       	movw	r30, r18
    2730:	20 81       	ld	r18, Z
    2732:	20 68       	ori	r18, 0x80	; 128
    2734:	fc 01       	movw	r30, r24
    2736:	20 83       	st	Z, r18
		LedFunctions[0] = LED0;
    2738:	82 e1       	ldi	r24, 0x12	; 18
    273a:	94 e1       	ldi	r25, 0x14	; 20
    273c:	90 93 34 05 	sts	0x0534, r25
    2740:	80 93 33 05 	sts	0x0533, r24
	#endif
	#if defined(USE_LED01)
		sbi(*LED_01_PORT.DDR, LED_01_BIT);
    2744:	80 91 a9 05 	lds	r24, 0x05A9
    2748:	90 91 aa 05 	lds	r25, 0x05AA
    274c:	20 91 a9 05 	lds	r18, 0x05A9
    2750:	30 91 aa 05 	lds	r19, 0x05AA
    2754:	f9 01       	movw	r30, r18
    2756:	20 81       	ld	r18, Z
    2758:	20 64       	ori	r18, 0x40	; 64
    275a:	fc 01       	movw	r30, r24
    275c:	20 83       	st	Z, r18
		LedFunctions[1] = LED1;
    275e:	8a e3       	ldi	r24, 0x3A	; 58
    2760:	94 e1       	ldi	r25, 0x14	; 20
    2762:	90 93 36 05 	sts	0x0536, r25
    2766:	80 93 35 05 	sts	0x0535, r24
	#endif
	#if defined(USE_LED02)
		sbi(*LED_02_PORT.DDR, LED_02_BIT);
    276a:	80 91 a9 05 	lds	r24, 0x05A9
    276e:	90 91 aa 05 	lds	r25, 0x05AA
    2772:	20 91 a9 05 	lds	r18, 0x05A9
    2776:	30 91 aa 05 	lds	r19, 0x05AA
    277a:	f9 01       	movw	r30, r18
    277c:	20 81       	ld	r18, Z
    277e:	20 62       	ori	r18, 0x20	; 32
    2780:	fc 01       	movw	r30, r24
    2782:	20 83       	st	Z, r18
		LedFunctions[2] = LED2;
    2784:	82 e6       	ldi	r24, 0x62	; 98
    2786:	94 e1       	ldi	r25, 0x14	; 20
    2788:	90 93 38 05 	sts	0x0538, r25
    278c:	80 93 37 05 	sts	0x0537, r24
	#endif
	#if defined(USE_LED03)
		sbi(*LED_03_PORT.DDR, LED_03_BIT);
    2790:	80 91 a9 05 	lds	r24, 0x05A9
    2794:	90 91 aa 05 	lds	r25, 0x05AA
    2798:	20 91 a9 05 	lds	r18, 0x05A9
    279c:	30 91 aa 05 	lds	r19, 0x05AA
    27a0:	f9 01       	movw	r30, r18
    27a2:	20 81       	ld	r18, Z
    27a4:	20 61       	ori	r18, 0x10	; 16
    27a6:	fc 01       	movw	r30, r24
    27a8:	20 83       	st	Z, r18
		LedFunctions[3] = LED3;
    27aa:	8a e8       	ldi	r24, 0x8A	; 138
    27ac:	94 e1       	ldi	r25, 0x14	; 20
    27ae:	90 93 3a 05 	sts	0x053A, r25
    27b2:	80 93 39 05 	sts	0x0539, r24
	#endif
	#if defined(USE_LED17) && defined(USE_LED18) && defined(USE_LED19) && defined(USE_LED20)
		Led4bitPack[4] = Led4bitPack4;
	#endif
	
	for(loop=0; loop<USING_LED; loop++) {
    27b6:	19 82       	std	Y+1, r1	; 0x01
    27b8:	0a c0       	rjmp	.+20     	; 0x27ce <LedInitialize+0xba>
		LedArray[loop] = LED_OFF;
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	88 2f       	mov	r24, r24
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	85 5c       	subi	r24, 0xC5	; 197
    27c2:	9a 4f       	sbci	r25, 0xFA	; 250
    27c4:	fc 01       	movw	r30, r24
    27c6:	10 82       	st	Z, r1
	#endif
	#if defined(USE_LED17) && defined(USE_LED18) && defined(USE_LED19) && defined(USE_LED20)
		Led4bitPack[4] = Led4bitPack4;
	#endif
	
	for(loop=0; loop<USING_LED; loop++) {
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
    27ca:	8f 5f       	subi	r24, 0xFF	; 255
    27cc:	89 83       	std	Y+1, r24	; 0x01
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	84 30       	cpi	r24, 0x04	; 4
    27d2:	98 f3       	brcs	.-26     	; 0x27ba <LedInitialize+0xa6>
		LedArray[loop] = LED_OFF;
	}
}
    27d4:	0f 90       	pop	r0
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	08 95       	ret

000027dc <LedUpdate>:

void LedUpdate(void) {
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	0f 92       	push	r0
    27e2:	cd b7       	in	r28, 0x3d	; 61
    27e4:	de b7       	in	r29, 0x3e	; 62
	uint8_t loop;
	
	for(loop=0; loop<USING_LED; loop++) {
    27e6:	19 82       	std	Y+1, r1	; 0x01
    27e8:	16 c0       	rjmp	.+44     	; 0x2816 <LedUpdate+0x3a>
		LedFunctions[loop](LedArray[loop]);
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	88 2f       	mov	r24, r24
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	88 0f       	add	r24, r24
    27f2:	99 1f       	adc	r25, r25
    27f4:	8d 5c       	subi	r24, 0xCD	; 205
    27f6:	9a 4f       	sbci	r25, 0xFA	; 250
    27f8:	fc 01       	movw	r30, r24
    27fa:	20 81       	ld	r18, Z
    27fc:	31 81       	ldd	r19, Z+1	; 0x01
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	88 2f       	mov	r24, r24
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	85 5c       	subi	r24, 0xC5	; 197
    2806:	9a 4f       	sbci	r25, 0xFA	; 250
    2808:	fc 01       	movw	r30, r24
    280a:	80 81       	ld	r24, Z
    280c:	f9 01       	movw	r30, r18
    280e:	09 95       	icall
}

void LedUpdate(void) {
	uint8_t loop;
	
	for(loop=0; loop<USING_LED; loop++) {
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	8f 5f       	subi	r24, 0xFF	; 255
    2814:	89 83       	std	Y+1, r24	; 0x01
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	84 30       	cpi	r24, 0x04	; 4
    281a:	38 f3       	brcs	.-50     	; 0x27ea <LedUpdate+0xe>
		LedFunctions[loop](LedArray[loop]);
	}
}
    281c:	0f 90       	pop	r0
    281e:	cf 91       	pop	r28
    2820:	df 91       	pop	r29
    2822:	08 95       	ret

00002824 <LED0>:

#if defined(USE_LED00)
static void LED0(bool status) {
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	0f 92       	push	r0
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	89 83       	std	Y+1, r24	; 0x01
	if(status)	cbi(*LED_00_PORT.PORT, LED_00_BIT);
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	88 23       	and	r24, r24
    2834:	71 f0       	breq	.+28     	; 0x2852 <LED0+0x2e>
    2836:	80 91 ab 05 	lds	r24, 0x05AB
    283a:	90 91 ac 05 	lds	r25, 0x05AC
    283e:	20 91 ab 05 	lds	r18, 0x05AB
    2842:	30 91 ac 05 	lds	r19, 0x05AC
    2846:	f9 01       	movw	r30, r18
    2848:	20 81       	ld	r18, Z
    284a:	2f 77       	andi	r18, 0x7F	; 127
    284c:	fc 01       	movw	r30, r24
    284e:	20 83       	st	Z, r18
    2850:	0d c0       	rjmp	.+26     	; 0x286c <LED0+0x48>
	else		sbi(*LED_00_PORT.PORT, LED_00_BIT);
    2852:	80 91 ab 05 	lds	r24, 0x05AB
    2856:	90 91 ac 05 	lds	r25, 0x05AC
    285a:	20 91 ab 05 	lds	r18, 0x05AB
    285e:	30 91 ac 05 	lds	r19, 0x05AC
    2862:	f9 01       	movw	r30, r18
    2864:	20 81       	ld	r18, Z
    2866:	20 68       	ori	r18, 0x80	; 128
    2868:	fc 01       	movw	r30, r24
    286a:	20 83       	st	Z, r18
}
    286c:	0f 90       	pop	r0
    286e:	cf 91       	pop	r28
    2870:	df 91       	pop	r29
    2872:	08 95       	ret

00002874 <LED1>:
#endif

#if defined(USE_LED01)
static void LED1(bool status) {
    2874:	df 93       	push	r29
    2876:	cf 93       	push	r28
    2878:	0f 92       	push	r0
    287a:	cd b7       	in	r28, 0x3d	; 61
    287c:	de b7       	in	r29, 0x3e	; 62
    287e:	89 83       	std	Y+1, r24	; 0x01
	if(status)	cbi(*LED_01_PORT.PORT, LED_01_BIT);
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	88 23       	and	r24, r24
    2884:	71 f0       	breq	.+28     	; 0x28a2 <LED1+0x2e>
    2886:	80 91 ab 05 	lds	r24, 0x05AB
    288a:	90 91 ac 05 	lds	r25, 0x05AC
    288e:	20 91 ab 05 	lds	r18, 0x05AB
    2892:	30 91 ac 05 	lds	r19, 0x05AC
    2896:	f9 01       	movw	r30, r18
    2898:	20 81       	ld	r18, Z
    289a:	2f 7b       	andi	r18, 0xBF	; 191
    289c:	fc 01       	movw	r30, r24
    289e:	20 83       	st	Z, r18
    28a0:	0d c0       	rjmp	.+26     	; 0x28bc <LED1+0x48>
	else		sbi(*LED_01_PORT.PORT, LED_01_BIT);
    28a2:	80 91 ab 05 	lds	r24, 0x05AB
    28a6:	90 91 ac 05 	lds	r25, 0x05AC
    28aa:	20 91 ab 05 	lds	r18, 0x05AB
    28ae:	30 91 ac 05 	lds	r19, 0x05AC
    28b2:	f9 01       	movw	r30, r18
    28b4:	20 81       	ld	r18, Z
    28b6:	20 64       	ori	r18, 0x40	; 64
    28b8:	fc 01       	movw	r30, r24
    28ba:	20 83       	st	Z, r18
}
    28bc:	0f 90       	pop	r0
    28be:	cf 91       	pop	r28
    28c0:	df 91       	pop	r29
    28c2:	08 95       	ret

000028c4 <LED2>:
#endif

#if defined(USE_LED02)
static void LED2(bool status) {
    28c4:	df 93       	push	r29
    28c6:	cf 93       	push	r28
    28c8:	0f 92       	push	r0
    28ca:	cd b7       	in	r28, 0x3d	; 61
    28cc:	de b7       	in	r29, 0x3e	; 62
    28ce:	89 83       	std	Y+1, r24	; 0x01
	if(status)	cbi(*LED_02_PORT.PORT, LED_02_BIT);
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	88 23       	and	r24, r24
    28d4:	71 f0       	breq	.+28     	; 0x28f2 <LED2+0x2e>
    28d6:	80 91 ab 05 	lds	r24, 0x05AB
    28da:	90 91 ac 05 	lds	r25, 0x05AC
    28de:	20 91 ab 05 	lds	r18, 0x05AB
    28e2:	30 91 ac 05 	lds	r19, 0x05AC
    28e6:	f9 01       	movw	r30, r18
    28e8:	20 81       	ld	r18, Z
    28ea:	2f 7d       	andi	r18, 0xDF	; 223
    28ec:	fc 01       	movw	r30, r24
    28ee:	20 83       	st	Z, r18
    28f0:	0d c0       	rjmp	.+26     	; 0x290c <LED2+0x48>
	else		sbi(*LED_02_PORT.PORT, LED_02_BIT);
    28f2:	80 91 ab 05 	lds	r24, 0x05AB
    28f6:	90 91 ac 05 	lds	r25, 0x05AC
    28fa:	20 91 ab 05 	lds	r18, 0x05AB
    28fe:	30 91 ac 05 	lds	r19, 0x05AC
    2902:	f9 01       	movw	r30, r18
    2904:	20 81       	ld	r18, Z
    2906:	20 62       	ori	r18, 0x20	; 32
    2908:	fc 01       	movw	r30, r24
    290a:	20 83       	st	Z, r18
}
    290c:	0f 90       	pop	r0
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	08 95       	ret

00002914 <LED3>:
#endif

#if defined(USE_LED03)
static void LED3(bool status) {
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	0f 92       	push	r0
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
    291e:	89 83       	std	Y+1, r24	; 0x01
	if(status)	cbi(*LED_03_PORT.PORT, LED_03_BIT);
    2920:	89 81       	ldd	r24, Y+1	; 0x01
    2922:	88 23       	and	r24, r24
    2924:	71 f0       	breq	.+28     	; 0x2942 <LED3+0x2e>
    2926:	80 91 ab 05 	lds	r24, 0x05AB
    292a:	90 91 ac 05 	lds	r25, 0x05AC
    292e:	20 91 ab 05 	lds	r18, 0x05AB
    2932:	30 91 ac 05 	lds	r19, 0x05AC
    2936:	f9 01       	movw	r30, r18
    2938:	20 81       	ld	r18, Z
    293a:	2f 7e       	andi	r18, 0xEF	; 239
    293c:	fc 01       	movw	r30, r24
    293e:	20 83       	st	Z, r18
    2940:	0d c0       	rjmp	.+26     	; 0x295c <LED3+0x48>
	else		sbi(*LED_03_PORT.PORT, LED_03_BIT);
    2942:	80 91 ab 05 	lds	r24, 0x05AB
    2946:	90 91 ac 05 	lds	r25, 0x05AC
    294a:	20 91 ab 05 	lds	r18, 0x05AB
    294e:	30 91 ac 05 	lds	r19, 0x05AC
    2952:	f9 01       	movw	r30, r18
    2954:	20 81       	ld	r18, Z
    2956:	20 61       	ori	r18, 0x10	; 16
    2958:	fc 01       	movw	r30, r24
    295a:	20 83       	st	Z, r18
}
    295c:	0f 90       	pop	r0
    295e:	cf 91       	pop	r28
    2960:	df 91       	pop	r29
    2962:	08 95       	ret

00002964 <MotorSetup>:

struct Motor MotorArray[USING_MOTOR];
void (*PwmTimerInitialize[6])(uint8_t port);
void (*MotorFunctions[USING_MOTOR])(uint8_t status, uint8_t pwm);

void MotorSetup(void) {
    2964:	df 93       	push	r29
    2966:	cf 93       	push	r28
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
	#if defined(USE_TIMER0)
		PwmTimerInitialize[0] = PwmTimerInitialize0;
    296c:	83 e7       	ldi	r24, 0x73	; 115
    296e:	95 e1       	ldi	r25, 0x15	; 21
    2970:	90 93 44 05 	sts	0x0544, r25
    2974:	80 93 43 05 	sts	0x0543, r24
	#endif
	#if defined(USE_TIMER1)
		PwmTimerInitialize[1] = PwmTimerInitialize1;
    2978:	87 ea       	ldi	r24, 0xA7	; 167
    297a:	95 e1       	ldi	r25, 0x15	; 21
    297c:	90 93 46 05 	sts	0x0546, r25
    2980:	80 93 45 05 	sts	0x0545, r24
	#endif
	#if defined(USE_TIMER2)
		PwmTimerInitialize[2] = PwmTimerInitialize2;
    2984:	81 e3       	ldi	r24, 0x31	; 49
    2986:	96 e1       	ldi	r25, 0x16	; 22
    2988:	90 93 48 05 	sts	0x0548, r25
    298c:	80 93 47 05 	sts	0x0547, r24
	#endif
	#if defined(USE_TIMER3)
		PwmTimerInitialize[3] = PwmTimerInitialize3;
    2990:	85 e6       	ldi	r24, 0x65	; 101
    2992:	96 e1       	ldi	r25, 0x16	; 22
    2994:	90 93 4a 05 	sts	0x054A, r25
    2998:	80 93 49 05 	sts	0x0549, r24
		PwmTimerInitialize[4] = PwmTimerInitialize4;
	#endif
	#if defined(USE_TIMER5)
		PwmTimerInitialize[5] = PwmTimerInitialize5;
	#endif
}
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	08 95       	ret

000029a2 <MotorInitialize>:

void MotorInitialize(void) {
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	0f 92       	push	r0
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
	uint8_t loop;
	
	#if defined(USE_MOTOR00)
		sbi(*MOTOR_00_D1_PORT.DDR, MOTOR_00_D1_BIT);
    29ac:	80 91 af 05 	lds	r24, 0x05AF
    29b0:	90 91 b0 05 	lds	r25, 0x05B0
    29b4:	20 91 af 05 	lds	r18, 0x05AF
    29b8:	30 91 b0 05 	lds	r19, 0x05B0
    29bc:	f9 01       	movw	r30, r18
    29be:	20 81       	ld	r18, Z
    29c0:	24 60       	ori	r18, 0x04	; 4
    29c2:	fc 01       	movw	r30, r24
    29c4:	20 83       	st	Z, r18
		sbi(*MOTOR_00_D2_PORT.DDR, MOTOR_00_D2_BIT);
    29c6:	80 91 af 05 	lds	r24, 0x05AF
    29ca:	90 91 b0 05 	lds	r25, 0x05B0
    29ce:	20 91 af 05 	lds	r18, 0x05AF
    29d2:	30 91 b0 05 	lds	r19, 0x05B0
    29d6:	f9 01       	movw	r30, r18
    29d8:	20 81       	ld	r18, Z
    29da:	28 60       	ori	r18, 0x08	; 8
    29dc:	fc 01       	movw	r30, r24
    29de:	20 83       	st	Z, r18
		PwmTimerInitialize[MOTOR00_TIMER_NO](MOTOR00_PWM_PORT);
    29e0:	20 91 43 05 	lds	r18, 0x0543
    29e4:	30 91 44 05 	lds	r19, 0x0544
    29e8:	81 e4       	ldi	r24, 0x41	; 65
    29ea:	f9 01       	movw	r30, r18
    29ec:	09 95       	icall
		MotorFunctions[0] = SetActionMotor0;
    29ee:	88 e3       	ldi	r24, 0x38	; 56
    29f0:	97 e1       	ldi	r25, 0x17	; 23
    29f2:	90 93 50 05 	sts	0x0550, r25
    29f6:	80 93 4f 05 	sts	0x054F, r24
	#endif
	#if defined(USE_MOTOR01)
		sbi(*MOTOR_01_D1_PORT.DDR, MOTOR_01_D1_BIT);
    29fa:	80 91 cd 05 	lds	r24, 0x05CD
    29fe:	90 91 ce 05 	lds	r25, 0x05CE
    2a02:	20 91 cd 05 	lds	r18, 0x05CD
    2a06:	30 91 ce 05 	lds	r19, 0x05CE
    2a0a:	f9 01       	movw	r30, r18
    2a0c:	20 81       	ld	r18, Z
    2a0e:	28 60       	ori	r18, 0x08	; 8
    2a10:	fc 01       	movw	r30, r24
    2a12:	20 83       	st	Z, r18
		sbi(*MOTOR_01_D2_PORT.DDR, MOTOR_01_D2_BIT);
    2a14:	80 91 cd 05 	lds	r24, 0x05CD
    2a18:	90 91 ce 05 	lds	r25, 0x05CE
    2a1c:	20 91 cd 05 	lds	r18, 0x05CD
    2a20:	30 91 ce 05 	lds	r19, 0x05CE
    2a24:	f9 01       	movw	r30, r18
    2a26:	20 81       	ld	r18, Z
    2a28:	20 61       	ori	r18, 0x10	; 16
    2a2a:	fc 01       	movw	r30, r24
    2a2c:	20 83       	st	Z, r18
		PwmTimerInitialize[MOTOR01_TIMER_NO](MOTOR01_PWM_PORT);
    2a2e:	20 91 45 05 	lds	r18, 0x0545
    2a32:	30 91 46 05 	lds	r19, 0x0546
    2a36:	81 e4       	ldi	r24, 0x41	; 65
    2a38:	f9 01       	movw	r30, r18
    2a3a:	09 95       	icall
		MotorFunctions[1] = SetActionMotor1;
    2a3c:	8d e9       	ldi	r24, 0x9D	; 157
    2a3e:	97 e1       	ldi	r25, 0x17	; 23
    2a40:	90 93 52 05 	sts	0x0552, r25
    2a44:	80 93 51 05 	sts	0x0551, r24
		sbi(*MOTOR_14_D1_PORT.DDR, MOTOR_14_D1_BIT);
		sbi(*MOTOR_14_D2_PORT.DDR, MOTOR_14_D2_BIT);
		MotorFunctions[14] = SetActionMotor14;
	#endif

	for(loop=0; loop<USING_MOTOR; loop++) {
    2a48:	19 82       	std	Y+1, r1	; 0x01
    2a4a:	15 c0       	rjmp	.+42     	; 0x2a76 <MotorInitialize+0xd4>
		MotorArray[loop].status = FREE;
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	88 2f       	mov	r24, r24
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	88 0f       	add	r24, r24
    2a54:	99 1f       	adc	r25, r25
    2a56:	81 5c       	subi	r24, 0xC1	; 193
    2a58:	9a 4f       	sbci	r25, 0xFA	; 250
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	10 82       	st	Z, r1
		MotorArray[loop].pwm = 0;
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	88 2f       	mov	r24, r24
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	88 0f       	add	r24, r24
    2a66:	99 1f       	adc	r25, r25
    2a68:	80 5c       	subi	r24, 0xC0	; 192
    2a6a:	9a 4f       	sbci	r25, 0xFA	; 250
    2a6c:	fc 01       	movw	r30, r24
    2a6e:	10 82       	st	Z, r1
		sbi(*MOTOR_14_D1_PORT.DDR, MOTOR_14_D1_BIT);
		sbi(*MOTOR_14_D2_PORT.DDR, MOTOR_14_D2_BIT);
		MotorFunctions[14] = SetActionMotor14;
	#endif

	for(loop=0; loop<USING_MOTOR; loop++) {
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	8f 5f       	subi	r24, 0xFF	; 255
    2a74:	89 83       	std	Y+1, r24	; 0x01
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	82 30       	cpi	r24, 0x02	; 2
    2a7a:	40 f3       	brcs	.-48     	; 0x2a4c <MotorInitialize+0xaa>
		MotorArray[loop].status = FREE;
		MotorArray[loop].pwm = 0;
	}
}
    2a7c:	0f 90       	pop	r0
    2a7e:	cf 91       	pop	r28
    2a80:	df 91       	pop	r29
    2a82:	08 95       	ret

00002a84 <MotorUpdate>:

void MotorUpdate(void) {
    2a84:	df 93       	push	r29
    2a86:	cf 93       	push	r28
    2a88:	0f 92       	push	r0
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
	uint8_t loop;
	
	for(loop=0; loop<USING_MOTOR; loop++) {
    2a8e:	19 82       	std	Y+1, r1	; 0x01
    2a90:	23 c0       	rjmp	.+70     	; 0x2ad8 <MotorUpdate+0x54>
		MotorFunctions[loop](MotorArray[loop].status, MotorArray[loop].pwm);
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	88 2f       	mov	r24, r24
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	88 0f       	add	r24, r24
    2a9a:	99 1f       	adc	r25, r25
    2a9c:	81 5b       	subi	r24, 0xB1	; 177
    2a9e:	9a 4f       	sbci	r25, 0xFA	; 250
    2aa0:	fc 01       	movw	r30, r24
    2aa2:	20 81       	ld	r18, Z
    2aa4:	31 81       	ldd	r19, Z+1	; 0x01
    2aa6:	89 81       	ldd	r24, Y+1	; 0x01
    2aa8:	88 2f       	mov	r24, r24
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	88 0f       	add	r24, r24
    2aae:	99 1f       	adc	r25, r25
    2ab0:	81 5c       	subi	r24, 0xC1	; 193
    2ab2:	9a 4f       	sbci	r25, 0xFA	; 250
    2ab4:	fc 01       	movw	r30, r24
    2ab6:	40 81       	ld	r20, Z
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	88 2f       	mov	r24, r24
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	88 0f       	add	r24, r24
    2ac0:	99 1f       	adc	r25, r25
    2ac2:	80 5c       	subi	r24, 0xC0	; 192
    2ac4:	9a 4f       	sbci	r25, 0xFA	; 250
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	90 81       	ld	r25, Z
    2aca:	84 2f       	mov	r24, r20
    2acc:	69 2f       	mov	r22, r25
    2ace:	f9 01       	movw	r30, r18
    2ad0:	09 95       	icall
}

void MotorUpdate(void) {
	uint8_t loop;
	
	for(loop=0; loop<USING_MOTOR; loop++) {
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	8f 5f       	subi	r24, 0xFF	; 255
    2ad6:	89 83       	std	Y+1, r24	; 0x01
    2ad8:	89 81       	ldd	r24, Y+1	; 0x01
    2ada:	82 30       	cpi	r24, 0x02	; 2
    2adc:	d0 f2       	brcs	.-76     	; 0x2a92 <MotorUpdate+0xe>
		MotorFunctions[loop](MotorArray[loop].status, MotorArray[loop].pwm);
	}
}
    2ade:	0f 90       	pop	r0
    2ae0:	cf 91       	pop	r28
    2ae2:	df 91       	pop	r29
    2ae4:	08 95       	ret

00002ae6 <PwmTimerInitialize0>:

#if defined(USE_TIMER0)
static void PwmTimerInitialize0(uint8_t port) {
    2ae6:	df 93       	push	r29
    2ae8:	cf 93       	push	r28
    2aea:	0f 92       	push	r0
    2aec:	cd b7       	in	r28, 0x3d	; 61
    2aee:	de b7       	in	r29, 0x3e	; 62
    2af0:	89 83       	std	Y+1, r24	; 0x01
	if(port == 'A') {
    2af2:	89 81       	ldd	r24, Y+1	; 0x01
    2af4:	81 34       	cpi	r24, 0x41	; 65
    2af6:	39 f5       	brne	.+78     	; 0x2b46 <PwmTimerInitialize0+0x60>
		sbi(*OCR0_PORT.DDR, OCR0_BIT);
    2af8:	80 91 af 05 	lds	r24, 0x05AF
    2afc:	90 91 b0 05 	lds	r25, 0x05B0
    2b00:	20 91 af 05 	lds	r18, 0x05AF
    2b04:	30 91 b0 05 	lds	r19, 0x05B0
    2b08:	f9 01       	movw	r30, r18
    2b0a:	20 81       	ld	r18, Z
    2b0c:	20 61       	ori	r18, 0x10	; 16
    2b0e:	fc 01       	movw	r30, r24
    2b10:	20 83       	st	Z, r18
		sbi(*TIMER.T0.TCCRA, COM01_BIT);
    2b12:	80 91 65 05 	lds	r24, 0x0565
    2b16:	90 91 66 05 	lds	r25, 0x0566
    2b1a:	20 91 65 05 	lds	r18, 0x0565
    2b1e:	30 91 66 05 	lds	r19, 0x0566
    2b22:	f9 01       	movw	r30, r18
    2b24:	20 81       	ld	r18, Z
    2b26:	20 62       	ori	r18, 0x20	; 32
    2b28:	fc 01       	movw	r30, r24
    2b2a:	20 83       	st	Z, r18
		cbi(*TIMER.T0.TCCRA, COM00_BIT);
    2b2c:	80 91 65 05 	lds	r24, 0x0565
    2b30:	90 91 66 05 	lds	r25, 0x0566
    2b34:	20 91 65 05 	lds	r18, 0x0565
    2b38:	30 91 66 05 	lds	r19, 0x0566
    2b3c:	f9 01       	movw	r30, r18
    2b3e:	20 81       	ld	r18, Z
    2b40:	2f 7e       	andi	r18, 0xEF	; 239
    2b42:	fc 01       	movw	r30, r24
    2b44:	20 83       	st	Z, r18
	}
}
    2b46:	0f 90       	pop	r0
    2b48:	cf 91       	pop	r28
    2b4a:	df 91       	pop	r29
    2b4c:	08 95       	ret

00002b4e <PwmTimerInitialize1>:
#endif

#if defined(USE_TIMER1)
static void PwmTimerInitialize1(uint8_t port) {
    2b4e:	df 93       	push	r29
    2b50:	cf 93       	push	r28
    2b52:	0f 92       	push	r0
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
    2b58:	89 83       	std	Y+1, r24	; 0x01
	if(port == 'A') {
    2b5a:	89 81       	ldd	r24, Y+1	; 0x01
    2b5c:	81 34       	cpi	r24, 0x41	; 65
    2b5e:	41 f5       	brne	.+80     	; 0x2bb0 <PwmTimerInitialize1+0x62>
		sbi(*OCR1A_PORT.DDR, OCR1A_BIT);
    2b60:	80 91 af 05 	lds	r24, 0x05AF
    2b64:	90 91 b0 05 	lds	r25, 0x05B0
    2b68:	20 91 af 05 	lds	r18, 0x05AF
    2b6c:	30 91 b0 05 	lds	r19, 0x05B0
    2b70:	f9 01       	movw	r30, r18
    2b72:	20 81       	ld	r18, Z
    2b74:	20 62       	ori	r18, 0x20	; 32
    2b76:	fc 01       	movw	r30, r24
    2b78:	20 83       	st	Z, r18
		sbi(*TIMER.T1.TCCRA, COM1A1_BIT);
    2b7a:	80 91 73 05 	lds	r24, 0x0573
    2b7e:	90 91 74 05 	lds	r25, 0x0574
    2b82:	20 91 73 05 	lds	r18, 0x0573
    2b86:	30 91 74 05 	lds	r19, 0x0574
    2b8a:	f9 01       	movw	r30, r18
    2b8c:	20 81       	ld	r18, Z
    2b8e:	20 68       	ori	r18, 0x80	; 128
    2b90:	fc 01       	movw	r30, r24
    2b92:	20 83       	st	Z, r18
		cbi(*TIMER.T1.TCCRA, COM1A0_BIT);
    2b94:	80 91 73 05 	lds	r24, 0x0573
    2b98:	90 91 74 05 	lds	r25, 0x0574
    2b9c:	20 91 73 05 	lds	r18, 0x0573
    2ba0:	30 91 74 05 	lds	r19, 0x0574
    2ba4:	f9 01       	movw	r30, r18
    2ba6:	20 81       	ld	r18, Z
    2ba8:	2f 7b       	andi	r18, 0xBF	; 191
    2baa:	fc 01       	movw	r30, r24
    2bac:	20 83       	st	Z, r18
    2bae:	55 c0       	rjmp	.+170    	; 0x2c5a <PwmTimerInitialize1+0x10c>
	}
	else if(port == 'B') {
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	82 34       	cpi	r24, 0x42	; 66
    2bb4:	41 f5       	brne	.+80     	; 0x2c06 <PwmTimerInitialize1+0xb8>
		sbi(*OCR1B_PORT.DDR, OCR1B_BIT);
    2bb6:	80 91 af 05 	lds	r24, 0x05AF
    2bba:	90 91 b0 05 	lds	r25, 0x05B0
    2bbe:	20 91 af 05 	lds	r18, 0x05AF
    2bc2:	30 91 b0 05 	lds	r19, 0x05B0
    2bc6:	f9 01       	movw	r30, r18
    2bc8:	20 81       	ld	r18, Z
    2bca:	20 64       	ori	r18, 0x40	; 64
    2bcc:	fc 01       	movw	r30, r24
    2bce:	20 83       	st	Z, r18
		sbi(*TIMER.T1.TCCRA, COM1B1_BIT);
    2bd0:	80 91 73 05 	lds	r24, 0x0573
    2bd4:	90 91 74 05 	lds	r25, 0x0574
    2bd8:	20 91 73 05 	lds	r18, 0x0573
    2bdc:	30 91 74 05 	lds	r19, 0x0574
    2be0:	f9 01       	movw	r30, r18
    2be2:	20 81       	ld	r18, Z
    2be4:	20 62       	ori	r18, 0x20	; 32
    2be6:	fc 01       	movw	r30, r24
    2be8:	20 83       	st	Z, r18
		cbi(*TIMER.T1.TCCRA, COM1B0_BIT);
    2bea:	80 91 73 05 	lds	r24, 0x0573
    2bee:	90 91 74 05 	lds	r25, 0x0574
    2bf2:	20 91 73 05 	lds	r18, 0x0573
    2bf6:	30 91 74 05 	lds	r19, 0x0574
    2bfa:	f9 01       	movw	r30, r18
    2bfc:	20 81       	ld	r18, Z
    2bfe:	2f 7e       	andi	r18, 0xEF	; 239
    2c00:	fc 01       	movw	r30, r24
    2c02:	20 83       	st	Z, r18
    2c04:	2a c0       	rjmp	.+84     	; 0x2c5a <PwmTimerInitialize1+0x10c>
	}
	else if(port == 'C') {
    2c06:	89 81       	ldd	r24, Y+1	; 0x01
    2c08:	83 34       	cpi	r24, 0x43	; 67
    2c0a:	39 f5       	brne	.+78     	; 0x2c5a <PwmTimerInitialize1+0x10c>
		sbi(*OCR1C_PORT.DDR, OCR1C_BIT);
    2c0c:	80 91 af 05 	lds	r24, 0x05AF
    2c10:	90 91 b0 05 	lds	r25, 0x05B0
    2c14:	20 91 af 05 	lds	r18, 0x05AF
    2c18:	30 91 b0 05 	lds	r19, 0x05B0
    2c1c:	f9 01       	movw	r30, r18
    2c1e:	20 81       	ld	r18, Z
    2c20:	20 68       	ori	r18, 0x80	; 128
    2c22:	fc 01       	movw	r30, r24
    2c24:	20 83       	st	Z, r18
		sbi(*TIMER.T1.TCCRA, COM1C1_BIT);
    2c26:	80 91 73 05 	lds	r24, 0x0573
    2c2a:	90 91 74 05 	lds	r25, 0x0574
    2c2e:	20 91 73 05 	lds	r18, 0x0573
    2c32:	30 91 74 05 	lds	r19, 0x0574
    2c36:	f9 01       	movw	r30, r18
    2c38:	20 81       	ld	r18, Z
    2c3a:	28 60       	ori	r18, 0x08	; 8
    2c3c:	fc 01       	movw	r30, r24
    2c3e:	20 83       	st	Z, r18
		cbi(*TIMER.T1.TCCRA, COM1C0_BIT);
    2c40:	80 91 73 05 	lds	r24, 0x0573
    2c44:	90 91 74 05 	lds	r25, 0x0574
    2c48:	20 91 73 05 	lds	r18, 0x0573
    2c4c:	30 91 74 05 	lds	r19, 0x0574
    2c50:	f9 01       	movw	r30, r18
    2c52:	20 81       	ld	r18, Z
    2c54:	2b 7f       	andi	r18, 0xFB	; 251
    2c56:	fc 01       	movw	r30, r24
    2c58:	20 83       	st	Z, r18
	}
}
    2c5a:	0f 90       	pop	r0
    2c5c:	cf 91       	pop	r28
    2c5e:	df 91       	pop	r29
    2c60:	08 95       	ret

00002c62 <PwmTimerInitialize2>:
#endif

#if defined(USE_TIMER2)
static void PwmTimerInitialize2(uint8_t port) {
    2c62:	df 93       	push	r29
    2c64:	cf 93       	push	r28
    2c66:	0f 92       	push	r0
    2c68:	cd b7       	in	r28, 0x3d	; 61
    2c6a:	de b7       	in	r29, 0x3e	; 62
    2c6c:	89 83       	std	Y+1, r24	; 0x01
	if(port == 'A') {
    2c6e:	89 81       	ldd	r24, Y+1	; 0x01
    2c70:	81 34       	cpi	r24, 0x41	; 65
    2c72:	39 f5       	brne	.+78     	; 0x2cc2 <PwmTimerInitialize2+0x60>
		sbi(*OCR2_PORT.DDR, OCR2_BIT);
    2c74:	80 91 af 05 	lds	r24, 0x05AF
    2c78:	90 91 b0 05 	lds	r25, 0x05B0
    2c7c:	20 91 af 05 	lds	r18, 0x05AF
    2c80:	30 91 b0 05 	lds	r19, 0x05B0
    2c84:	f9 01       	movw	r30, r18
    2c86:	20 81       	ld	r18, Z
    2c88:	20 68       	ori	r18, 0x80	; 128
    2c8a:	fc 01       	movw	r30, r24
    2c8c:	20 83       	st	Z, r18
		sbi(*TIMER.T2.TCCRA, COM21_BIT);
    2c8e:	80 91 87 05 	lds	r24, 0x0587
    2c92:	90 91 88 05 	lds	r25, 0x0588
    2c96:	20 91 87 05 	lds	r18, 0x0587
    2c9a:	30 91 88 05 	lds	r19, 0x0588
    2c9e:	f9 01       	movw	r30, r18
    2ca0:	20 81       	ld	r18, Z
    2ca2:	20 62       	ori	r18, 0x20	; 32
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	20 83       	st	Z, r18
		cbi(*TIMER.T2.TCCRA, COM20_BIT);
    2ca8:	80 91 87 05 	lds	r24, 0x0587
    2cac:	90 91 88 05 	lds	r25, 0x0588
    2cb0:	20 91 87 05 	lds	r18, 0x0587
    2cb4:	30 91 88 05 	lds	r19, 0x0588
    2cb8:	f9 01       	movw	r30, r18
    2cba:	20 81       	ld	r18, Z
    2cbc:	2f 7e       	andi	r18, 0xEF	; 239
    2cbe:	fc 01       	movw	r30, r24
    2cc0:	20 83       	st	Z, r18
	}
}
    2cc2:	0f 90       	pop	r0
    2cc4:	cf 91       	pop	r28
    2cc6:	df 91       	pop	r29
    2cc8:	08 95       	ret

00002cca <PwmTimerInitialize3>:
#endif

#if defined(USE_TIMER3)
static void PwmTimerInitialize3(uint8_t port) {
    2cca:	df 93       	push	r29
    2ccc:	cf 93       	push	r28
    2cce:	0f 92       	push	r0
    2cd0:	cd b7       	in	r28, 0x3d	; 61
    2cd2:	de b7       	in	r29, 0x3e	; 62
    2cd4:	89 83       	std	Y+1, r24	; 0x01
	if(port == 'A') {
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	81 34       	cpi	r24, 0x41	; 65
    2cda:	41 f5       	brne	.+80     	; 0x2d2c <PwmTimerInitialize3+0x62>
		sbi(*OCR3A_PORT.DDR, OCR3A_BIT);
    2cdc:	80 91 c1 05 	lds	r24, 0x05C1
    2ce0:	90 91 c2 05 	lds	r25, 0x05C2
    2ce4:	20 91 c1 05 	lds	r18, 0x05C1
    2ce8:	30 91 c2 05 	lds	r19, 0x05C2
    2cec:	f9 01       	movw	r30, r18
    2cee:	20 81       	ld	r18, Z
    2cf0:	28 60       	ori	r18, 0x08	; 8
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	20 83       	st	Z, r18
		sbi(*TIMER.T3.TCCRA, COM3A1_BIT);
    2cf6:	80 91 95 05 	lds	r24, 0x0595
    2cfa:	90 91 96 05 	lds	r25, 0x0596
    2cfe:	20 91 95 05 	lds	r18, 0x0595
    2d02:	30 91 96 05 	lds	r19, 0x0596
    2d06:	f9 01       	movw	r30, r18
    2d08:	20 81       	ld	r18, Z
    2d0a:	20 68       	ori	r18, 0x80	; 128
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	20 83       	st	Z, r18
		cbi(*TIMER.T3.TCCRA, COM3A0_BIT);
    2d10:	80 91 95 05 	lds	r24, 0x0595
    2d14:	90 91 96 05 	lds	r25, 0x0596
    2d18:	20 91 95 05 	lds	r18, 0x0595
    2d1c:	30 91 96 05 	lds	r19, 0x0596
    2d20:	f9 01       	movw	r30, r18
    2d22:	20 81       	ld	r18, Z
    2d24:	2f 7b       	andi	r18, 0xBF	; 191
    2d26:	fc 01       	movw	r30, r24
    2d28:	20 83       	st	Z, r18
    2d2a:	55 c0       	rjmp	.+170    	; 0x2dd6 <PwmTimerInitialize3+0x10c>
	}
	else if(port == 'B') {
    2d2c:	89 81       	ldd	r24, Y+1	; 0x01
    2d2e:	82 34       	cpi	r24, 0x42	; 66
    2d30:	41 f5       	brne	.+80     	; 0x2d82 <PwmTimerInitialize3+0xb8>
		sbi(*OCR3B_PORT.DDR, OCR3B_BIT);
    2d32:	80 91 c1 05 	lds	r24, 0x05C1
    2d36:	90 91 c2 05 	lds	r25, 0x05C2
    2d3a:	20 91 c1 05 	lds	r18, 0x05C1
    2d3e:	30 91 c2 05 	lds	r19, 0x05C2
    2d42:	f9 01       	movw	r30, r18
    2d44:	20 81       	ld	r18, Z
    2d46:	20 61       	ori	r18, 0x10	; 16
    2d48:	fc 01       	movw	r30, r24
    2d4a:	20 83       	st	Z, r18
		sbi(*TIMER.T3.TCCRA, COM3B1_BIT);
    2d4c:	80 91 95 05 	lds	r24, 0x0595
    2d50:	90 91 96 05 	lds	r25, 0x0596
    2d54:	20 91 95 05 	lds	r18, 0x0595
    2d58:	30 91 96 05 	lds	r19, 0x0596
    2d5c:	f9 01       	movw	r30, r18
    2d5e:	20 81       	ld	r18, Z
    2d60:	20 62       	ori	r18, 0x20	; 32
    2d62:	fc 01       	movw	r30, r24
    2d64:	20 83       	st	Z, r18
		cbi(*TIMER.T3.TCCRA, COM3B0_BIT);
    2d66:	80 91 95 05 	lds	r24, 0x0595
    2d6a:	90 91 96 05 	lds	r25, 0x0596
    2d6e:	20 91 95 05 	lds	r18, 0x0595
    2d72:	30 91 96 05 	lds	r19, 0x0596
    2d76:	f9 01       	movw	r30, r18
    2d78:	20 81       	ld	r18, Z
    2d7a:	2f 7e       	andi	r18, 0xEF	; 239
    2d7c:	fc 01       	movw	r30, r24
    2d7e:	20 83       	st	Z, r18
    2d80:	2a c0       	rjmp	.+84     	; 0x2dd6 <PwmTimerInitialize3+0x10c>
	}
	else if(port == 'C') {
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	83 34       	cpi	r24, 0x43	; 67
    2d86:	39 f5       	brne	.+78     	; 0x2dd6 <PwmTimerInitialize3+0x10c>
		sbi(*OCR3C_PORT.DDR, OCR3C_BIT);
    2d88:	80 91 c1 05 	lds	r24, 0x05C1
    2d8c:	90 91 c2 05 	lds	r25, 0x05C2
    2d90:	20 91 c1 05 	lds	r18, 0x05C1
    2d94:	30 91 c2 05 	lds	r19, 0x05C2
    2d98:	f9 01       	movw	r30, r18
    2d9a:	20 81       	ld	r18, Z
    2d9c:	20 62       	ori	r18, 0x20	; 32
    2d9e:	fc 01       	movw	r30, r24
    2da0:	20 83       	st	Z, r18
		sbi(*TIMER.T3.TCCRA, COM3C1_BIT);
    2da2:	80 91 95 05 	lds	r24, 0x0595
    2da6:	90 91 96 05 	lds	r25, 0x0596
    2daa:	20 91 95 05 	lds	r18, 0x0595
    2dae:	30 91 96 05 	lds	r19, 0x0596
    2db2:	f9 01       	movw	r30, r18
    2db4:	20 81       	ld	r18, Z
    2db6:	28 60       	ori	r18, 0x08	; 8
    2db8:	fc 01       	movw	r30, r24
    2dba:	20 83       	st	Z, r18
		cbi(*TIMER.T3.TCCRA, COM3C0_BIT);
    2dbc:	80 91 95 05 	lds	r24, 0x0595
    2dc0:	90 91 96 05 	lds	r25, 0x0596
    2dc4:	20 91 95 05 	lds	r18, 0x0595
    2dc8:	30 91 96 05 	lds	r19, 0x0596
    2dcc:	f9 01       	movw	r30, r18
    2dce:	20 81       	ld	r18, Z
    2dd0:	2b 7f       	andi	r18, 0xFB	; 251
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	20 83       	st	Z, r18
	}
}
    2dd6:	0f 90       	pop	r0
    2dd8:	cf 91       	pop	r28
    2dda:	df 91       	pop	r29
    2ddc:	08 95       	ret

00002dde <PwmSetter>:
		cbi(*TIMER.T5.TCCRA, COM5C0_BIT);
	}
}
#endif

uint8_t PwmSetter(uint8_t duty) {
    2dde:	df 93       	push	r29
    2de0:	cf 93       	push	r28
    2de2:	00 d0       	rcall	.+0      	; 0x2de4 <PwmSetter+0x6>
    2de4:	0f 92       	push	r0
    2de6:	cd b7       	in	r28, 0x3d	; 61
    2de8:	de b7       	in	r29, 0x3e	; 62
    2dea:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t result;
	result = duty * 141;
    2dec:	8b 81       	ldd	r24, Y+3	; 0x03
    2dee:	48 2f       	mov	r20, r24
    2df0:	50 e0       	ldi	r21, 0x00	; 0
    2df2:	2d e8       	ldi	r18, 0x8D	; 141
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	42 9f       	mul	r20, r18
    2df8:	c0 01       	movw	r24, r0
    2dfa:	43 9f       	mul	r20, r19
    2dfc:	90 0d       	add	r25, r0
    2dfe:	52 9f       	mul	r21, r18
    2e00:	90 0d       	add	r25, r0
    2e02:	11 24       	eor	r1, r1
    2e04:	9a 83       	std	Y+2, r25	; 0x02
    2e06:	89 83       	std	Y+1, r24	; 0x01
	result >>= 8;
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0c:	89 2f       	mov	r24, r25
    2e0e:	99 27       	eor	r25, r25
    2e10:	9a 83       	std	Y+2, r25	; 0x02
    2e12:	89 83       	std	Y+1, r24	; 0x01
	result += (duty << 1);
    2e14:	8b 81       	ldd	r24, Y+3	; 0x03
    2e16:	88 2f       	mov	r24, r24
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	88 0f       	add	r24, r24
    2e1c:	99 1f       	adc	r25, r25
    2e1e:	29 81       	ldd	r18, Y+1	; 0x01
    2e20:	3a 81       	ldd	r19, Y+2	; 0x02
    2e22:	82 0f       	add	r24, r18
    2e24:	93 1f       	adc	r25, r19
    2e26:	9a 83       	std	Y+2, r25	; 0x02
    2e28:	89 83       	std	Y+1, r24	; 0x01
	return (uint8_t)result;
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e2c:	0f 90       	pop	r0
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	cf 91       	pop	r28
    2e34:	df 91       	pop	r29
    2e36:	08 95       	ret

00002e38 <MotorStatusChecker>:

static void MotorStatusChecker(uint8_t* status, uint8_t* pwm) {
    2e38:	df 93       	push	r29
    2e3a:	cf 93       	push	r28
    2e3c:	00 d0       	rcall	.+0      	; 0x2e3e <MotorStatusChecker+0x6>
    2e3e:	00 d0       	rcall	.+0      	; 0x2e40 <MotorStatusChecker+0x8>
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
    2e44:	9a 83       	std	Y+2, r25	; 0x02
    2e46:	89 83       	std	Y+1, r24	; 0x01
    2e48:	7c 83       	std	Y+4, r23	; 0x04
    2e4a:	6b 83       	std	Y+3, r22	; 0x03
	bool tmp;
	
// 与えられたpwmが100より大きければ100にする．
	if(*pwm > 100) *pwm = 100;
    2e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e50:	fc 01       	movw	r30, r24
    2e52:	80 81       	ld	r24, Z
    2e54:	85 36       	cpi	r24, 0x65	; 101
    2e56:	28 f0       	brcs	.+10     	; 0x2e62 <MotorStatusChecker+0x2a>
    2e58:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5c:	24 e6       	ldi	r18, 0x64	; 100
    2e5e:	fc 01       	movw	r30, r24
    2e60:	20 83       	st	Z, r18
		if(bit_is_set(*status, 1))	sbi(*status, 0);
		else						cbi(*status, 0);
		if(tmp)						sbi(*status, 1);
		else						cbi(*status, 1);
	}
}
    2e62:	0f 90       	pop	r0
    2e64:	0f 90       	pop	r0
    2e66:	0f 90       	pop	r0
    2e68:	0f 90       	pop	r0
    2e6a:	cf 91       	pop	r28
    2e6c:	df 91       	pop	r29
    2e6e:	08 95       	ret

00002e70 <SetActionMotor0>:


#if defined(USE_MOTOR00)
static void SetActionMotor0(uint8_t status, uint8_t pwm) {
    2e70:	0f 93       	push	r16
    2e72:	1f 93       	push	r17
    2e74:	df 93       	push	r29
    2e76:	cf 93       	push	r28
    2e78:	00 d0       	rcall	.+0      	; 0x2e7a <SetActionMotor0+0xa>
    2e7a:	cd b7       	in	r28, 0x3d	; 61
    2e7c:	de b7       	in	r29, 0x3e	; 62
    2e7e:	89 83       	std	Y+1, r24	; 0x01
    2e80:	6a 83       	std	Y+2, r22	; 0x02
	MotorStatusChecker(&status, &pwm);
    2e82:	9e 01       	movw	r18, r28
    2e84:	2e 5f       	subi	r18, 0xFE	; 254
    2e86:	3f 4f       	sbci	r19, 0xFF	; 255
    2e88:	ce 01       	movw	r24, r28
    2e8a:	01 96       	adiw	r24, 0x01	; 1
    2e8c:	b9 01       	movw	r22, r18
    2e8e:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <MotorStatusChecker>
	if(status & 0x01)	sbi(*MOTOR_00_D1_PORT.PORT, MOTOR_00_D1_BIT);
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	88 2f       	mov	r24, r24
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	81 70       	andi	r24, 0x01	; 1
    2e9a:	90 70       	andi	r25, 0x00	; 0
    2e9c:	88 23       	and	r24, r24
    2e9e:	71 f0       	breq	.+28     	; 0x2ebc <SetActionMotor0+0x4c>
    2ea0:	80 91 b1 05 	lds	r24, 0x05B1
    2ea4:	90 91 b2 05 	lds	r25, 0x05B2
    2ea8:	20 91 b1 05 	lds	r18, 0x05B1
    2eac:	30 91 b2 05 	lds	r19, 0x05B2
    2eb0:	f9 01       	movw	r30, r18
    2eb2:	20 81       	ld	r18, Z
    2eb4:	24 60       	ori	r18, 0x04	; 4
    2eb6:	fc 01       	movw	r30, r24
    2eb8:	20 83       	st	Z, r18
    2eba:	0d c0       	rjmp	.+26     	; 0x2ed6 <SetActionMotor0+0x66>
	else				cbi(*MOTOR_00_D1_PORT.PORT, MOTOR_00_D1_BIT);
    2ebc:	80 91 b1 05 	lds	r24, 0x05B1
    2ec0:	90 91 b2 05 	lds	r25, 0x05B2
    2ec4:	20 91 b1 05 	lds	r18, 0x05B1
    2ec8:	30 91 b2 05 	lds	r19, 0x05B2
    2ecc:	f9 01       	movw	r30, r18
    2ece:	20 81       	ld	r18, Z
    2ed0:	2b 7f       	andi	r18, 0xFB	; 251
    2ed2:	fc 01       	movw	r30, r24
    2ed4:	20 83       	st	Z, r18
	if(status & 0x02)	sbi(*MOTOR_00_D2_PORT.PORT, MOTOR_00_D2_BIT);
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	88 2f       	mov	r24, r24
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	82 70       	andi	r24, 0x02	; 2
    2ede:	90 70       	andi	r25, 0x00	; 0
    2ee0:	00 97       	sbiw	r24, 0x00	; 0
    2ee2:	71 f0       	breq	.+28     	; 0x2f00 <SetActionMotor0+0x90>
    2ee4:	80 91 b1 05 	lds	r24, 0x05B1
    2ee8:	90 91 b2 05 	lds	r25, 0x05B2
    2eec:	20 91 b1 05 	lds	r18, 0x05B1
    2ef0:	30 91 b2 05 	lds	r19, 0x05B2
    2ef4:	f9 01       	movw	r30, r18
    2ef6:	20 81       	ld	r18, Z
    2ef8:	28 60       	ori	r18, 0x08	; 8
    2efa:	fc 01       	movw	r30, r24
    2efc:	20 83       	st	Z, r18
    2efe:	0d c0       	rjmp	.+26     	; 0x2f1a <SetActionMotor0+0xaa>
	else				cbi(*MOTOR_00_D2_PORT.PORT, MOTOR_00_D2_BIT);
    2f00:	80 91 b1 05 	lds	r24, 0x05B1
    2f04:	90 91 b2 05 	lds	r25, 0x05B2
    2f08:	20 91 b1 05 	lds	r18, 0x05B1
    2f0c:	30 91 b2 05 	lds	r19, 0x05B2
    2f10:	f9 01       	movw	r30, r18
    2f12:	20 81       	ld	r18, Z
    2f14:	27 7f       	andi	r18, 0xF7	; 247
    2f16:	fc 01       	movw	r30, r24
    2f18:	20 83       	st	Z, r18
	*MOTOR_00_PWM_OCR = PwmSetter(pwm);
    2f1a:	00 91 6b 05 	lds	r16, 0x056B
    2f1e:	10 91 6c 05 	lds	r17, 0x056C
    2f22:	8a 81       	ldd	r24, Y+2	; 0x02
    2f24:	0e 94 ef 16 	call	0x2dde	; 0x2dde <PwmSetter>
    2f28:	f8 01       	movw	r30, r16
    2f2a:	80 83       	st	Z, r24
}
    2f2c:	0f 90       	pop	r0
    2f2e:	0f 90       	pop	r0
    2f30:	cf 91       	pop	r28
    2f32:	df 91       	pop	r29
    2f34:	1f 91       	pop	r17
    2f36:	0f 91       	pop	r16
    2f38:	08 95       	ret

00002f3a <SetActionMotor1>:
#endif

#if defined(USE_MOTOR01)
static void SetActionMotor1(uint8_t status, uint8_t pwm) {
    2f3a:	0f 93       	push	r16
    2f3c:	1f 93       	push	r17
    2f3e:	df 93       	push	r29
    2f40:	cf 93       	push	r28
    2f42:	00 d0       	rcall	.+0      	; 0x2f44 <SetActionMotor1+0xa>
    2f44:	cd b7       	in	r28, 0x3d	; 61
    2f46:	de b7       	in	r29, 0x3e	; 62
    2f48:	89 83       	std	Y+1, r24	; 0x01
    2f4a:	6a 83       	std	Y+2, r22	; 0x02
	MotorStatusChecker(&status, &pwm);
    2f4c:	9e 01       	movw	r18, r28
    2f4e:	2e 5f       	subi	r18, 0xFE	; 254
    2f50:	3f 4f       	sbci	r19, 0xFF	; 255
    2f52:	ce 01       	movw	r24, r28
    2f54:	01 96       	adiw	r24, 0x01	; 1
    2f56:	b9 01       	movw	r22, r18
    2f58:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <MotorStatusChecker>
	if(status & 0x01)	sbi(*MOTOR_01_D1_PORT.PORT, MOTOR_01_D1_BIT);
    2f5c:	89 81       	ldd	r24, Y+1	; 0x01
    2f5e:	88 2f       	mov	r24, r24
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	81 70       	andi	r24, 0x01	; 1
    2f64:	90 70       	andi	r25, 0x00	; 0
    2f66:	88 23       	and	r24, r24
    2f68:	71 f0       	breq	.+28     	; 0x2f86 <SetActionMotor1+0x4c>
    2f6a:	80 91 cf 05 	lds	r24, 0x05CF
    2f6e:	90 91 d0 05 	lds	r25, 0x05D0
    2f72:	20 91 cf 05 	lds	r18, 0x05CF
    2f76:	30 91 d0 05 	lds	r19, 0x05D0
    2f7a:	f9 01       	movw	r30, r18
    2f7c:	20 81       	ld	r18, Z
    2f7e:	28 60       	ori	r18, 0x08	; 8
    2f80:	fc 01       	movw	r30, r24
    2f82:	20 83       	st	Z, r18
    2f84:	0d c0       	rjmp	.+26     	; 0x2fa0 <SetActionMotor1+0x66>
	else				cbi(*MOTOR_01_D1_PORT.PORT, MOTOR_01_D1_BIT);
    2f86:	80 91 cf 05 	lds	r24, 0x05CF
    2f8a:	90 91 d0 05 	lds	r25, 0x05D0
    2f8e:	20 91 cf 05 	lds	r18, 0x05CF
    2f92:	30 91 d0 05 	lds	r19, 0x05D0
    2f96:	f9 01       	movw	r30, r18
    2f98:	20 81       	ld	r18, Z
    2f9a:	27 7f       	andi	r18, 0xF7	; 247
    2f9c:	fc 01       	movw	r30, r24
    2f9e:	20 83       	st	Z, r18
	if(status & 0x02)	sbi(*MOTOR_01_D2_PORT.PORT, MOTOR_01_D2_BIT);
    2fa0:	89 81       	ldd	r24, Y+1	; 0x01
    2fa2:	88 2f       	mov	r24, r24
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	82 70       	andi	r24, 0x02	; 2
    2fa8:	90 70       	andi	r25, 0x00	; 0
    2faa:	00 97       	sbiw	r24, 0x00	; 0
    2fac:	71 f0       	breq	.+28     	; 0x2fca <SetActionMotor1+0x90>
    2fae:	80 91 cf 05 	lds	r24, 0x05CF
    2fb2:	90 91 d0 05 	lds	r25, 0x05D0
    2fb6:	20 91 cf 05 	lds	r18, 0x05CF
    2fba:	30 91 d0 05 	lds	r19, 0x05D0
    2fbe:	f9 01       	movw	r30, r18
    2fc0:	20 81       	ld	r18, Z
    2fc2:	20 61       	ori	r18, 0x10	; 16
    2fc4:	fc 01       	movw	r30, r24
    2fc6:	20 83       	st	Z, r18
    2fc8:	0d c0       	rjmp	.+26     	; 0x2fe4 <SetActionMotor1+0xaa>
	else				cbi(*MOTOR_01_D2_PORT.PORT, MOTOR_01_D2_BIT);
    2fca:	80 91 cf 05 	lds	r24, 0x05CF
    2fce:	90 91 d0 05 	lds	r25, 0x05D0
    2fd2:	20 91 cf 05 	lds	r18, 0x05CF
    2fd6:	30 91 d0 05 	lds	r19, 0x05D0
    2fda:	f9 01       	movw	r30, r18
    2fdc:	20 81       	ld	r18, Z
    2fde:	2f 7e       	andi	r18, 0xEF	; 239
    2fe0:	fc 01       	movw	r30, r24
    2fe2:	20 83       	st	Z, r18
	*MOTOR_01_PWM_OCR = PwmSetter(pwm);
    2fe4:	00 91 7b 05 	lds	r16, 0x057B
    2fe8:	10 91 7c 05 	lds	r17, 0x057C
    2fec:	8a 81       	ldd	r24, Y+2	; 0x02
    2fee:	0e 94 ef 16 	call	0x2dde	; 0x2dde <PwmSetter>
    2ff2:	88 2f       	mov	r24, r24
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	f8 01       	movw	r30, r16
    2ff8:	91 83       	std	Z+1, r25	; 0x01
    2ffa:	80 83       	st	Z, r24
}
    2ffc:	0f 90       	pop	r0
    2ffe:	0f 90       	pop	r0
    3000:	cf 91       	pop	r28
    3002:	df 91       	pop	r29
    3004:	1f 91       	pop	r17
    3006:	0f 91       	pop	r16
    3008:	08 95       	ret

0000300a <SystemInitialize>:
#endif
#if defined(WDT_RESET)
	#include "../../System/WDT/WDT.h"
#endif

void SystemInitialize(void) {
    300a:	df 93       	push	r29
    300c:	cf 93       	push	r28
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
	cli();
    3012:	f8 94       	cli
	
	#if defined(USE_MU)
// Setting for Receive Data
		CtrlDataInitialize();	// RCReceive.c
    3014:	0e 94 92 01 	call	0x324	; 0x324 <CtrlDataInitialize>
// Initialize for MU
		MuInitialize();			// Mu.c
    3018:	0e 94 9e 00 	call	0x13c	; 0x13c <MuInitialize>
	#endif
	#if defined(USE_ENCODER)
// Initialize for Encoder
		EncoderInitialize();	// Encoder.c
    301c:	0e 94 42 0b 	call	0x1684	; 0x1684 <EncoderInitialize>
	#endif
	#if defined(USE_SWITCH)
// Initialize for Switch
		SwitchInitialize();		// Switch.c
    3020:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <SwitchInitialize>
	#endif
	#if defined(USE_DIP_SWITCH)
		DipSwitchInitialize();	// Switch.c
    3024:	0e 94 a0 10 	call	0x2140	; 0x2140 <DipSwitchInitialize>
	#endif
	#if defined(USE_SENSOR)
		SensorInitialize();
    3028:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <SensorInitialize>
	#endif
	#if defined(USE_AIR)
// Initialize for Air Actuator
		AirInitialize();		// Air.c
    302c:	0e 94 0c 12 	call	0x2418	; 0x2418 <AirInitialize>
		AirUpdate();			// Air.c
    3030:	0e 94 70 12 	call	0x24e0	; 0x24e0 <AirUpdate>
	#endif
	#if defined(USE_BUZZER)
// Initialize for Buzzer Actuator
		BuzzerInitialize();		// Buzzer.c
    3034:	0e 94 34 13 	call	0x2668	; 0x2668 <BuzzerInitialize>
		BuzzerUpdate();			// Buzzer.c
    3038:	0e 94 57 13 	call	0x26ae	; 0x26ae <BuzzerUpdate>
	#endif
	#if defined(USE_LED)
// Initialize for LED
		LedInitialize();		// Led.c
    303c:	0e 94 8a 13 	call	0x2714	; 0x2714 <LedInitialize>
		LedUpdate();			// Led.c
    3040:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LedUpdate>
	#endif
	#if defined(USE_MOTOR)
// Initialize for Motor Actuator
		MotorInitialize();		// Motor.c
    3044:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <MotorInitialize>
		MotorUpdate();			// Motor.c
    3048:	0e 94 42 15 	call	0x2a84	; 0x2a84 <MotorUpdate>
		ServoUpdate();			// Servo.c
	#endif

	#if defined(USE_SAFETY)
// Initialize for Safety Function
		SafetyInitialize[SAFETY_TIMER_NO]();	// Safety.c
    304c:	80 91 5b 05 	lds	r24, 0x055B
    3050:	90 91 5c 05 	lds	r25, 0x055C
    3054:	fc 01       	movw	r30, r24
    3056:	09 95       	icall
	#endif
	
	#if defined(USE_HUB)
	#if defined(USE_RS485)
		RS485Initialize(12);
    3058:	8c e0       	ldi	r24, 0x0C	; 12
    305a:	0e 94 20 04 	call	0x840	; 0x840 <RS485Initialize>
	#if defined(WDT_RESET)
		WDTInitialize();
	#endif
	
// Initialize Process Job
	ProcessJobInitialize();		// Process.c
    305e:	0e 94 34 18 	call	0x3068	; 0x3068 <ProcessJobInitialize>
}
    3062:	cf 91       	pop	r28
    3064:	df 91       	pop	r29
    3066:	08 95       	ret

00003068 <ProcessJobInitialize>:
#if defined(USE_SUB_PROCESS)
	static int currentProcess;
	static void (*ProcessFunctions[USING_PROCESS])(void);
#endif

void ProcessJobInitialize(void) {
    3068:	0f 93       	push	r16
    306a:	1f 93       	push	r17
    306c:	df 93       	push	r29
    306e:	cf 93       	push	r28
    3070:	0f 92       	push	r0
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	/*
	 * 以下に宣言した変数の初期化を記述する
	 */
	/*******************************************************/
	LeftTire.Tire = _BRAKE;
    3076:	88 e0       	ldi	r24, 0x08	; 8
    3078:	80 93 d0 03 	sts	0x03D0, r24
	LeftTire.Status = BRAKE;
    307c:	83 e0       	ldi	r24, 0x03	; 3
    307e:	80 93 d4 03 	sts	0x03D4, r24
	LeftTire.Pwm = BRAKE_PWM;
    3082:	84 e6       	ldi	r24, 0x64	; 100
    3084:	80 93 d1 03 	sts	0x03D1, r24
	LeftTire.Count = 0;
    3088:	10 92 d3 03 	sts	0x03D3, r1
    308c:	10 92 d2 03 	sts	0x03D2, r1
	LeftTire.UpSpan = PWM_UP_CHANGE_SPAN;
    3090:	82 e0       	ldi	r24, 0x02	; 2
    3092:	80 93 d5 03 	sts	0x03D5, r24
	LeftTire.DownSpan = PWM_DOWN_CHANGE_SPAN;
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	80 93 d6 03 	sts	0x03D6, r24
	LeftTire.Act = FREE;
    309c:	10 92 d9 03 	sts	0x03D9, r1
	LeftTire.MaxPwm = LTIRE_MAX_PWM;
    30a0:	8e e1       	ldi	r24, 0x1E	; 30
    30a2:	80 93 d8 03 	sts	0x03D8, r24
	LeftTire.MotorNo = 0;
    30a6:	10 92 da 03 	sts	0x03DA, r1
	
	RightTire.Tire = _BRAKE;
    30aa:	88 e0       	ldi	r24, 0x08	; 8
    30ac:	80 93 db 03 	sts	0x03DB, r24
	RightTire.Status = BRAKE;
    30b0:	83 e0       	ldi	r24, 0x03	; 3
    30b2:	80 93 df 03 	sts	0x03DF, r24
	RightTire.Pwm = BRAKE_PWM;
    30b6:	84 e6       	ldi	r24, 0x64	; 100
    30b8:	80 93 dc 03 	sts	0x03DC, r24
	RightTire.Count = 0;
    30bc:	10 92 de 03 	sts	0x03DE, r1
    30c0:	10 92 dd 03 	sts	0x03DD, r1
	RightTire.UpSpan = PWM_UP_CHANGE_SPAN;
    30c4:	82 e0       	ldi	r24, 0x02	; 2
    30c6:	80 93 e0 03 	sts	0x03E0, r24
	RightTire.DownSpan = PWM_DOWN_CHANGE_SPAN;
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	80 93 e1 03 	sts	0x03E1, r24
	RightTire.Act = FREE;
    30d0:	10 92 e4 03 	sts	0x03E4, r1
	RightTire.MaxPwm = RTIRE_MAX_PWM;
    30d4:	8e e1       	ldi	r24, 0x1E	; 30
    30d6:	80 93 e3 03 	sts	0x03E3, r24
	RightTire.MotorNo = 1;
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	80 93 e5 03 	sts	0x03E5, r24
	
	FrontTire.Tire = _BRAKE;
    30e0:	88 e0       	ldi	r24, 0x08	; 8
    30e2:	80 93 e6 03 	sts	0x03E6, r24
	FrontTire.Status = BRAKE;
    30e6:	83 e0       	ldi	r24, 0x03	; 3
    30e8:	80 93 ea 03 	sts	0x03EA, r24
	FrontTire.Pwm = BRAKE_PWM;
    30ec:	84 e6       	ldi	r24, 0x64	; 100
    30ee:	80 93 e7 03 	sts	0x03E7, r24
	FrontTire.Count = 0;
    30f2:	10 92 e9 03 	sts	0x03E9, r1
    30f6:	10 92 e8 03 	sts	0x03E8, r1
	FrontTire.UpSpan = PWM_UP_CHANGE_SPAN;
    30fa:	82 e0       	ldi	r24, 0x02	; 2
    30fc:	80 93 eb 03 	sts	0x03EB, r24
	FrontTire.DownSpan = PWM_DOWN_CHANGE_SPAN;
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	80 93 ec 03 	sts	0x03EC, r24
	FrontTire.Act = FREE;
    3106:	10 92 ef 03 	sts	0x03EF, r1
	FrontTire.MaxPwm = FTIRE_MAX_PWM;
    310a:	84 e1       	ldi	r24, 0x14	; 20
    310c:	80 93 ee 03 	sts	0x03EE, r24
	FrontTire.MotorNo = 5;
    3110:	85 e0       	ldi	r24, 0x05	; 5
    3112:	80 93 f0 03 	sts	0x03F0, r24
	
	Steering.Tire = _BRAKE;
    3116:	88 e0       	ldi	r24, 0x08	; 8
    3118:	80 93 f1 03 	sts	0x03F1, r24
	Steering.Status = BRAKE;
    311c:	83 e0       	ldi	r24, 0x03	; 3
    311e:	80 93 f5 03 	sts	0x03F5, r24
	Steering.Pwm = BRAKE_PWM;
    3122:	84 e6       	ldi	r24, 0x64	; 100
    3124:	80 93 f2 03 	sts	0x03F2, r24
	Steering.Count = 0;
    3128:	10 92 f4 03 	sts	0x03F4, r1
    312c:	10 92 f3 03 	sts	0x03F3, r1
	Steering.UpSpan = STEERING_PWM_UP_SPAN;
    3130:	82 e0       	ldi	r24, 0x02	; 2
    3132:	80 93 f6 03 	sts	0x03F6, r24
	Steering.DownSpan = STEERING_PWM_DOWN_SPAN;
    3136:	82 e0       	ldi	r24, 0x02	; 2
    3138:	80 93 f7 03 	sts	0x03F7, r24
	Steering.Act = FREE;
    313c:	10 92 fa 03 	sts	0x03FA, r1
	Steering.MaxPwm = STEERING_MAX_PWM;
    3140:	8e e1       	ldi	r24, 0x1E	; 30
    3142:	80 93 f9 03 	sts	0x03F9, r24
	Steering.MotorNo = 2;
    3146:	82 e0       	ldi	r24, 0x02	; 2
    3148:	80 93 fb 03 	sts	0x03FB, r24
	

	BackUnitDowned = false;
    314c:	10 92 fd 03 	sts	0x03FD, r1
	
	FrontTireDown = false;
    3150:	10 92 fe 03 	sts	0x03FE, r1
	FrontTireStatus = 0;
    3154:	10 92 ff 03 	sts	0x03FF, r1

	// Belt
	BeltStatus = BRAKE;
    3158:	83 e0       	ldi	r24, 0x03	; 3
    315a:	80 93 02 04 	sts	0x0402, r24
	
	
	LeftLimitSwPush = false;
    315e:	10 92 03 04 	sts	0x0403, r1
	LeftLimitSwPushed = false;
    3162:	10 92 04 04 	sts	0x0404, r1
	RightLimitSwPush = false;
    3166:	10 92 05 04 	sts	0x0405, r1
	RightLimitSwPushed = false;
    316a:	10 92 06 04 	sts	0x0406, r1
	LeftLimitSwCount = 0;
    316e:	10 92 07 04 	sts	0x0407, r1
	RightLimitSwCount = 0;
    3172:	10 92 08 04 	sts	0x0408, r1


	// Button Push Flag
	ProcessIncrementButtonPush = false;
    3176:	10 92 09 04 	sts	0x0409, r1
	ProcessIncrementButtonPushed = false;
    317a:	10 92 0a 04 	sts	0x040A, r1
	ProcessDecrementButtonPush = false;
    317e:	10 92 0b 04 	sts	0x040B, r1
	ProcessDecrementButtonPushed = false;
    3182:	10 92 0c 04 	sts	0x040C, r1
	ArmButtonPush = false;
    3186:	10 92 0d 04 	sts	0x040D, r1
	ArmButtonPushed = false;
    318a:	10 92 0e 04 	sts	0x040E, r1
	BeltButtonPush = false;
    318e:	10 92 0f 04 	sts	0x040F, r1
	BeltButtonPushed = false;
    3192:	10 92 10 04 	sts	0x0410, r1
	BeltBackButtonPush = false;
    3196:	10 92 11 04 	sts	0x0411, r1
	BeltBackButtonPushed = false;	
    319a:	10 92 12 04 	sts	0x0412, r1
	BackUnitUpButtonPush = false;
    319e:	10 92 13 04 	sts	0x0413, r1
	BackUnitUpButtonPushed = false;
    31a2:	10 92 14 04 	sts	0x0414, r1
	PetitFlatPlaneLockButtonPush = false;
    31a6:	10 92 15 04 	sts	0x0415, r1
	PetitFlatPlaneLockButtonPushed = false;
    31aa:	10 92 16 04 	sts	0x0416, r1
	FrontTireUpDownButtonPush = false;
    31ae:	10 92 17 04 	sts	0x0417, r1
	FrontTireUpDownButtonPushed = false;
    31b2:	10 92 18 04 	sts	0x0418, r1
	
	
	TIRE_A = AIR_OFF;
    31b6:	10 92 cc 04 	sts	0x04CC, r1
	tmpBackUnitStatus = TIRE_A;
    31ba:	80 91 cc 04 	lds	r24, 0x04CC
    31be:	80 93 fc 03 	sts	0x03FC, r24
	
	LOCK_A0_S = AIR_ON;
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	80 93 c8 04 	sts	0x04C8, r24
	LOCK_A0_DS = AIR_OFF;
    31c8:	10 92 c9 04 	sts	0x04C9, r1
	F_LOCK_A = AIR_ON;
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	80 93 cb 04 	sts	0x04CB, r24
	Slope = _FLAT_PLANE_LOCK;
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	80 93 00 04 	sts	0x0400, r24
	tmpSlope = _FLAT_PLANE_LOCK;
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	80 93 01 04 	sts	0x0401, r24
	
	/*******************************************************/
	
	if(!FirstInitialized){
    31de:	90 91 19 04 	lds	r25, 0x0419
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	89 27       	eor	r24, r25
    31e6:	88 23       	and	r24, r24
    31e8:	99 f1       	breq	.+102    	; 0x3250 <ProcessJobInitialize+0x1e8>
		currentProcess = 0;	
    31ea:	10 92 95 04 	sts	0x0495, r1
    31ee:	10 92 94 04 	sts	0x0494, r1
		for(i = 0; i < 120; i++){
    31f2:	19 82       	std	Y+1, r1	; 0x01
    31f4:	0f c0       	rjmp	.+30     	; 0x3214 <ProcessJobInitialize+0x1ac>
			TireTable[i] = TireDownFunction(i);
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
    31f8:	08 2f       	mov	r16, r24
    31fa:	10 e0       	ldi	r17, 0x00	; 0
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	0e 94 82 22 	call	0x4504	; 0x4504 <TireDownFunction>
    3202:	28 2f       	mov	r18, r24
    3204:	c8 01       	movw	r24, r16
    3206:	86 5e       	subi	r24, 0xE6	; 230
    3208:	9b 4f       	sbci	r25, 0xFB	; 251
    320a:	fc 01       	movw	r30, r24
    320c:	20 83       	st	Z, r18
	
	/*******************************************************/
	
	if(!FirstInitialized){
		currentProcess = 0;	
		for(i = 0; i < 120; i++){
    320e:	89 81       	ldd	r24, Y+1	; 0x01
    3210:	8f 5f       	subi	r24, 0xFF	; 255
    3212:	89 83       	std	Y+1, r24	; 0x01
    3214:	89 81       	ldd	r24, Y+1	; 0x01
    3216:	88 37       	cpi	r24, 0x78	; 120
    3218:	70 f3       	brcs	.-36     	; 0x31f6 <ProcessJobInitialize+0x18e>
			TireTable[i] = TireDownFunction(i);
		}
				
		#if (USING_PROCESS > 0)
			ProcessFunctions[0] = ProcessJob0;
    321a:	89 ea       	ldi	r24, 0xA9	; 169
    321c:	9b e1       	ldi	r25, 0x1B	; 27
    321e:	90 93 97 04 	sts	0x0497, r25
    3222:	80 93 96 04 	sts	0x0496, r24
		#endif
		#if (USING_PROCESS > 1)
			ProcessFunctions[1] = ProcessJob1;
    3226:	8a e5       	ldi	r24, 0x5A	; 90
    3228:	9c e1       	ldi	r25, 0x1C	; 28
    322a:	90 93 99 04 	sts	0x0499, r25
    322e:	80 93 98 04 	sts	0x0498, r24
		#endif
		#if (USING_PROCESS > 2)
			ProcessFunctions[2] = ProcessJob2;
    3232:	8f e3       	ldi	r24, 0x3F	; 63
    3234:	9d e1       	ldi	r25, 0x1D	; 29
    3236:	90 93 9b 04 	sts	0x049B, r25
    323a:	80 93 9a 04 	sts	0x049A, r24
		#endif
		#if (USING_PROCESS > 3)
			ProcessFunctions[3] = ProcessJob3;
    323e:	80 ef       	ldi	r24, 0xF0	; 240
    3240:	9d e1       	ldi	r25, 0x1D	; 29
    3242:	90 93 9d 04 	sts	0x049D, r25
    3246:	80 93 9c 04 	sts	0x049C, r24
		#endif
			FirstInitialized = true;
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	80 93 19 04 	sts	0x0419, r24
	}		
}
    3250:	0f 90       	pop	r0
    3252:	cf 91       	pop	r28
    3254:	df 91       	pop	r29
    3256:	1f 91       	pop	r17
    3258:	0f 91       	pop	r16
    325a:	08 95       	ret

0000325c <SystemProcess>:

void SystemProcess(void) {
    325c:	df 93       	push	r29
    325e:	cf 93       	push	r28
    3260:	cd b7       	in	r28, 0x3d	; 61
    3262:	de b7       	in	r29, 0x3e	; 62
	while(1) {
		sei();
    3264:	78 94       	sei

		#if defined(USE_SWITCH)
			GetSwitchStatus();
    3266:	0e 94 0f 11 	call	0x221e	; 0x221e <GetSwitchStatus>
		#endif
		#if defined(USE_SENSOR)
			GetSensorStatus();
    326a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <GetSensorStatus>
		#endif
		#if defined(USE_MU)
			controller = GetControllerData();
    326e:	0e 94 bb 01 	call	0x376	; 0x376 <GetControllerData>
    3272:	90 93 93 04 	sts	0x0493, r25
    3276:	80 93 92 04 	sts	0x0492, r24
			Sensor = GetSensorData();
		#endif
		

#if CTRL_CHECK
		if(!CtrlLost){
    327a:	90 91 a7 04 	lds	r25, 0x04A7
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	89 27       	eor	r24, r25
    3282:	88 23       	and	r24, r24
    3284:	91 f0       	breq	.+36     	; 0x32aa <SystemProcess+0x4e>
#endif
#if POWER_CHECK
			if(!powerLost){				
    3286:	90 91 54 05 	lds	r25, 0x0554
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	89 27       	eor	r24, r25
    328e:	88 23       	and	r24, r24
    3290:	19 f0       	breq	.+6      	; 0x3298 <SystemProcess+0x3c>
#endif
/*
 * 以下にメインのプロセスを記述
 */
/********************************************/
				UserTasks();
    3292:	0e 94 74 19 	call	0x32e8	; 0x32e8 <UserTasks>
    3296:	0b c0       	rjmp	.+22     	; 0x32ae <SystemProcess+0x52>
/********************************************/

#if POWER_CHECK
			}
			else{
				ProcessJobInitialize(); // 変数の初期化
    3298:	0e 94 34 18 	call	0x3068	; 0x3068 <ProcessJobInitialize>
				controller = ControllerDataReset();  // コントローラーの初期化
    329c:	0e 94 de 01 	call	0x3bc	; 0x3bc <ControllerDataReset>
    32a0:	90 93 93 04 	sts	0x0493, r25
    32a4:	80 93 92 04 	sts	0x0492, r24
    32a8:	02 c0       	rjmp	.+4      	; 0x32ae <SystemProcess+0x52>
			}	
#endif
#if CTRL_CHECK
		}
		else{
			AllActuatorReset();  // 全アクチュエータのリセットと変数の初期化
    32aa:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <AllActuatorReset>
		}	
#endif	
		ModeLedControl();
    32ae:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <ModeLedControl>

		#if defined(USE_DATALINE_CHECK)
		if(LineStatus == NO_DATA_IN_LINE){
    32b2:	80 91 64 01 	lds	r24, 0x0164
    32b6:	88 23       	and	r24, r24
    32b8:	21 f0       	breq	.+8      	; 0x32c2 <SystemProcess+0x66>
			LedArray[DATALINE_LED_NO] = LED_ON;
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	80 93 3d 05 	sts	0x053D, r24
    32c0:	02 c0       	rjmp	.+4      	; 0x32c6 <SystemProcess+0x6a>
		}
		else {
			LedArray[DATALINE_LED_NO] = LED_OFF;
    32c2:	10 92 3d 05 	sts	0x053D, r1
		}
		#endif
		
		#if defined(USE_POWER_CHECK)
			SafetyChecker();
    32c6:	0e 94 13 24 	call	0x4826	; 0x4826 <SafetyChecker>
		#endif
		#if defined(USE_MOTOR)
			MotorUpdate();
    32ca:	0e 94 42 15 	call	0x2a84	; 0x2a84 <MotorUpdate>
		#endif
		#if defined(USE_AIR)
			AirUpdate();
    32ce:	0e 94 70 12 	call	0x24e0	; 0x24e0 <AirUpdate>
		#endif
		#if defined(USE_BUZZER)
			BuzzerUpdate();
    32d2:	0e 94 57 13 	call	0x26ae	; 0x26ae <BuzzerUpdate>
		#endif
		#if defined(USE_LED)
			LedUpdate();
    32d6:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LedUpdate>
		#endif
			#if defined(USE_SENSOR_HUB)
				DummyDataSet();
			#endif
			#if defined(USE_MOTOR_HUB)
				MotorHubUpdate();
    32da:	0e 94 24 05 	call	0xa48	; 0xa48 <MotorHubUpdate>
			#endif
			#if defined(USE_LED_HUB)
				LedHubUpdate();
    32de:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LedHubUpdate>
			#endif
			#if defined(USE_AIR_HUB)
				AirHubUpdate();
    32e2:	0e 94 fe 07 	call	0xffc	; 0xffc <AirHubUpdate>
		#if defined(USE_SENSOR_HUB)
		if(!SensorBoardLost){
			GetSensorDataCommand();
		}		
		#endif		
	}
    32e6:	be cf       	rjmp	.-132    	; 0x3264 <SystemProcess+0x8>

000032e8 <UserTasks>:
}

static void UserTasks(void){
    32e8:	df 93       	push	r29
    32ea:	cf 93       	push	r28
    32ec:	cd b7       	in	r28, 0x3d	; 61
    32ee:	de b7       	in	r29, 0x3e	; 62
	
// Process Change 
/**********************************************************************/
	// Startでプロセスをインクリメント、Selectでデクリメント
	if(PROCESS_INC_BUTTON){
    32f0:	80 91 92 04 	lds	r24, 0x0492
    32f4:	90 91 93 04 	lds	r25, 0x0493
    32f8:	fc 01       	movw	r30, r24
    32fa:	81 81       	ldd	r24, Z+1	; 0x01
    32fc:	84 70       	andi	r24, 0x04	; 4
    32fe:	88 23       	and	r24, r24
    3300:	21 f0       	breq	.+8      	; 0x330a <UserTasks+0x22>
		ProcessIncrementButtonPush = true;
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	80 93 09 04 	sts	0x0409, r24
    3308:	09 c0       	rjmp	.+18     	; 0x331c <UserTasks+0x34>
	}
	else{
		if(ProcessIncrementButtonPush){
    330a:	80 91 09 04 	lds	r24, 0x0409
    330e:	88 23       	and	r24, r24
    3310:	19 f0       	breq	.+6      	; 0x3318 <UserTasks+0x30>
			ProcessIncrementButtonPushed = true;
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	80 93 0a 04 	sts	0x040A, r24
		}
		ProcessIncrementButtonPush = false;					
    3318:	10 92 09 04 	sts	0x0409, r1
	}
			
	if(PROCESS_DEC_BUTTON){
    331c:	80 91 92 04 	lds	r24, 0x0492
    3320:	90 91 93 04 	lds	r25, 0x0493
    3324:	fc 01       	movw	r30, r24
    3326:	81 81       	ldd	r24, Z+1	; 0x01
    3328:	81 70       	andi	r24, 0x01	; 1
    332a:	88 23       	and	r24, r24
    332c:	21 f0       	breq	.+8      	; 0x3336 <UserTasks+0x4e>
		ProcessDecrementButtonPush = true;
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	80 93 0b 04 	sts	0x040B, r24
    3334:	09 c0       	rjmp	.+18     	; 0x3348 <UserTasks+0x60>
	}
	else{
		if(ProcessDecrementButtonPush){
    3336:	80 91 0b 04 	lds	r24, 0x040B
    333a:	88 23       	and	r24, r24
    333c:	19 f0       	breq	.+6      	; 0x3344 <UserTasks+0x5c>
			ProcessDecrementButtonPushed = true;
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	80 93 0c 04 	sts	0x040C, r24
		}
		ProcessDecrementButtonPush = false;					
    3344:	10 92 0b 04 	sts	0x040B, r1
	}			
			
	if(ProcessIncrementButtonPushed){
    3348:	80 91 0a 04 	lds	r24, 0x040A
    334c:	88 23       	and	r24, r24
    334e:	c1 f1       	breq	.+112    	; 0x33c0 <UserTasks+0xd8>
		
		currentProcess++;
    3350:	80 91 94 04 	lds	r24, 0x0494
    3354:	90 91 95 04 	lds	r25, 0x0495
    3358:	01 96       	adiw	r24, 0x01	; 1
    335a:	90 93 95 04 	sts	0x0495, r25
    335e:	80 93 94 04 	sts	0x0494, r24
		if(currentProcess > 3){
    3362:	80 91 94 04 	lds	r24, 0x0494
    3366:	90 91 95 04 	lds	r25, 0x0495
    336a:	84 30       	cpi	r24, 0x04	; 4
    336c:	91 05       	cpc	r25, r1
    336e:	24 f0       	brlt	.+8      	; 0x3378 <UserTasks+0x90>
			currentProcess = 0;
    3370:	10 92 95 04 	sts	0x0495, r1
    3374:	10 92 94 04 	sts	0x0494, r1
		}
					
		ResetProcessChange();
    3378:	0e 94 4a 22 	call	0x4494	; 0x4494 <ResetProcessChange>
		if(currentProcess == 1){
    337c:	80 91 94 04 	lds	r24, 0x0494
    3380:	90 91 95 04 	lds	r25, 0x0495
    3384:	81 30       	cpi	r24, 0x01	; 1
    3386:	91 05       	cpc	r25, r1
    3388:	79 f4       	brne	.+30     	; 0x33a8 <UserTasks+0xc0>
			F_BELT_M.status = BACK;
    338a:	82 e0       	ldi	r24, 0x02	; 2
    338c:	80 93 ba 04 	sts	0x04BA, r24
			F_BELT_M.pwm = F_BELT_PWM;
    3390:	81 e4       	ldi	r24, 0x41	; 65
    3392:	80 93 bb 04 	sts	0x04BB, r24
			B_BELT_M.status = BACK;
    3396:	82 e0       	ldi	r24, 0x02	; 2
    3398:	80 93 bc 04 	sts	0x04BC, r24
			B_BELT_M.pwm = B_BELT_PWM;
    339c:	8e e1       	ldi	r24, 0x1E	; 30
    339e:	80 93 bd 04 	sts	0x04BD, r24
			BeltStatus = FOR;
    33a2:	81 e0       	ldi	r24, 0x01	; 1
    33a4:	80 93 02 04 	sts	0x0402, r24
		}		
		if(currentProcess == 3){
    33a8:	80 91 94 04 	lds	r24, 0x0494
    33ac:	90 91 95 04 	lds	r25, 0x0495
    33b0:	83 30       	cpi	r24, 0x03	; 3
    33b2:	91 05       	cpc	r25, r1
    33b4:	19 f4       	brne	.+6      	; 0x33bc <UserTasks+0xd4>
			FRONT_TIRE_A = AIR_ON;
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	80 93 ce 04 	sts	0x04CE, r24
		}
		ProcessIncrementButtonPushed = false;
    33bc:	10 92 0a 04 	sts	0x040A, r1
	}
				
	if(ProcessDecrementButtonPushed){
    33c0:	80 91 0c 04 	lds	r24, 0x040C
    33c4:	88 23       	and	r24, r24
    33c6:	d9 f0       	breq	.+54     	; 0x33fe <UserTasks+0x116>
		if(currentProcess > 0){
    33c8:	80 91 94 04 	lds	r24, 0x0494
    33cc:	90 91 95 04 	lds	r25, 0x0495
    33d0:	18 16       	cp	r1, r24
    33d2:	19 06       	cpc	r1, r25
    33d4:	54 f4       	brge	.+20     	; 0x33ea <UserTasks+0x102>
			currentProcess-=1;
    33d6:	80 91 94 04 	lds	r24, 0x0494
    33da:	90 91 95 04 	lds	r25, 0x0495
    33de:	01 97       	sbiw	r24, 0x01	; 1
    33e0:	90 93 95 04 	sts	0x0495, r25
    33e4:	80 93 94 04 	sts	0x0494, r24
    33e8:	06 c0       	rjmp	.+12     	; 0x33f6 <UserTasks+0x10e>
		}
		else{
			currentProcess = 3;
    33ea:	83 e0       	ldi	r24, 0x03	; 3
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	90 93 95 04 	sts	0x0495, r25
    33f2:	80 93 94 04 	sts	0x0494, r24
		}
		ResetProcessChange();
    33f6:	0e 94 4a 22 	call	0x4494	; 0x4494 <ResetProcessChange>
					
		ProcessDecrementButtonPushed = false;
    33fa:	10 92 0c 04 	sts	0x040C, r1


// Main Process
//==================================================================================================================================//
				
	ProcessFunctions[currentProcess]();			// This is Sub Process
    33fe:	80 91 94 04 	lds	r24, 0x0494
    3402:	90 91 95 04 	lds	r25, 0x0495
    3406:	88 0f       	add	r24, r24
    3408:	99 1f       	adc	r25, r25
    340a:	8a 56       	subi	r24, 0x6A	; 106
    340c:	9b 4f       	sbci	r25, 0xFB	; 251
    340e:	fc 01       	movw	r30, r24
    3410:	80 81       	ld	r24, Z
    3412:	91 81       	ldd	r25, Z+1	; 0x01
    3414:	fc 01       	movw	r30, r24
    3416:	09 95       	icall
				
				
// Back Unit Up Down
//---------------------------------------------------------------------//
	if(BACK_UNIT_UP_DOWN_BUTTON && !FLAT_PLANE_LOCK_BUTTON && !LOCK_FREE_BUTTON){
    3418:	80 91 92 04 	lds	r24, 0x0492
    341c:	90 91 93 04 	lds	r25, 0x0493
    3420:	fc 01       	movw	r30, r24
    3422:	80 81       	ld	r24, Z
    3424:	80 74       	andi	r24, 0x40	; 64
    3426:	88 23       	and	r24, r24
    3428:	b1 f0       	breq	.+44     	; 0x3456 <UserTasks+0x16e>
    342a:	80 91 92 04 	lds	r24, 0x0492
    342e:	90 91 93 04 	lds	r25, 0x0493
    3432:	fc 01       	movw	r30, r24
    3434:	80 81       	ld	r24, Z
    3436:	80 78       	andi	r24, 0x80	; 128
    3438:	88 23       	and	r24, r24
    343a:	69 f4       	brne	.+26     	; 0x3456 <UserTasks+0x16e>
    343c:	80 91 92 04 	lds	r24, 0x0492
    3440:	90 91 93 04 	lds	r25, 0x0493
    3444:	fc 01       	movw	r30, r24
    3446:	80 81       	ld	r24, Z
    3448:	80 72       	andi	r24, 0x20	; 32
    344a:	88 23       	and	r24, r24
    344c:	21 f4       	brne	.+8      	; 0x3456 <UserTasks+0x16e>
		BackUnitUpButtonPush = true;
    344e:	81 e0       	ldi	r24, 0x01	; 1
    3450:	80 93 13 04 	sts	0x0413, r24
    3454:	09 c0       	rjmp	.+18     	; 0x3468 <UserTasks+0x180>
	}
	else{
		if(BackUnitUpButtonPush){
    3456:	80 91 13 04 	lds	r24, 0x0413
    345a:	88 23       	and	r24, r24
    345c:	19 f0       	breq	.+6      	; 0x3464 <UserTasks+0x17c>
			BackUnitUpButtonPushed = true;
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	80 93 14 04 	sts	0x0414, r24
		}
		BackUnitUpButtonPush = false;
    3464:	10 92 13 04 	sts	0x0413, r1
	}
				
	if(BackUnitUpButtonPushed){
    3468:	80 91 14 04 	lds	r24, 0x0414
    346c:	88 23       	and	r24, r24
    346e:	81 f0       	breq	.+32     	; 0x3490 <UserTasks+0x1a8>
		TIRE_A = !TIRE_A;
    3470:	80 91 cc 04 	lds	r24, 0x04CC
    3474:	88 2f       	mov	r24, r24
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	21 e0       	ldi	r18, 0x01	; 1
    347a:	00 97       	sbiw	r24, 0x00	; 0
    347c:	09 f4       	brne	.+2      	; 0x3480 <UserTasks+0x198>
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	81 e0       	ldi	r24, 0x01	; 1
    3482:	82 27       	eor	r24, r18
    3484:	88 2f       	mov	r24, r24
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	80 93 cc 04 	sts	0x04CC, r24
		BackUnitUpButtonPushed = false;
    348c:	10 92 14 04 	sts	0x0414, r1

				
// Tire Reset
//---------------------------------------------------------------------//
#if USE_TIRE_STOP
	if(TIRE_STATUS_RESET_BUTTON){
    3490:	80 91 92 04 	lds	r24, 0x0492
    3494:	90 91 93 04 	lds	r25, 0x0493
    3498:	fc 01       	movw	r30, r24
    349a:	81 81       	ldd	r24, Z+1	; 0x01
    349c:	82 70       	andi	r24, 0x02	; 2
    349e:	88 23       	and	r24, r24
    34a0:	c9 f0       	breq	.+50     	; 0x34d4 <UserTasks+0x1ec>
		LeftTire.Pwm = 0;
    34a2:	10 92 d1 03 	sts	0x03D1, r1
		RightTire.Pwm = 0;
    34a6:	10 92 dc 03 	sts	0x03DC, r1
		LeftTire.Tire = _BRAKE;
    34aa:	88 e0       	ldi	r24, 0x08	; 8
    34ac:	80 93 d0 03 	sts	0x03D0, r24
		RightTire.Tire = _BRAKE;
    34b0:	88 e0       	ldi	r24, 0x08	; 8
    34b2:	80 93 db 03 	sts	0x03DB, r24
					
		BeltStatus = BRAKE;
    34b6:	83 e0       	ldi	r24, 0x03	; 3
    34b8:	80 93 02 04 	sts	0x0402, r24
		F_BELT_M.status = BRAKE;
    34bc:	83 e0       	ldi	r24, 0x03	; 3
    34be:	80 93 ba 04 	sts	0x04BA, r24
		F_BELT_M.pwm = BRAKE_PWM;
    34c2:	84 e6       	ldi	r24, 0x64	; 100
    34c4:	80 93 bb 04 	sts	0x04BB, r24
		B_BELT_M.status = BRAKE;
    34c8:	83 e0       	ldi	r24, 0x03	; 3
    34ca:	80 93 bc 04 	sts	0x04BC, r24
		B_BELT_M.pwm = BRAKE_PWM;
    34ce:	84 e6       	ldi	r24, 0x64	; 100
    34d0:	80 93 bd 04 	sts	0x04BD, r24
	}
#endif
//---------------------------------------------------------------------//
// End Tire Reset

	TireControl(&LeftTire);
    34d4:	80 ed       	ldi	r24, 0xD0	; 208
    34d6:	93 e0       	ldi	r25, 0x03	; 3
    34d8:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <TireControl>
	TireControl(&RightTire);
    34dc:	8b ed       	ldi	r24, 0xDB	; 219
    34de:	93 e0       	ldi	r25, 0x03	; 3
    34e0:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <TireControl>
	TireControl(&FrontTire);
    34e4:	86 ee       	ldi	r24, 0xE6	; 230
    34e6:	93 e0       	ldi	r25, 0x03	; 3
    34e8:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <TireControl>
				
	if(TIRE_A == AIR_OFF && tmpBackUnitStatus == AIR_ON){
    34ec:	90 91 cc 04 	lds	r25, 0x04CC
    34f0:	81 e0       	ldi	r24, 0x01	; 1
    34f2:	89 27       	eor	r24, r25
    34f4:	88 23       	and	r24, r24
    34f6:	39 f0       	breq	.+14     	; 0x3506 <UserTasks+0x21e>
    34f8:	80 91 fc 03 	lds	r24, 0x03FC
    34fc:	88 23       	and	r24, r24
    34fe:	19 f0       	breq	.+6      	; 0x3506 <UserTasks+0x21e>
		BackUnitDowned = true;
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	80 93 fd 03 	sts	0x03FD, r24
	}
				
	if(BackUnitDowned){
    3506:	80 91 fd 03 	lds	r24, 0x03FD
    350a:	88 23       	and	r24, r24
    350c:	39 f0       	breq	.+14     	; 0x351c <UserTasks+0x234>
		Steering.Tire = _BRAKE;
    350e:	88 e0       	ldi	r24, 0x08	; 8
    3510:	80 93 f1 03 	sts	0x03F1, r24
		Steering.Pwm = 0;
    3514:	10 92 f2 03 	sts	0x03F2, r1
		BackUnitDowned = false;
    3518:	10 92 fd 03 	sts	0x03FD, r1
	}			
	tmpBackUnitStatus = TIRE_A;	
    351c:	80 91 cc 04 	lds	r24, 0x04CC
    3520:	80 93 fc 03 	sts	0x03FC, r24
	
	
	if(!TIRE_A && currentProcess != 3){
    3524:	90 91 cc 04 	lds	r25, 0x04CC
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	89 27       	eor	r24, r25
    352c:	88 23       	and	r24, r24
    352e:	51 f0       	breq	.+20     	; 0x3544 <UserTasks+0x25c>
    3530:	80 91 94 04 	lds	r24, 0x0494
    3534:	90 91 95 04 	lds	r25, 0x0495
    3538:	83 30       	cpi	r24, 0x03	; 3
    353a:	91 05       	cpc	r25, r1
    353c:	19 f0       	breq	.+6      	; 0x3544 <UserTasks+0x25c>
		SteeringControl();
    353e:	0e 94 0b 22 	call	0x4416	; 0x4416 <SteeringControl>
    3542:	60 c0       	rjmp	.+192    	; 0x3604 <UserTasks+0x31c>
	}	
	else if(TIRE_A || currentProcess == 3){
    3544:	80 91 cc 04 	lds	r24, 0x04CC
    3548:	88 23       	and	r24, r24
    354a:	41 f4       	brne	.+16     	; 0x355c <UserTasks+0x274>
    354c:	80 91 94 04 	lds	r24, 0x0494
    3550:	90 91 95 04 	lds	r25, 0x0495
    3554:	83 30       	cpi	r24, 0x03	; 3
    3556:	91 05       	cpc	r25, r1
    3558:	09 f0       	breq	.+2      	; 0x355c <UserTasks+0x274>
    355a:	54 c0       	rjmp	.+168    	; 0x3604 <UserTasks+0x31c>
		if(currentProcess == 3){
    355c:	80 91 94 04 	lds	r24, 0x0494
    3560:	90 91 95 04 	lds	r25, 0x0495
    3564:	83 30       	cpi	r24, 0x03	; 3
    3566:	91 05       	cpc	r25, r1
    3568:	39 f5       	brne	.+78     	; 0x35b8 <UserTasks+0x2d0>
			if(STEERING_LEFT_BUTTON){
    356a:	80 91 92 04 	lds	r24, 0x0492
    356e:	90 91 93 04 	lds	r25, 0x0493
    3572:	fc 01       	movw	r30, r24
    3574:	81 81       	ldd	r24, Z+1	; 0x01
    3576:	80 72       	andi	r24, 0x20	; 32
    3578:	88 23       	and	r24, r24
    357a:	39 f0       	breq	.+14     	; 0x358a <UserTasks+0x2a2>
				STEERING_M.status = FOR;
    357c:	81 e0       	ldi	r24, 0x01	; 1
    357e:	80 93 b8 04 	sts	0x04B8, r24
				STEERING_M.pwm = STEERING_LEFT_PWM;
    3582:	8a e0       	ldi	r24, 0x0A	; 10
    3584:	80 93 b9 04 	sts	0x04B9, r24
    3588:	3d c0       	rjmp	.+122    	; 0x3604 <UserTasks+0x31c>
			}
			else if(STEERING_RIGHT_BUTTON){
    358a:	80 91 92 04 	lds	r24, 0x0492
    358e:	90 91 93 04 	lds	r25, 0x0493
    3592:	fc 01       	movw	r30, r24
    3594:	81 81       	ldd	r24, Z+1	; 0x01
    3596:	80 74       	andi	r24, 0x40	; 64
    3598:	88 23       	and	r24, r24
    359a:	39 f0       	breq	.+14     	; 0x35aa <UserTasks+0x2c2>
				STEERING_M.status = BACK;
    359c:	82 e0       	ldi	r24, 0x02	; 2
    359e:	80 93 b8 04 	sts	0x04B8, r24
				STEERING_M.pwm = STEERING_RIGHT_PWM;
    35a2:	8c e0       	ldi	r24, 0x0C	; 12
    35a4:	80 93 b9 04 	sts	0x04B9, r24
    35a8:	2d c0       	rjmp	.+90     	; 0x3604 <UserTasks+0x31c>
			}
			else{
				STEERING_M.status = BRAKE;
    35aa:	83 e0       	ldi	r24, 0x03	; 3
    35ac:	80 93 b8 04 	sts	0x04B8, r24
				STEERING_M.pwm = BRAKE_PWM;
    35b0:	84 e6       	ldi	r24, 0x64	; 100
    35b2:	80 93 b9 04 	sts	0x04B9, r24
    35b6:	26 c0       	rjmp	.+76     	; 0x3604 <UserTasks+0x31c>
			}
		}	
		else{
			if(STEERING_LEFT_BUTTON){
    35b8:	80 91 92 04 	lds	r24, 0x0492
    35bc:	90 91 93 04 	lds	r25, 0x0493
    35c0:	fc 01       	movw	r30, r24
    35c2:	81 81       	ldd	r24, Z+1	; 0x01
    35c4:	80 72       	andi	r24, 0x20	; 32
    35c6:	88 23       	and	r24, r24
    35c8:	39 f0       	breq	.+14     	; 0x35d8 <UserTasks+0x2f0>
				STEERING_M.status = FOR;
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	80 93 b8 04 	sts	0x04B8, r24
				STEERING_M.pwm = SS_STEERING_LEFT_PWM;
    35d0:	84 e1       	ldi	r24, 0x14	; 20
    35d2:	80 93 b9 04 	sts	0x04B9, r24
    35d6:	16 c0       	rjmp	.+44     	; 0x3604 <UserTasks+0x31c>
			}
			else if(STEERING_RIGHT_BUTTON){
    35d8:	80 91 92 04 	lds	r24, 0x0492
    35dc:	90 91 93 04 	lds	r25, 0x0493
    35e0:	fc 01       	movw	r30, r24
    35e2:	81 81       	ldd	r24, Z+1	; 0x01
    35e4:	80 74       	andi	r24, 0x40	; 64
    35e6:	88 23       	and	r24, r24
    35e8:	39 f0       	breq	.+14     	; 0x35f8 <UserTasks+0x310>
				STEERING_M.status = BACK;
    35ea:	82 e0       	ldi	r24, 0x02	; 2
    35ec:	80 93 b8 04 	sts	0x04B8, r24
				STEERING_M.pwm = SS_STEERING_RIGHT_PWM;
    35f0:	84 e1       	ldi	r24, 0x14	; 20
    35f2:	80 93 b9 04 	sts	0x04B9, r24
    35f6:	06 c0       	rjmp	.+12     	; 0x3604 <UserTasks+0x31c>
			}
			else{
				STEERING_M.status = BRAKE;
    35f8:	83 e0       	ldi	r24, 0x03	; 3
    35fa:	80 93 b8 04 	sts	0x04B8, r24
				STEERING_M.pwm = BRAKE_PWM;
    35fe:	84 e6       	ldi	r24, 0x64	; 100
    3600:	80 93 b9 04 	sts	0x04B9, r24
			}
		}		
	}					
				
	if(controller->detail.Button.Y && currentProcess == 3){
    3604:	80 91 92 04 	lds	r24, 0x0492
    3608:	90 91 93 04 	lds	r25, 0x0493
    360c:	fc 01       	movw	r30, r24
    360e:	80 81       	ld	r24, Z
    3610:	88 70       	andi	r24, 0x08	; 8
    3612:	88 23       	and	r24, r24
    3614:	69 f0       	breq	.+26     	; 0x3630 <UserTasks+0x348>
    3616:	80 91 94 04 	lds	r24, 0x0494
    361a:	90 91 95 04 	lds	r25, 0x0495
    361e:	83 30       	cpi	r24, 0x03	; 3
    3620:	91 05       	cpc	r25, r1
    3622:	31 f4       	brne	.+12     	; 0x3630 <UserTasks+0x348>
		FRONT_TIRE.status = FOR;
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	80 93 be 04 	sts	0x04BE, r24
		FRONT_TIRE.pwm = 20;
    362a:	84 e1       	ldi	r24, 0x14	; 20
    362c:	80 93 bf 04 	sts	0x04BF, r24
	}
	
	if(currentProcess == 3 && BACK_BUTTON){
    3630:	80 91 94 04 	lds	r24, 0x0494
    3634:	90 91 95 04 	lds	r25, 0x0495
    3638:	83 30       	cpi	r24, 0x03	; 3
    363a:	91 05       	cpc	r25, r1
    363c:	f9 f4       	brne	.+62     	; 0x367c <UserTasks+0x394>
    363e:	80 91 92 04 	lds	r24, 0x0492
    3642:	90 91 93 04 	lds	r25, 0x0493
    3646:	fc 01       	movw	r30, r24
    3648:	80 81       	ld	r24, Z
    364a:	84 70       	andi	r24, 0x04	; 4
    364c:	88 23       	and	r24, r24
    364e:	b1 f0       	breq	.+44     	; 0x367c <UserTasks+0x394>
		LTIRE.status = BACK;
    3650:	82 e0       	ldi	r24, 0x02	; 2
    3652:	80 93 3f 05 	sts	0x053F, r24
		LTIRE.pwm = LTIRE_SLOPE_BACK_PWM;
    3656:	87 e0       	ldi	r24, 0x07	; 7
    3658:	80 93 40 05 	sts	0x0540, r24
		RTIRE.status = BACK;
    365c:	82 e0       	ldi	r24, 0x02	; 2
    365e:	80 93 41 05 	sts	0x0541, r24
		RTIRE.pwm = RTIRE_SLOPE_BACK_PWM;
    3662:	87 e0       	ldi	r24, 0x07	; 7
    3664:	80 93 42 05 	sts	0x0542, r24
		
		LeftTire.Tire = _BRAKE;
    3668:	88 e0       	ldi	r24, 0x08	; 8
    366a:	80 93 d0 03 	sts	0x03D0, r24
		LeftTire.Pwm = 0;
    366e:	10 92 d1 03 	sts	0x03D1, r1
		RightTire.Tire = _BRAKE;
    3672:	88 e0       	ldi	r24, 0x08	; 8
    3674:	80 93 db 03 	sts	0x03DB, r24
		RightTire.Pwm = 0;
    3678:	10 92 dc 03 	sts	0x03DC, r1
	}
	
	
	if(STEERING_LEFT_SW && STEERING_M.status == FOR){
    367c:	80 91 18 05 	lds	r24, 0x0518
    3680:	88 23       	and	r24, r24
    3682:	51 f0       	breq	.+20     	; 0x3698 <UserTasks+0x3b0>
    3684:	80 91 b8 04 	lds	r24, 0x04B8
    3688:	81 30       	cpi	r24, 0x01	; 1
    368a:	31 f4       	brne	.+12     	; 0x3698 <UserTasks+0x3b0>
		STEERING_M.status = BRAKE;
    368c:	83 e0       	ldi	r24, 0x03	; 3
    368e:	80 93 b8 04 	sts	0x04B8, r24
		STEERING_M.pwm = BRAKE_PWM;
    3692:	84 e6       	ldi	r24, 0x64	; 100
    3694:	80 93 b9 04 	sts	0x04B9, r24
	}
				
	if(STEERING_RIGHT_SW && STEERING_M.status == BACK){
    3698:	80 91 19 05 	lds	r24, 0x0519
    369c:	88 23       	and	r24, r24
    369e:	51 f0       	breq	.+20     	; 0x36b4 <UserTasks+0x3cc>
    36a0:	80 91 b8 04 	lds	r24, 0x04B8
    36a4:	82 30       	cpi	r24, 0x02	; 2
    36a6:	31 f4       	brne	.+12     	; 0x36b4 <UserTasks+0x3cc>
		STEERING_M.status = BRAKE;
    36a8:	83 e0       	ldi	r24, 0x03	; 3
    36aa:	80 93 b8 04 	sts	0x04B8, r24
		STEERING_M.pwm = BRAKE_PWM;
    36ae:	84 e6       	ldi	r24, 0x64	; 100
    36b0:	80 93 b9 04 	sts	0x04B9, r24
	}
	
	if(STEERING_LEFT_SW){
    36b4:	80 91 18 05 	lds	r24, 0x0518
    36b8:	88 23       	and	r24, r24
    36ba:	69 f0       	breq	.+26     	; 0x36d6 <UserTasks+0x3ee>
		if(!LeftLimitSwPushed){
    36bc:	90 91 04 04 	lds	r25, 0x0404
    36c0:	81 e0       	ldi	r24, 0x01	; 1
    36c2:	89 27       	eor	r24, r25
    36c4:	88 23       	and	r24, r24
    36c6:	49 f0       	breq	.+18     	; 0x36da <UserTasks+0x3f2>
			LeftLimitSwPush = true;
    36c8:	81 e0       	ldi	r24, 0x01	; 1
    36ca:	80 93 03 04 	sts	0x0403, r24
			LeftLimitSwPushed = true;
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	80 93 04 04 	sts	0x0404, r24
    36d4:	02 c0       	rjmp	.+4      	; 0x36da <UserTasks+0x3f2>
		}		
	}
	else {
		LeftLimitSwPushed = false;
    36d6:	10 92 04 04 	sts	0x0404, r1
	}
	
	if(STEERING_RIGHT_SW){
    36da:	80 91 19 05 	lds	r24, 0x0519
    36de:	88 23       	and	r24, r24
    36e0:	69 f0       	breq	.+26     	; 0x36fc <UserTasks+0x414>
		if(!RightLimitSwPushed){
    36e2:	90 91 06 04 	lds	r25, 0x0406
    36e6:	81 e0       	ldi	r24, 0x01	; 1
    36e8:	89 27       	eor	r24, r25
    36ea:	88 23       	and	r24, r24
    36ec:	49 f0       	breq	.+18     	; 0x3700 <UserTasks+0x418>
			RightLimitSwPush = true;
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	80 93 05 04 	sts	0x0405, r24
			RightLimitSwPushed = true;
    36f4:	81 e0       	ldi	r24, 0x01	; 1
    36f6:	80 93 06 04 	sts	0x0406, r24
    36fa:	02 c0       	rjmp	.+4      	; 0x3700 <UserTasks+0x418>
		}		
	}
	else {
		RightLimitSwPushed = false;
    36fc:	10 92 06 04 	sts	0x0406, r1
	}
	
	if(LeftLimitSwPush){
    3700:	80 91 03 04 	lds	r24, 0x0403
    3704:	88 23       	and	r24, r24
    3706:	29 f0       	breq	.+10     	; 0x3712 <UserTasks+0x42a>
		LeftLimitSwCount++;
    3708:	80 91 07 04 	lds	r24, 0x0407
    370c:	8f 5f       	subi	r24, 0xFF	; 255
    370e:	80 93 07 04 	sts	0x0407, r24
	}
	
	if(LeftLimitSwCount >= BACK_UNIT_DOWN_SPAN){
    3712:	80 91 07 04 	lds	r24, 0x0407
    3716:	8f 30       	cpi	r24, 0x0F	; 15
    3718:	30 f0       	brcs	.+12     	; 0x3726 <UserTasks+0x43e>
		LeftLimitSwCount = 0;
    371a:	10 92 07 04 	sts	0x0407, r1
		LeftLimitSwPush = false;
    371e:	10 92 03 04 	sts	0x0403, r1
		TIRE_A = AIR_OFF;
    3722:	10 92 cc 04 	sts	0x04CC, r1
	}
	
	if(RightLimitSwPush){
    3726:	80 91 05 04 	lds	r24, 0x0405
    372a:	88 23       	and	r24, r24
    372c:	29 f0       	breq	.+10     	; 0x3738 <UserTasks+0x450>
		RightLimitSwCount++;
    372e:	80 91 08 04 	lds	r24, 0x0408
    3732:	8f 5f       	subi	r24, 0xFF	; 255
    3734:	80 93 08 04 	sts	0x0408, r24
	}
	
	if(RightLimitSwCount >= BACK_UNIT_DOWN_SPAN){
    3738:	80 91 08 04 	lds	r24, 0x0408
    373c:	8f 30       	cpi	r24, 0x0F	; 15
    373e:	30 f0       	brcs	.+12     	; 0x374c <UserTasks+0x464>
		RightLimitSwCount = 0;
    3740:	10 92 08 04 	sts	0x0408, r1
		RightLimitSwPush = false;
    3744:	10 92 05 04 	sts	0x0405, r1
		TIRE_A = AIR_OFF;
    3748:	10 92 cc 04 	sts	0x04CC, r1
	}
//===========================================================================================================================//
// End MainProcess																												
}
    374c:	cf 91       	pop	r28
    374e:	df 91       	pop	r29
    3750:	08 95       	ret

00003752 <ProcessJob0>:
#if defined(USE_SUB_PROCESS)
#if (USING_PROCESS > 0)
/*
 * スラロームモード
 */
static void ProcessJob0(void) {
    3752:	df 93       	push	r29
    3754:	cf 93       	push	r28
    3756:	cd b7       	in	r28, 0x3d	; 61
    3758:	de b7       	in	r29, 0x3e	; 62
	LeftTire.MaxPwm = LTIRE_MAX_PWM;
    375a:	8e e1       	ldi	r24, 0x1E	; 30
    375c:	80 93 d8 03 	sts	0x03D8, r24
	RightTire.MaxPwm = RTIRE_MAX_PWM;
    3760:	8e e1       	ldi	r24, 0x1E	; 30
    3762:	80 93 e3 03 	sts	0x03E3, r24
	Steering.UpSpan = STEERING_PWM_UP_SPAN;
    3766:	82 e0       	ldi	r24, 0x02	; 2
    3768:	80 93 f6 03 	sts	0x03F6, r24
	
	if(ACCEL_BUTTON){
    376c:	80 91 92 04 	lds	r24, 0x0492
    3770:	90 91 93 04 	lds	r25, 0x0493
    3774:	fc 01       	movw	r30, r24
    3776:	80 81       	ld	r24, Z
    3778:	82 70       	andi	r24, 0x02	; 2
    377a:	88 23       	and	r24, r24
    377c:	51 f0       	breq	.+20     	; 0x3792 <ProcessJob0+0x40>
		LeftTire.Act = FOR;
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	80 93 d9 03 	sts	0x03D9, r24
		RightTire.Act = FOR;
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	80 93 e4 03 	sts	0x03E4, r24
		FrontTire.Act = FOR;
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	80 93 ef 03 	sts	0x03EF, r24
    3790:	19 c0       	rjmp	.+50     	; 0x37c4 <ProcessJob0+0x72>
	}
	else if(BACK_BUTTON){
    3792:	80 91 92 04 	lds	r24, 0x0492
    3796:	90 91 93 04 	lds	r25, 0x0493
    379a:	fc 01       	movw	r30, r24
    379c:	80 81       	ld	r24, Z
    379e:	84 70       	andi	r24, 0x04	; 4
    37a0:	88 23       	and	r24, r24
    37a2:	51 f0       	breq	.+20     	; 0x37b8 <ProcessJob0+0x66>
		LeftTire.Act = BACK;
    37a4:	82 e0       	ldi	r24, 0x02	; 2
    37a6:	80 93 d9 03 	sts	0x03D9, r24
		RightTire.Act = BACK;
    37aa:	82 e0       	ldi	r24, 0x02	; 2
    37ac:	80 93 e4 03 	sts	0x03E4, r24
		FrontTire.Act = BACK;
    37b0:	82 e0       	ldi	r24, 0x02	; 2
    37b2:	80 93 ef 03 	sts	0x03EF, r24
    37b6:	06 c0       	rjmp	.+12     	; 0x37c4 <ProcessJob0+0x72>
	}
	else {
		LeftTire.Act = FREE;
    37b8:	10 92 d9 03 	sts	0x03D9, r1
		RightTire.Act = FREE;
    37bc:	10 92 e4 03 	sts	0x03E4, r1
		FrontTire.Act = FREE;
    37c0:	10 92 ef 03 	sts	0x03EF, r1
	}
	
	F_BELT_M.status = BRAKE;
    37c4:	83 e0       	ldi	r24, 0x03	; 3
    37c6:	80 93 ba 04 	sts	0x04BA, r24
	F_BELT_M.pwm = BRAKE_PWM;
    37ca:	84 e6       	ldi	r24, 0x64	; 100
    37cc:	80 93 bb 04 	sts	0x04BB, r24
	B_BELT_M.status = BRAKE;
    37d0:	83 e0       	ldi	r24, 0x03	; 3
    37d2:	80 93 bc 04 	sts	0x04BC, r24
	B_BELT_M.pwm = BRAKE_PWM;
    37d6:	84 e6       	ldi	r24, 0x64	; 100
    37d8:	80 93 bd 04 	sts	0x04BD, r24
	BeltStatus = BRAKE;
    37dc:	83 e0       	ldi	r24, 0x03	; 3
    37de:	80 93 02 04 	sts	0x0402, r24
	
	
	if(ARM_BUTTON){
    37e2:	80 91 92 04 	lds	r24, 0x0492
    37e6:	90 91 93 04 	lds	r25, 0x0493
    37ea:	fc 01       	movw	r30, r24
    37ec:	80 81       	ld	r24, Z
    37ee:	81 70       	andi	r24, 0x01	; 1
    37f0:	88 23       	and	r24, r24
    37f2:	21 f0       	breq	.+8      	; 0x37fc <ProcessJob0+0xaa>
		ArmButtonPush = true;
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	80 93 0d 04 	sts	0x040D, r24
    37fa:	09 c0       	rjmp	.+18     	; 0x380e <ProcessJob0+0xbc>
	}
	else {
		if(ArmButtonPush){
    37fc:	80 91 0d 04 	lds	r24, 0x040D
    3800:	88 23       	and	r24, r24
    3802:	19 f0       	breq	.+6      	; 0x380a <ProcessJob0+0xb8>
			ArmButtonPushed = true;
    3804:	81 e0       	ldi	r24, 0x01	; 1
    3806:	80 93 0e 04 	sts	0x040E, r24
		}
		ArmButtonPush = false;
    380a:	10 92 0d 04 	sts	0x040D, r1
	}
	
	if(ArmButtonPushed){
    380e:	80 91 0e 04 	lds	r24, 0x040E
    3812:	88 23       	and	r24, r24
    3814:	81 f0       	breq	.+32     	; 0x3836 <ProcessJob0+0xe4>
		ARM_A = !ARM_A;	
    3816:	80 91 ca 04 	lds	r24, 0x04CA
    381a:	88 2f       	mov	r24, r24
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	21 e0       	ldi	r18, 0x01	; 1
    3820:	00 97       	sbiw	r24, 0x00	; 0
    3822:	09 f4       	brne	.+2      	; 0x3826 <ProcessJob0+0xd4>
    3824:	20 e0       	ldi	r18, 0x00	; 0
    3826:	81 e0       	ldi	r24, 0x01	; 1
    3828:	82 27       	eor	r24, r18
    382a:	88 2f       	mov	r24, r24
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	80 93 ca 04 	sts	0x04CA, r24
		ArmButtonPushed = false;
    3832:	10 92 0e 04 	sts	0x040E, r1
	}
	
	if(FRONT_TIRE_UP_DOWN_BUTTON){
    3836:	80 91 92 04 	lds	r24, 0x0492
    383a:	90 91 93 04 	lds	r25, 0x0493
    383e:	fc 01       	movw	r30, r24
    3840:	81 81       	ldd	r24, Z+1	; 0x01
    3842:	88 70       	andi	r24, 0x08	; 8
    3844:	88 23       	and	r24, r24
    3846:	21 f0       	breq	.+8      	; 0x3850 <ProcessJob0+0xfe>
		FrontTireUpDownButtonPush = true;
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	80 93 17 04 	sts	0x0417, r24
    384e:	09 c0       	rjmp	.+18     	; 0x3862 <ProcessJob0+0x110>
	}
	else{
		if(FrontTireUpDownButtonPush){
    3850:	80 91 17 04 	lds	r24, 0x0417
    3854:	88 23       	and	r24, r24
    3856:	19 f0       	breq	.+6      	; 0x385e <ProcessJob0+0x10c>
			FrontTireUpDownButtonPushed = true;
    3858:	81 e0       	ldi	r24, 0x01	; 1
    385a:	80 93 18 04 	sts	0x0418, r24
		}
		FrontTireUpDownButtonPush = false;
    385e:	10 92 17 04 	sts	0x0417, r1
	}	
	
	if(FrontTireUpDownButtonPushed){
    3862:	80 91 18 04 	lds	r24, 0x0418
    3866:	88 23       	and	r24, r24
    3868:	81 f0       	breq	.+32     	; 0x388a <ProcessJob0+0x138>
		FRONT_TIRE_A = !FRONT_TIRE_A;
    386a:	80 91 ce 04 	lds	r24, 0x04CE
    386e:	88 2f       	mov	r24, r24
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	21 e0       	ldi	r18, 0x01	; 1
    3874:	00 97       	sbiw	r24, 0x00	; 0
    3876:	09 f4       	brne	.+2      	; 0x387a <ProcessJob0+0x128>
    3878:	20 e0       	ldi	r18, 0x00	; 0
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	82 27       	eor	r24, r18
    387e:	88 2f       	mov	r24, r24
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	80 93 ce 04 	sts	0x04CE, r24
		FrontTireUpDownButtonPushed = false;
    3886:	10 92 18 04 	sts	0x0418, r1
	}
	
	if(Slope == _SLOPE_LOCK && tmpSlope == _FREE){
    388a:	80 91 00 04 	lds	r24, 0x0400
    388e:	82 30       	cpi	r24, 0x02	; 2
    3890:	31 f4       	brne	.+12     	; 0x389e <ProcessJob0+0x14c>
    3892:	80 91 01 04 	lds	r24, 0x0401
    3896:	88 30       	cpi	r24, 0x08	; 8
    3898:	11 f4       	brne	.+4      	; 0x389e <ProcessJob0+0x14c>
		PETIT_LOCK_A0_S = AIR_OFF;
    389a:	10 92 cd 04 	sts	0x04CD, r1
	}
	
	LOCK_A0_S = AIR_ON;
    389e:	81 e0       	ldi	r24, 0x01	; 1
    38a0:	80 93 c8 04 	sts	0x04C8, r24
	LOCK_A0_DS = AIR_OFF;
    38a4:	10 92 c9 04 	sts	0x04C9, r1
	F_LOCK_A = AIR_ON;
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	80 93 cb 04 	sts	0x04CB, r24
}
    38ae:	cf 91       	pop	r28
    38b0:	df 91       	pop	r29
    38b2:	08 95       	ret

000038b4 <ProcessJob1>:

#if (USING_PROCESS > 1)
/*
 * 角材モード
 */
static void ProcessJob1(void) {
    38b4:	df 93       	push	r29
    38b6:	cf 93       	push	r28
    38b8:	cd b7       	in	r28, 0x3d	; 61
    38ba:	de b7       	in	r29, 0x3e	; 62
	LeftTire.MaxPwm = K_LTIRE_MAX_PWM;
    38bc:	83 e2       	ldi	r24, 0x23	; 35
    38be:	80 93 d8 03 	sts	0x03D8, r24
	RightTire.MaxPwm = K_RTIRE_MAX_PWM;	
    38c2:	83 e2       	ldi	r24, 0x23	; 35
    38c4:	80 93 e3 03 	sts	0x03E3, r24
	Steering.UpSpan = STEERING_PWM_UP_SPAN;
    38c8:	82 e0       	ldi	r24, 0x02	; 2
    38ca:	80 93 f6 03 	sts	0x03F6, r24
	
	if(ACCEL_BUTTON){
    38ce:	80 91 92 04 	lds	r24, 0x0492
    38d2:	90 91 93 04 	lds	r25, 0x0493
    38d6:	fc 01       	movw	r30, r24
    38d8:	80 81       	ld	r24, Z
    38da:	82 70       	andi	r24, 0x02	; 2
    38dc:	88 23       	and	r24, r24
    38de:	39 f0       	breq	.+14     	; 0x38ee <ProcessJob1+0x3a>
		LeftTire.Act = FOR;
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	80 93 d9 03 	sts	0x03D9, r24
		RightTire.Act = FOR;
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	80 93 e4 03 	sts	0x03E4, r24
    38ec:	14 c0       	rjmp	.+40     	; 0x3916 <ProcessJob1+0x62>
	}
	else if(BACK_BUTTON){
    38ee:	80 91 92 04 	lds	r24, 0x0492
    38f2:	90 91 93 04 	lds	r25, 0x0493
    38f6:	fc 01       	movw	r30, r24
    38f8:	80 81       	ld	r24, Z
    38fa:	84 70       	andi	r24, 0x04	; 4
    38fc:	88 23       	and	r24, r24
    38fe:	39 f0       	breq	.+14     	; 0x390e <ProcessJob1+0x5a>
		LeftTire.Act = BACK;
    3900:	82 e0       	ldi	r24, 0x02	; 2
    3902:	80 93 d9 03 	sts	0x03D9, r24
		RightTire.Act = BACK;
    3906:	82 e0       	ldi	r24, 0x02	; 2
    3908:	80 93 e4 03 	sts	0x03E4, r24
    390c:	04 c0       	rjmp	.+8      	; 0x3916 <ProcessJob1+0x62>
	}
	else {
		LeftTire.Act = FREE;
    390e:	10 92 d9 03 	sts	0x03D9, r1
		RightTire.Act = FREE;
    3912:	10 92 e4 03 	sts	0x03E4, r1
	}	
	FrontTire.Act = FREE;
    3916:	10 92 ef 03 	sts	0x03EF, r1
	
	if(BELT_BACK_BUTTON){
    391a:	80 91 92 04 	lds	r24, 0x0492
    391e:	90 91 93 04 	lds	r25, 0x0493
    3922:	fc 01       	movw	r30, r24
    3924:	81 81       	ldd	r24, Z+1	; 0x01
    3926:	88 70       	andi	r24, 0x08	; 8
    3928:	88 23       	and	r24, r24
    392a:	21 f0       	breq	.+8      	; 0x3934 <ProcessJob1+0x80>
		BeltBackButtonPush = true;
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	80 93 11 04 	sts	0x0411, r24
    3932:	09 c0       	rjmp	.+18     	; 0x3946 <ProcessJob1+0x92>
	}
	else {
		if(BeltBackButtonPush){
    3934:	80 91 11 04 	lds	r24, 0x0411
    3938:	88 23       	and	r24, r24
    393a:	19 f0       	breq	.+6      	; 0x3942 <ProcessJob1+0x8e>
			BeltBackButtonPushed = true;
    393c:	81 e0       	ldi	r24, 0x01	; 1
    393e:	80 93 12 04 	sts	0x0412, r24
		}
		BeltBackButtonPush = false;
    3942:	10 92 11 04 	sts	0x0411, r1
	}
	
	if(BELT_BUTTON){
    3946:	80 91 92 04 	lds	r24, 0x0492
    394a:	90 91 93 04 	lds	r25, 0x0493
    394e:	fc 01       	movw	r30, r24
    3950:	80 81       	ld	r24, Z
    3952:	88 70       	andi	r24, 0x08	; 8
    3954:	88 23       	and	r24, r24
    3956:	21 f0       	breq	.+8      	; 0x3960 <ProcessJob1+0xac>
		BeltButtonPush = true;
    3958:	81 e0       	ldi	r24, 0x01	; 1
    395a:	80 93 0f 04 	sts	0x040F, r24
    395e:	09 c0       	rjmp	.+18     	; 0x3972 <ProcessJob1+0xbe>
	}
	else {
		if(BeltButtonPush){
    3960:	80 91 0f 04 	lds	r24, 0x040F
    3964:	88 23       	and	r24, r24
    3966:	19 f0       	breq	.+6      	; 0x396e <ProcessJob1+0xba>
			BeltButtonPushed = true;
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	80 93 10 04 	sts	0x0410, r24
		}
		BeltButtonPush = false;
    396e:	10 92 0f 04 	sts	0x040F, r1
	}
		
	if(BeltButtonPushed){
    3972:	80 91 10 04 	lds	r24, 0x0410
    3976:	88 23       	and	r24, r24
    3978:	91 f1       	breq	.+100    	; 0x39de <ProcessJob1+0x12a>
		if(BeltStatus == BRAKE || BeltStatus == FREE){
    397a:	80 91 02 04 	lds	r24, 0x0402
    397e:	83 30       	cpi	r24, 0x03	; 3
    3980:	21 f0       	breq	.+8      	; 0x398a <ProcessJob1+0xd6>
    3982:	80 91 02 04 	lds	r24, 0x0402
    3986:	88 23       	and	r24, r24
    3988:	81 f4       	brne	.+32     	; 0x39aa <ProcessJob1+0xf6>
			BeltStatus = FOR;
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	80 93 02 04 	sts	0x0402, r24
			F_BELT_M.status = BACK;
    3990:	82 e0       	ldi	r24, 0x02	; 2
    3992:	80 93 ba 04 	sts	0x04BA, r24
			F_BELT_M.pwm = F_BELT_PWM;
    3996:	81 e4       	ldi	r24, 0x41	; 65
    3998:	80 93 bb 04 	sts	0x04BB, r24
			B_BELT_M.status = BACK;
    399c:	82 e0       	ldi	r24, 0x02	; 2
    399e:	80 93 bc 04 	sts	0x04BC, r24
			B_BELT_M.pwm = B_BELT_PWM;
    39a2:	8e e1       	ldi	r24, 0x1E	; 30
    39a4:	80 93 bd 04 	sts	0x04BD, r24
    39a8:	17 c0       	rjmp	.+46     	; 0x39d8 <ProcessJob1+0x124>
		}
		else if(BeltStatus == FOR || BeltStatus == BACK){
    39aa:	80 91 02 04 	lds	r24, 0x0402
    39ae:	81 30       	cpi	r24, 0x01	; 1
    39b0:	21 f0       	breq	.+8      	; 0x39ba <ProcessJob1+0x106>
    39b2:	80 91 02 04 	lds	r24, 0x0402
    39b6:	82 30       	cpi	r24, 0x02	; 2
    39b8:	79 f4       	brne	.+30     	; 0x39d8 <ProcessJob1+0x124>
			BeltStatus = BRAKE;
    39ba:	83 e0       	ldi	r24, 0x03	; 3
    39bc:	80 93 02 04 	sts	0x0402, r24
			F_BELT_M.status = BRAKE;
    39c0:	83 e0       	ldi	r24, 0x03	; 3
    39c2:	80 93 ba 04 	sts	0x04BA, r24
			F_BELT_M.pwm    = BRAKE_PWM;
    39c6:	84 e6       	ldi	r24, 0x64	; 100
    39c8:	80 93 bb 04 	sts	0x04BB, r24
			B_BELT_M.status = BRAKE;
    39cc:	83 e0       	ldi	r24, 0x03	; 3
    39ce:	80 93 bc 04 	sts	0x04BC, r24
			B_BELT_M.pwm    = BRAKE_PWM;
    39d2:	84 e6       	ldi	r24, 0x64	; 100
    39d4:	80 93 bd 04 	sts	0x04BD, r24
		}
		
		BeltButtonPushed = false;
    39d8:	10 92 10 04 	sts	0x0410, r1
    39dc:	35 c0       	rjmp	.+106    	; 0x3a48 <ProcessJob1+0x194>
	}
	else if(BeltBackButtonPushed){
    39de:	80 91 12 04 	lds	r24, 0x0412
    39e2:	88 23       	and	r24, r24
    39e4:	89 f1       	breq	.+98     	; 0x3a48 <ProcessJob1+0x194>
		if(BeltStatus == BRAKE || BeltStatus == FREE){
    39e6:	80 91 02 04 	lds	r24, 0x0402
    39ea:	83 30       	cpi	r24, 0x03	; 3
    39ec:	21 f0       	breq	.+8      	; 0x39f6 <ProcessJob1+0x142>
    39ee:	80 91 02 04 	lds	r24, 0x0402
    39f2:	88 23       	and	r24, r24
    39f4:	81 f4       	brne	.+32     	; 0x3a16 <ProcessJob1+0x162>
			BeltStatus = BACK;
    39f6:	82 e0       	ldi	r24, 0x02	; 2
    39f8:	80 93 02 04 	sts	0x0402, r24
			F_BELT_M.status = FOR;
    39fc:	81 e0       	ldi	r24, 0x01	; 1
    39fe:	80 93 ba 04 	sts	0x04BA, r24
			F_BELT_M.pwm = F_BELT_PWM;
    3a02:	81 e4       	ldi	r24, 0x41	; 65
    3a04:	80 93 bb 04 	sts	0x04BB, r24
			B_BELT_M.status = FOR;
    3a08:	81 e0       	ldi	r24, 0x01	; 1
    3a0a:	80 93 bc 04 	sts	0x04BC, r24
			B_BELT_M.pwm = B_BELT_PWM;
    3a0e:	8e e1       	ldi	r24, 0x1E	; 30
    3a10:	80 93 bd 04 	sts	0x04BD, r24
    3a14:	17 c0       	rjmp	.+46     	; 0x3a44 <ProcessJob1+0x190>
		}
		else if(BeltStatus == FOR || BeltStatus == BACK){
    3a16:	80 91 02 04 	lds	r24, 0x0402
    3a1a:	81 30       	cpi	r24, 0x01	; 1
    3a1c:	21 f0       	breq	.+8      	; 0x3a26 <ProcessJob1+0x172>
    3a1e:	80 91 02 04 	lds	r24, 0x0402
    3a22:	82 30       	cpi	r24, 0x02	; 2
    3a24:	79 f4       	brne	.+30     	; 0x3a44 <ProcessJob1+0x190>
			BeltStatus = BRAKE;
    3a26:	83 e0       	ldi	r24, 0x03	; 3
    3a28:	80 93 02 04 	sts	0x0402, r24
			F_BELT_M.status = BRAKE;
    3a2c:	83 e0       	ldi	r24, 0x03	; 3
    3a2e:	80 93 ba 04 	sts	0x04BA, r24
			F_BELT_M.pwm    = BRAKE_PWM;
    3a32:	84 e6       	ldi	r24, 0x64	; 100
    3a34:	80 93 bb 04 	sts	0x04BB, r24
			B_BELT_M.status = BRAKE;
    3a38:	83 e0       	ldi	r24, 0x03	; 3
    3a3a:	80 93 bc 04 	sts	0x04BC, r24
			B_BELT_M.pwm    = BRAKE_PWM;
    3a3e:	84 e6       	ldi	r24, 0x64	; 100
    3a40:	80 93 bd 04 	sts	0x04BD, r24
		}
		
		BeltBackButtonPushed = false;
    3a44:	10 92 12 04 	sts	0x0412, r1
	}		
		
	
	if(TIRE_REAR_SW){
    3a48:	80 91 17 05 	lds	r24, 0x0517
    3a4c:	88 23       	and	r24, r24
    3a4e:	11 f0       	breq	.+4      	; 0x3a54 <ProcessJob1+0x1a0>
		TIRE_A = AIR_OFF;
    3a50:	10 92 cc 04 	sts	0x04CC, r1
	}
	if(TIRE_FRONT_SW){
    3a54:	80 91 16 05 	lds	r24, 0x0516
    3a58:	88 23       	and	r24, r24
    3a5a:	19 f0       	breq	.+6      	; 0x3a62 <ProcessJob1+0x1ae>
		TIRE_A = AIR_ON;
    3a5c:	81 e0       	ldi	r24, 0x01	; 1
    3a5e:	80 93 cc 04 	sts	0x04CC, r24
	}
	
	LOCK_A0_S = AIR_ON;
    3a62:	81 e0       	ldi	r24, 0x01	; 1
    3a64:	80 93 c8 04 	sts	0x04C8, r24
	LOCK_A0_DS = AIR_OFF;
    3a68:	10 92 c9 04 	sts	0x04C9, r1
	ARM_A = AIR_OFF;
    3a6c:	10 92 ca 04 	sts	0x04CA, r1
	F_LOCK_A = AIR_OFF;  // 角材ロック解除
    3a70:	10 92 cb 04 	sts	0x04CB, r1
	FRONT_TIRE_A = AIR_OFF;
    3a74:	10 92 ce 04 	sts	0x04CE, r1
}
    3a78:	cf 91       	pop	r28
    3a7a:	df 91       	pop	r29
    3a7c:	08 95       	ret

00003a7e <ProcessJob2>:
#endif

#if (USING_PROCESS > 2)
static void ProcessJob2(void) {
    3a7e:	df 93       	push	r29
    3a80:	cf 93       	push	r28
    3a82:	cd b7       	in	r28, 0x3d	; 61
    3a84:	de b7       	in	r29, 0x3e	; 62
	LeftTire.MaxPwm = SS_LTIRE_MAX_PWM;
    3a86:	8f e0       	ldi	r24, 0x0F	; 15
    3a88:	80 93 d8 03 	sts	0x03D8, r24
	RightTire.MaxPwm = SS_RTIRE_MAX_PWM;
    3a8c:	8f e0       	ldi	r24, 0x0F	; 15
    3a8e:	80 93 e3 03 	sts	0x03E3, r24
	Steering.UpSpan = 1;
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	80 93 f6 03 	sts	0x03F6, r24
	
	if(ACCEL_BUTTON){
    3a98:	80 91 92 04 	lds	r24, 0x0492
    3a9c:	90 91 93 04 	lds	r25, 0x0493
    3aa0:	fc 01       	movw	r30, r24
    3aa2:	80 81       	ld	r24, Z
    3aa4:	82 70       	andi	r24, 0x02	; 2
    3aa6:	88 23       	and	r24, r24
    3aa8:	51 f0       	breq	.+20     	; 0x3abe <ProcessJob2+0x40>
		LeftTire.Act = FOR;
    3aaa:	81 e0       	ldi	r24, 0x01	; 1
    3aac:	80 93 d9 03 	sts	0x03D9, r24
		RightTire.Act = FOR;
    3ab0:	81 e0       	ldi	r24, 0x01	; 1
    3ab2:	80 93 e4 03 	sts	0x03E4, r24
		FrontTire.Act = FOR;
    3ab6:	81 e0       	ldi	r24, 0x01	; 1
    3ab8:	80 93 ef 03 	sts	0x03EF, r24
    3abc:	19 c0       	rjmp	.+50     	; 0x3af0 <ProcessJob2+0x72>
	}
	else if(BACK_BUTTON){
    3abe:	80 91 92 04 	lds	r24, 0x0492
    3ac2:	90 91 93 04 	lds	r25, 0x0493
    3ac6:	fc 01       	movw	r30, r24
    3ac8:	80 81       	ld	r24, Z
    3aca:	84 70       	andi	r24, 0x04	; 4
    3acc:	88 23       	and	r24, r24
    3ace:	51 f0       	breq	.+20     	; 0x3ae4 <ProcessJob2+0x66>
		LeftTire.Act = BACK;
    3ad0:	82 e0       	ldi	r24, 0x02	; 2
    3ad2:	80 93 d9 03 	sts	0x03D9, r24
		RightTire.Act = BACK;
    3ad6:	82 e0       	ldi	r24, 0x02	; 2
    3ad8:	80 93 e4 03 	sts	0x03E4, r24
		FrontTire.Act = BACK;
    3adc:	82 e0       	ldi	r24, 0x02	; 2
    3ade:	80 93 ef 03 	sts	0x03EF, r24
    3ae2:	06 c0       	rjmp	.+12     	; 0x3af0 <ProcessJob2+0x72>
	}
	else {
		LeftTire.Act = FREE;
    3ae4:	10 92 d9 03 	sts	0x03D9, r1
		RightTire.Act = FREE;
    3ae8:	10 92 e4 03 	sts	0x03E4, r1
		FrontTire.Act = FREE;
    3aec:	10 92 ef 03 	sts	0x03EF, r1
	}	
	
	F_BELT_M.status = BRAKE;
    3af0:	83 e0       	ldi	r24, 0x03	; 3
    3af2:	80 93 ba 04 	sts	0x04BA, r24
	F_BELT_M.pwm = BRAKE_PWM;
    3af6:	84 e6       	ldi	r24, 0x64	; 100
    3af8:	80 93 bb 04 	sts	0x04BB, r24
	B_BELT_M.status = BRAKE;
    3afc:	83 e0       	ldi	r24, 0x03	; 3
    3afe:	80 93 bc 04 	sts	0x04BC, r24
	B_BELT_M.pwm = BRAKE_PWM;
    3b02:	84 e6       	ldi	r24, 0x64	; 100
    3b04:	80 93 bd 04 	sts	0x04BD, r24
	BeltStatus = BRAKE;
    3b08:	83 e0       	ldi	r24, 0x03	; 3
    3b0a:	80 93 02 04 	sts	0x0402, r24
	
	
	if(ARM_BUTTON){
    3b0e:	80 91 92 04 	lds	r24, 0x0492
    3b12:	90 91 93 04 	lds	r25, 0x0493
    3b16:	fc 01       	movw	r30, r24
    3b18:	80 81       	ld	r24, Z
    3b1a:	81 70       	andi	r24, 0x01	; 1
    3b1c:	88 23       	and	r24, r24
    3b1e:	21 f0       	breq	.+8      	; 0x3b28 <ProcessJob2+0xaa>
		ArmButtonPush = true;
    3b20:	81 e0       	ldi	r24, 0x01	; 1
    3b22:	80 93 0d 04 	sts	0x040D, r24
    3b26:	09 c0       	rjmp	.+18     	; 0x3b3a <ProcessJob2+0xbc>
	}
	else {
		if(ArmButtonPush){
    3b28:	80 91 0d 04 	lds	r24, 0x040D
    3b2c:	88 23       	and	r24, r24
    3b2e:	19 f0       	breq	.+6      	; 0x3b36 <ProcessJob2+0xb8>
			ArmButtonPushed = true;
    3b30:	81 e0       	ldi	r24, 0x01	; 1
    3b32:	80 93 0e 04 	sts	0x040E, r24
		}
		ArmButtonPush = false;
    3b36:	10 92 0d 04 	sts	0x040D, r1
	}
	
	if(ArmButtonPushed){
    3b3a:	80 91 0e 04 	lds	r24, 0x040E
    3b3e:	88 23       	and	r24, r24
    3b40:	81 f0       	breq	.+32     	; 0x3b62 <ProcessJob2+0xe4>
		ARM_A = !ARM_A;	
    3b42:	80 91 ca 04 	lds	r24, 0x04CA
    3b46:	88 2f       	mov	r24, r24
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	21 e0       	ldi	r18, 0x01	; 1
    3b4c:	00 97       	sbiw	r24, 0x00	; 0
    3b4e:	09 f4       	brne	.+2      	; 0x3b52 <ProcessJob2+0xd4>
    3b50:	20 e0       	ldi	r18, 0x00	; 0
    3b52:	81 e0       	ldi	r24, 0x01	; 1
    3b54:	82 27       	eor	r24, r18
    3b56:	88 2f       	mov	r24, r24
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	80 93 ca 04 	sts	0x04CA, r24
		ArmButtonPushed = false;
    3b5e:	10 92 0e 04 	sts	0x040E, r1
	}
	
	if(FRONT_TIRE_UP_DOWN_BUTTON){
    3b62:	80 91 92 04 	lds	r24, 0x0492
    3b66:	90 91 93 04 	lds	r25, 0x0493
    3b6a:	fc 01       	movw	r30, r24
    3b6c:	81 81       	ldd	r24, Z+1	; 0x01
    3b6e:	88 70       	andi	r24, 0x08	; 8
    3b70:	88 23       	and	r24, r24
    3b72:	21 f0       	breq	.+8      	; 0x3b7c <ProcessJob2+0xfe>
		FrontTireUpDownButtonPush = true;
    3b74:	81 e0       	ldi	r24, 0x01	; 1
    3b76:	80 93 17 04 	sts	0x0417, r24
    3b7a:	09 c0       	rjmp	.+18     	; 0x3b8e <ProcessJob2+0x110>
	}
	else{
		if(FrontTireUpDownButtonPush){
    3b7c:	80 91 17 04 	lds	r24, 0x0417
    3b80:	88 23       	and	r24, r24
    3b82:	19 f0       	breq	.+6      	; 0x3b8a <ProcessJob2+0x10c>
			FrontTireUpDownButtonPushed = true;
    3b84:	81 e0       	ldi	r24, 0x01	; 1
    3b86:	80 93 18 04 	sts	0x0418, r24
		}
		FrontTireUpDownButtonPush = false;
    3b8a:	10 92 17 04 	sts	0x0417, r1
	}	
	
	if(FrontTireUpDownButtonPushed){
    3b8e:	80 91 18 04 	lds	r24, 0x0418
    3b92:	88 23       	and	r24, r24
    3b94:	81 f0       	breq	.+32     	; 0x3bb6 <ProcessJob2+0x138>
		FRONT_TIRE_A = !FRONT_TIRE_A;
    3b96:	80 91 ce 04 	lds	r24, 0x04CE
    3b9a:	88 2f       	mov	r24, r24
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	21 e0       	ldi	r18, 0x01	; 1
    3ba0:	00 97       	sbiw	r24, 0x00	; 0
    3ba2:	09 f4       	brne	.+2      	; 0x3ba6 <ProcessJob2+0x128>
    3ba4:	20 e0       	ldi	r18, 0x00	; 0
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	82 27       	eor	r24, r18
    3baa:	88 2f       	mov	r24, r24
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	80 93 ce 04 	sts	0x04CE, r24
		FrontTireUpDownButtonPushed = false;
    3bb2:	10 92 18 04 	sts	0x0418, r1
	}
	
	if(Slope == _SLOPE_LOCK && tmpSlope == _FREE){
    3bb6:	80 91 00 04 	lds	r24, 0x0400
    3bba:	82 30       	cpi	r24, 0x02	; 2
    3bbc:	31 f4       	brne	.+12     	; 0x3bca <ProcessJob2+0x14c>
    3bbe:	80 91 01 04 	lds	r24, 0x0401
    3bc2:	88 30       	cpi	r24, 0x08	; 8
    3bc4:	11 f4       	brne	.+4      	; 0x3bca <ProcessJob2+0x14c>
		PETIT_LOCK_A0_S = AIR_OFF;
    3bc6:	10 92 cd 04 	sts	0x04CD, r1
	}
	
	LOCK_A0_S = AIR_ON;
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	80 93 c8 04 	sts	0x04C8, r24
	LOCK_A0_DS = AIR_OFF;
    3bd0:	10 92 c9 04 	sts	0x04C9, r1
	F_LOCK_A = AIR_ON;
    3bd4:	81 e0       	ldi	r24, 0x01	; 1
    3bd6:	80 93 cb 04 	sts	0x04CB, r24
}
    3bda:	cf 91       	pop	r28
    3bdc:	df 91       	pop	r29
    3bde:	08 95       	ret

00003be0 <ProcessJob3>:
#endif

#if (USING_PROCESS > 3)
static void ProcessJob3(void) {
    3be0:	df 93       	push	r29
    3be2:	cf 93       	push	r28
    3be4:	cd b7       	in	r28, 0x3d	; 61
    3be6:	de b7       	in	r29, 0x3e	; 62
	LeftTire.MaxPwm = S_LTIRE_MAX_PWM;
    3be8:	84 e1       	ldi	r24, 0x14	; 20
    3bea:	80 93 d8 03 	sts	0x03D8, r24
	RightTire.MaxPwm = S_RTIRE_MAX_PWM;
    3bee:	84 e1       	ldi	r24, 0x14	; 20
    3bf0:	80 93 e3 03 	sts	0x03E3, r24
	Steering.UpSpan = STEERING_PWM_UP_SPAN;
    3bf4:	82 e0       	ldi	r24, 0x02	; 2
    3bf6:	80 93 f6 03 	sts	0x03F6, r24
	
	if(ACCEL_BUTTON){
    3bfa:	80 91 92 04 	lds	r24, 0x0492
    3bfe:	90 91 93 04 	lds	r25, 0x0493
    3c02:	fc 01       	movw	r30, r24
    3c04:	80 81       	ld	r24, Z
    3c06:	82 70       	andi	r24, 0x02	; 2
    3c08:	88 23       	and	r24, r24
    3c0a:	51 f0       	breq	.+20     	; 0x3c20 <ProcessJob3+0x40>
		LeftTire.Act = FOR;
    3c0c:	81 e0       	ldi	r24, 0x01	; 1
    3c0e:	80 93 d9 03 	sts	0x03D9, r24
		RightTire.Act = FOR;
    3c12:	81 e0       	ldi	r24, 0x01	; 1
    3c14:	80 93 e4 03 	sts	0x03E4, r24
		FrontTire.Act = FOR;
    3c18:	81 e0       	ldi	r24, 0x01	; 1
    3c1a:	80 93 ef 03 	sts	0x03EF, r24
    3c1e:	19 c0       	rjmp	.+50     	; 0x3c52 <ProcessJob3+0x72>
	}
	else if(BACK_BUTTON){
    3c20:	80 91 92 04 	lds	r24, 0x0492
    3c24:	90 91 93 04 	lds	r25, 0x0493
    3c28:	fc 01       	movw	r30, r24
    3c2a:	80 81       	ld	r24, Z
    3c2c:	84 70       	andi	r24, 0x04	; 4
    3c2e:	88 23       	and	r24, r24
    3c30:	51 f0       	breq	.+20     	; 0x3c46 <ProcessJob3+0x66>
		LeftTire.Act = BACK;
    3c32:	82 e0       	ldi	r24, 0x02	; 2
    3c34:	80 93 d9 03 	sts	0x03D9, r24
		RightTire.Act = BACK;
    3c38:	82 e0       	ldi	r24, 0x02	; 2
    3c3a:	80 93 e4 03 	sts	0x03E4, r24
		FrontTire.Act = BACK;
    3c3e:	82 e0       	ldi	r24, 0x02	; 2
    3c40:	80 93 ef 03 	sts	0x03EF, r24
    3c44:	06 c0       	rjmp	.+12     	; 0x3c52 <ProcessJob3+0x72>
	}
	else {
		LeftTire.Act = FREE;
    3c46:	10 92 d9 03 	sts	0x03D9, r1
		RightTire.Act = FREE;
    3c4a:	10 92 e4 03 	sts	0x03E4, r1
		FrontTire.Act = FREE;
    3c4e:	10 92 ef 03 	sts	0x03EF, r1
	}	
	
	if(ARM_BUTTON){
    3c52:	80 91 92 04 	lds	r24, 0x0492
    3c56:	90 91 93 04 	lds	r25, 0x0493
    3c5a:	fc 01       	movw	r30, r24
    3c5c:	80 81       	ld	r24, Z
    3c5e:	81 70       	andi	r24, 0x01	; 1
    3c60:	88 23       	and	r24, r24
    3c62:	21 f0       	breq	.+8      	; 0x3c6c <ProcessJob3+0x8c>
		ArmButtonPush = true;
    3c64:	81 e0       	ldi	r24, 0x01	; 1
    3c66:	80 93 0d 04 	sts	0x040D, r24
    3c6a:	09 c0       	rjmp	.+18     	; 0x3c7e <ProcessJob3+0x9e>
	}
	else {
		if(ArmButtonPush){
    3c6c:	80 91 0d 04 	lds	r24, 0x040D
    3c70:	88 23       	and	r24, r24
    3c72:	19 f0       	breq	.+6      	; 0x3c7a <ProcessJob3+0x9a>
			ArmButtonPushed = true;
    3c74:	81 e0       	ldi	r24, 0x01	; 1
    3c76:	80 93 0e 04 	sts	0x040E, r24
		}
		ArmButtonPush = false;
    3c7a:	10 92 0d 04 	sts	0x040D, r1
	}
	
	if(ArmButtonPushed){
    3c7e:	80 91 0e 04 	lds	r24, 0x040E
    3c82:	88 23       	and	r24, r24
    3c84:	81 f0       	breq	.+32     	; 0x3ca6 <ProcessJob3+0xc6>
		ARM_A = !ARM_A;	
    3c86:	80 91 ca 04 	lds	r24, 0x04CA
    3c8a:	88 2f       	mov	r24, r24
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	21 e0       	ldi	r18, 0x01	; 1
    3c90:	00 97       	sbiw	r24, 0x00	; 0
    3c92:	09 f4       	brne	.+2      	; 0x3c96 <ProcessJob3+0xb6>
    3c94:	20 e0       	ldi	r18, 0x00	; 0
    3c96:	81 e0       	ldi	r24, 0x01	; 1
    3c98:	82 27       	eor	r24, r18
    3c9a:	88 2f       	mov	r24, r24
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	80 93 ca 04 	sts	0x04CA, r24
		ArmButtonPushed = false;
    3ca2:	10 92 0e 04 	sts	0x040E, r1
	}
	
		
// Slope Air Cylinder Control
//--------------------------------------------------------------------//
	tmpSlope = Slope;
    3ca6:	80 91 00 04 	lds	r24, 0x0400
    3caa:	80 93 01 04 	sts	0x0401, r24

	if(LOCK_FREE_BUTTON && !SLOPE_LOCK_BUTTON && !BACK_UNIT_UP_DOWN_BUTTON){
    3cae:	80 91 92 04 	lds	r24, 0x0492
    3cb2:	90 91 93 04 	lds	r25, 0x0493
    3cb6:	fc 01       	movw	r30, r24
    3cb8:	80 81       	ld	r24, Z
    3cba:	80 72       	andi	r24, 0x20	; 32
    3cbc:	88 23       	and	r24, r24
    3cbe:	b9 f0       	breq	.+46     	; 0x3cee <ProcessJob3+0x10e>
    3cc0:	80 91 92 04 	lds	r24, 0x0492
    3cc4:	90 91 93 04 	lds	r25, 0x0493
    3cc8:	fc 01       	movw	r30, r24
    3cca:	80 81       	ld	r24, Z
    3ccc:	80 71       	andi	r24, 0x10	; 16
    3cce:	88 23       	and	r24, r24
    3cd0:	71 f4       	brne	.+28     	; 0x3cee <ProcessJob3+0x10e>
    3cd2:	80 91 92 04 	lds	r24, 0x0492
    3cd6:	90 91 93 04 	lds	r25, 0x0493
    3cda:	fc 01       	movw	r30, r24
    3cdc:	80 81       	ld	r24, Z
    3cde:	80 74       	andi	r24, 0x40	; 64
    3ce0:	88 23       	and	r24, r24
    3ce2:	29 f4       	brne	.+10     	; 0x3cee <ProcessJob3+0x10e>
		LOCK_A0_S = AIR_OFF;
    3ce4:	10 92 c8 04 	sts	0x04C8, r1
		LOCK_A0_DS = AIR_OFF;
    3ce8:	10 92 c9 04 	sts	0x04C9, r1
    3cec:	43 c0       	rjmp	.+134    	; 0x3d74 <ProcessJob3+0x194>
	}
	else if(FLAT_PLANE_LOCK_BUTTON && !SLOPE_LOCK_BUTTON && !BACK_UNIT_UP_DOWN_BUTTON){
    3cee:	80 91 92 04 	lds	r24, 0x0492
    3cf2:	90 91 93 04 	lds	r25, 0x0493
    3cf6:	fc 01       	movw	r30, r24
    3cf8:	80 81       	ld	r24, Z
    3cfa:	80 78       	andi	r24, 0x80	; 128
    3cfc:	88 23       	and	r24, r24
    3cfe:	d1 f0       	breq	.+52     	; 0x3d34 <ProcessJob3+0x154>
    3d00:	80 91 92 04 	lds	r24, 0x0492
    3d04:	90 91 93 04 	lds	r25, 0x0493
    3d08:	fc 01       	movw	r30, r24
    3d0a:	80 81       	ld	r24, Z
    3d0c:	80 71       	andi	r24, 0x10	; 16
    3d0e:	88 23       	and	r24, r24
    3d10:	89 f4       	brne	.+34     	; 0x3d34 <ProcessJob3+0x154>
    3d12:	80 91 92 04 	lds	r24, 0x0492
    3d16:	90 91 93 04 	lds	r25, 0x0493
    3d1a:	fc 01       	movw	r30, r24
    3d1c:	80 81       	ld	r24, Z
    3d1e:	80 74       	andi	r24, 0x40	; 64
    3d20:	88 23       	and	r24, r24
    3d22:	41 f4       	brne	.+16     	; 0x3d34 <ProcessJob3+0x154>
		LOCK_A0_S = AIR_ON;
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	80 93 c8 04 	sts	0x04C8, r24
		LOCK_A0_DS = AIR_OFF;
    3d2a:	10 92 c9 04 	sts	0x04C9, r1
		FRONT_TIRE_A = AIR_OFF;
    3d2e:	10 92 ce 04 	sts	0x04CE, r1
    3d32:	20 c0       	rjmp	.+64     	; 0x3d74 <ProcessJob3+0x194>
	}
	else if(SLOPE_LOCK_BUTTON && !FLAT_PLANE_LOCK_BUTTON && !LOCK_FREE_BUTTON){
    3d34:	80 91 92 04 	lds	r24, 0x0492
    3d38:	90 91 93 04 	lds	r25, 0x0493
    3d3c:	fc 01       	movw	r30, r24
    3d3e:	80 81       	ld	r24, Z
    3d40:	80 71       	andi	r24, 0x10	; 16
    3d42:	88 23       	and	r24, r24
    3d44:	b9 f0       	breq	.+46     	; 0x3d74 <ProcessJob3+0x194>
    3d46:	80 91 92 04 	lds	r24, 0x0492
    3d4a:	90 91 93 04 	lds	r25, 0x0493
    3d4e:	fc 01       	movw	r30, r24
    3d50:	80 81       	ld	r24, Z
    3d52:	80 78       	andi	r24, 0x80	; 128
    3d54:	88 23       	and	r24, r24
    3d56:	71 f4       	brne	.+28     	; 0x3d74 <ProcessJob3+0x194>
    3d58:	80 91 92 04 	lds	r24, 0x0492
    3d5c:	90 91 93 04 	lds	r25, 0x0493
    3d60:	fc 01       	movw	r30, r24
    3d62:	80 81       	ld	r24, Z
    3d64:	80 72       	andi	r24, 0x20	; 32
    3d66:	88 23       	and	r24, r24
    3d68:	29 f4       	brne	.+10     	; 0x3d74 <ProcessJob3+0x194>
		LOCK_A0_S = AIR_OFF;
    3d6a:	10 92 c8 04 	sts	0x04C8, r1
		LOCK_A0_DS = AIR_ON;
    3d6e:	81 e0       	ldi	r24, 0x01	; 1
    3d70:	80 93 c9 04 	sts	0x04C9, r24
	}
	
	if(LOCK_A0_S && !LOCK_A0_DS){
    3d74:	80 91 c8 04 	lds	r24, 0x04C8
    3d78:	88 23       	and	r24, r24
    3d7a:	51 f0       	breq	.+20     	; 0x3d90 <ProcessJob3+0x1b0>
    3d7c:	90 91 c9 04 	lds	r25, 0x04C9
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	89 27       	eor	r24, r25
    3d84:	88 23       	and	r24, r24
    3d86:	21 f0       	breq	.+8      	; 0x3d90 <ProcessJob3+0x1b0>
		// 平地ロック
		Slope = _FLAT_PLANE_LOCK;
    3d88:	81 e0       	ldi	r24, 0x01	; 1
    3d8a:	80 93 00 04 	sts	0x0400, r24
    3d8e:	1d c0       	rjmp	.+58     	; 0x3dca <ProcessJob3+0x1ea>
	}
	else if(!LOCK_A0_S && LOCK_A0_DS){
    3d90:	90 91 c8 04 	lds	r25, 0x04C8
    3d94:	81 e0       	ldi	r24, 0x01	; 1
    3d96:	89 27       	eor	r24, r25
    3d98:	88 23       	and	r24, r24
    3d9a:	41 f0       	breq	.+16     	; 0x3dac <ProcessJob3+0x1cc>
    3d9c:	80 91 c9 04 	lds	r24, 0x04C9
    3da0:	88 23       	and	r24, r24
    3da2:	21 f0       	breq	.+8      	; 0x3dac <ProcessJob3+0x1cc>
		// 傾斜
		Slope = _SLOPE_LOCK;
    3da4:	82 e0       	ldi	r24, 0x02	; 2
    3da6:	80 93 00 04 	sts	0x0400, r24
    3daa:	0f c0       	rjmp	.+30     	; 0x3dca <ProcessJob3+0x1ea>
	}
	else if(!LOCK_A0_S && !LOCK_A0_DS){
    3dac:	90 91 c8 04 	lds	r25, 0x04C8
    3db0:	81 e0       	ldi	r24, 0x01	; 1
    3db2:	89 27       	eor	r24, r25
    3db4:	88 23       	and	r24, r24
    3db6:	49 f0       	breq	.+18     	; 0x3dca <ProcessJob3+0x1ea>
    3db8:	90 91 c9 04 	lds	r25, 0x04C9
    3dbc:	81 e0       	ldi	r24, 0x01	; 1
    3dbe:	89 27       	eor	r24, r25
    3dc0:	88 23       	and	r24, r24
    3dc2:	19 f0       	breq	.+6      	; 0x3dca <ProcessJob3+0x1ea>
		// ロックフリー
		Slope = _FREE;
    3dc4:	88 e0       	ldi	r24, 0x08	; 8
    3dc6:	80 93 00 04 	sts	0x0400, r24
	}

	if(PETIT_FLAT_PLANE_LOCK_BUTTON){
    3dca:	80 91 92 04 	lds	r24, 0x0492
    3dce:	90 91 93 04 	lds	r25, 0x0493
    3dd2:	fc 01       	movw	r30, r24
    3dd4:	81 81       	ldd	r24, Z+1	; 0x01
    3dd6:	80 71       	andi	r24, 0x10	; 16
    3dd8:	88 23       	and	r24, r24
    3dda:	21 f0       	breq	.+8      	; 0x3de4 <ProcessJob3+0x204>
		PetitFlatPlaneLockButtonPush = true;
    3ddc:	81 e0       	ldi	r24, 0x01	; 1
    3dde:	80 93 15 04 	sts	0x0415, r24
    3de2:	09 c0       	rjmp	.+18     	; 0x3df6 <ProcessJob3+0x216>
	}
	else{
		if(PetitFlatPlaneLockButtonPush){
    3de4:	80 91 15 04 	lds	r24, 0x0415
    3de8:	88 23       	and	r24, r24
    3dea:	19 f0       	breq	.+6      	; 0x3df2 <ProcessJob3+0x212>
			PetitFlatPlaneLockButtonPushed = true;
    3dec:	81 e0       	ldi	r24, 0x01	; 1
    3dee:	80 93 16 04 	sts	0x0416, r24
		}
		PetitFlatPlaneLockButtonPush = false;
    3df2:	10 92 15 04 	sts	0x0415, r1
	}
	
	if(PetitFlatPlaneLockButtonPushed){
    3df6:	80 91 16 04 	lds	r24, 0x0416
    3dfa:	88 23       	and	r24, r24
    3dfc:	81 f0       	breq	.+32     	; 0x3e1e <ProcessJob3+0x23e>
		PETIT_LOCK_A0_S = !PETIT_LOCK_A0_S;
    3dfe:	80 91 cd 04 	lds	r24, 0x04CD
    3e02:	88 2f       	mov	r24, r24
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	21 e0       	ldi	r18, 0x01	; 1
    3e08:	00 97       	sbiw	r24, 0x00	; 0
    3e0a:	09 f4       	brne	.+2      	; 0x3e0e <ProcessJob3+0x22e>
    3e0c:	20 e0       	ldi	r18, 0x00	; 0
    3e0e:	81 e0       	ldi	r24, 0x01	; 1
    3e10:	82 27       	eor	r24, r18
    3e12:	88 2f       	mov	r24, r24
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	80 93 cd 04 	sts	0x04CD, r24
		PetitFlatPlaneLockButtonPushed = false;
    3e1a:	10 92 16 04 	sts	0x0416, r1
	}
	
	if(FRONT_TIRE_UP_DOWN_BUTTON){
    3e1e:	80 91 92 04 	lds	r24, 0x0492
    3e22:	90 91 93 04 	lds	r25, 0x0493
    3e26:	fc 01       	movw	r30, r24
    3e28:	81 81       	ldd	r24, Z+1	; 0x01
    3e2a:	88 70       	andi	r24, 0x08	; 8
    3e2c:	88 23       	and	r24, r24
    3e2e:	21 f0       	breq	.+8      	; 0x3e38 <ProcessJob3+0x258>
		FrontTireUpDownButtonPush = true;
    3e30:	81 e0       	ldi	r24, 0x01	; 1
    3e32:	80 93 17 04 	sts	0x0417, r24
    3e36:	09 c0       	rjmp	.+18     	; 0x3e4a <ProcessJob3+0x26a>
	}
	else{
		if(FrontTireUpDownButtonPush){
    3e38:	80 91 17 04 	lds	r24, 0x0417
    3e3c:	88 23       	and	r24, r24
    3e3e:	19 f0       	breq	.+6      	; 0x3e46 <ProcessJob3+0x266>
			FrontTireUpDownButtonPushed = true;
    3e40:	81 e0       	ldi	r24, 0x01	; 1
    3e42:	80 93 18 04 	sts	0x0418, r24
		}
		FrontTireUpDownButtonPush = false;
    3e46:	10 92 17 04 	sts	0x0417, r1
	}	
	
	if(FrontTireUpDownButtonPushed){
    3e4a:	80 91 18 04 	lds	r24, 0x0418
    3e4e:	88 23       	and	r24, r24
    3e50:	81 f0       	breq	.+32     	; 0x3e72 <ProcessJob3+0x292>
		FRONT_TIRE_A = !FRONT_TIRE_A;
    3e52:	80 91 ce 04 	lds	r24, 0x04CE
    3e56:	88 2f       	mov	r24, r24
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	21 e0       	ldi	r18, 0x01	; 1
    3e5c:	00 97       	sbiw	r24, 0x00	; 0
    3e5e:	09 f4       	brne	.+2      	; 0x3e62 <ProcessJob3+0x282>
    3e60:	20 e0       	ldi	r18, 0x00	; 0
    3e62:	81 e0       	ldi	r24, 0x01	; 1
    3e64:	82 27       	eor	r24, r18
    3e66:	88 2f       	mov	r24, r24
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	80 93 ce 04 	sts	0x04CE, r24
		FrontTireUpDownButtonPushed = false;
    3e6e:	10 92 18 04 	sts	0x0418, r1
	}
	
	if(Slope == _SLOPE_LOCK && tmpSlope == _FREE){
    3e72:	80 91 00 04 	lds	r24, 0x0400
    3e76:	82 30       	cpi	r24, 0x02	; 2
    3e78:	31 f4       	brne	.+12     	; 0x3e86 <ProcessJob3+0x2a6>
    3e7a:	80 91 01 04 	lds	r24, 0x0401
    3e7e:	88 30       	cpi	r24, 0x08	; 8
    3e80:	11 f4       	brne	.+4      	; 0x3e86 <ProcessJob3+0x2a6>
		PETIT_LOCK_A0_S = AIR_OFF;
    3e82:	10 92 cd 04 	sts	0x04CD, r1
	}
	
//--------------------------------------------------------------------//
	
	F_LOCK_A = AIR_ON;	// 角材ロック
    3e86:	81 e0       	ldi	r24, 0x01	; 1
    3e88:	80 93 cb 04 	sts	0x04CB, r24
}
    3e8c:	cf 91       	pop	r28
    3e8e:	df 91       	pop	r29
    3e90:	08 95       	ret

00003e92 <AllActuatorReset>:
#endif	

// 全アクチュエータのリセットと変数の初期化
static void AllActuatorReset(void){
    3e92:	df 93       	push	r29
    3e94:	cf 93       	push	r28
    3e96:	0f 92       	push	r0
    3e98:	cd b7       	in	r28, 0x3d	; 61
    3e9a:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	
	// Actuator Reset
	#ifdef USE_MOTOR
	for(i = 0; i < USING_MOTOR; i++){
    3e9c:	19 82       	std	Y+1, r1	; 0x01
    3e9e:	17 c0       	rjmp	.+46     	; 0x3ece <AllActuatorReset+0x3c>
		MotorArray[i].status = BRAKE;
    3ea0:	89 81       	ldd	r24, Y+1	; 0x01
    3ea2:	88 2f       	mov	r24, r24
    3ea4:	90 e0       	ldi	r25, 0x00	; 0
    3ea6:	88 0f       	add	r24, r24
    3ea8:	99 1f       	adc	r25, r25
    3eaa:	81 5c       	subi	r24, 0xC1	; 193
    3eac:	9a 4f       	sbci	r25, 0xFA	; 250
    3eae:	23 e0       	ldi	r18, 0x03	; 3
    3eb0:	fc 01       	movw	r30, r24
    3eb2:	20 83       	st	Z, r18
		MotorArray[i].pwm    = 100;
    3eb4:	89 81       	ldd	r24, Y+1	; 0x01
    3eb6:	88 2f       	mov	r24, r24
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	88 0f       	add	r24, r24
    3ebc:	99 1f       	adc	r25, r25
    3ebe:	80 5c       	subi	r24, 0xC0	; 192
    3ec0:	9a 4f       	sbci	r25, 0xFA	; 250
    3ec2:	24 e6       	ldi	r18, 0x64	; 100
    3ec4:	fc 01       	movw	r30, r24
    3ec6:	20 83       	st	Z, r18
static void AllActuatorReset(void){
	uint8_t i;
	
	// Actuator Reset
	#ifdef USE_MOTOR
	for(i = 0; i < USING_MOTOR; i++){
    3ec8:	89 81       	ldd	r24, Y+1	; 0x01
    3eca:	8f 5f       	subi	r24, 0xFF	; 255
    3ecc:	89 83       	std	Y+1, r24	; 0x01
    3ece:	89 81       	ldd	r24, Y+1	; 0x01
    3ed0:	82 30       	cpi	r24, 0x02	; 2
    3ed2:	30 f3       	brcs	.-52     	; 0x3ea0 <AllActuatorReset+0xe>
		MotorArray[i].status = BRAKE;
		MotorArray[i].pwm    = 100;
	}
	#endif
	#ifdef USE_AIR
	for(i = 0; i < USING_AIR; i++){
    3ed4:	19 82       	std	Y+1, r1	; 0x01
    3ed6:	0a c0       	rjmp	.+20     	; 0x3eec <AllActuatorReset+0x5a>
		AirArray[i] = AIR_OFF;
    3ed8:	89 81       	ldd	r24, Y+1	; 0x01
    3eda:	88 2f       	mov	r24, r24
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	8c 5d       	subi	r24, 0xDC	; 220
    3ee0:	9a 4f       	sbci	r25, 0xFA	; 250
    3ee2:	fc 01       	movw	r30, r24
    3ee4:	10 82       	st	Z, r1
		MotorArray[i].status = BRAKE;
		MotorArray[i].pwm    = 100;
	}
	#endif
	#ifdef USE_AIR
	for(i = 0; i < USING_AIR; i++){
    3ee6:	89 81       	ldd	r24, Y+1	; 0x01
    3ee8:	8f 5f       	subi	r24, 0xFF	; 255
    3eea:	89 83       	std	Y+1, r24	; 0x01
    3eec:	89 81       	ldd	r24, Y+1	; 0x01
    3eee:	84 30       	cpi	r24, 0x04	; 4
    3ef0:	98 f3       	brcs	.-26     	; 0x3ed8 <AllActuatorReset+0x46>
		AirArray[i] = AIR_OFF;
	}
	#endif
	#ifdef USE_MOTOR_HUB
	for(i = 0; i < USING_MOTOR_HUB; i++){
    3ef2:	19 82       	std	Y+1, r1	; 0x01
    3ef4:	17 c0       	rjmp	.+46     	; 0x3f24 <AllActuatorReset+0x92>
		MotorHubArray[i].status = BRAKE;
    3ef6:	89 81       	ldd	r24, Y+1	; 0x01
    3ef8:	88 2f       	mov	r24, r24
    3efa:	90 e0       	ldi	r25, 0x00	; 0
    3efc:	88 0f       	add	r24, r24
    3efe:	99 1f       	adc	r25, r25
    3f00:	88 54       	subi	r24, 0x48	; 72
    3f02:	9b 4f       	sbci	r25, 0xFB	; 251
    3f04:	23 e0       	ldi	r18, 0x03	; 3
    3f06:	fc 01       	movw	r30, r24
    3f08:	20 83       	st	Z, r18
		MotorHubArray[i].pwm    = 100;
    3f0a:	89 81       	ldd	r24, Y+1	; 0x01
    3f0c:	88 2f       	mov	r24, r24
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	88 0f       	add	r24, r24
    3f12:	99 1f       	adc	r25, r25
    3f14:	87 54       	subi	r24, 0x47	; 71
    3f16:	9b 4f       	sbci	r25, 0xFB	; 251
    3f18:	24 e6       	ldi	r18, 0x64	; 100
    3f1a:	fc 01       	movw	r30, r24
    3f1c:	20 83       	st	Z, r18
	for(i = 0; i < USING_AIR; i++){
		AirArray[i] = AIR_OFF;
	}
	#endif
	#ifdef USE_MOTOR_HUB
	for(i = 0; i < USING_MOTOR_HUB; i++){
    3f1e:	89 81       	ldd	r24, Y+1	; 0x01
    3f20:	8f 5f       	subi	r24, 0xFF	; 255
    3f22:	89 83       	std	Y+1, r24	; 0x01
    3f24:	89 81       	ldd	r24, Y+1	; 0x01
    3f26:	88 30       	cpi	r24, 0x08	; 8
    3f28:	30 f3       	brcs	.-52     	; 0x3ef6 <AllActuatorReset+0x64>
		MotorHubArray[i].status = BRAKE;
		MotorHubArray[i].pwm    = 100;
	}
	#endif
	#ifdef USE_AIR_HUB
	for(i = 0; i < USING_AIR_HUB; i++){
    3f2a:	19 82       	std	Y+1, r1	; 0x01
    3f2c:	0a c0       	rjmp	.+20     	; 0x3f42 <AllActuatorReset+0xb0>
		AirHubArray[i] = AIR_OFF;
    3f2e:	89 81       	ldd	r24, Y+1	; 0x01
    3f30:	88 2f       	mov	r24, r24
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	88 53       	subi	r24, 0x38	; 56
    3f36:	9b 4f       	sbci	r25, 0xFB	; 251
    3f38:	fc 01       	movw	r30, r24
    3f3a:	10 82       	st	Z, r1
		MotorHubArray[i].status = BRAKE;
		MotorHubArray[i].pwm    = 100;
	}
	#endif
	#ifdef USE_AIR_HUB
	for(i = 0; i < USING_AIR_HUB; i++){
    3f3c:	89 81       	ldd	r24, Y+1	; 0x01
    3f3e:	8f 5f       	subi	r24, 0xFF	; 255
    3f40:	89 83       	std	Y+1, r24	; 0x01
    3f42:	89 81       	ldd	r24, Y+1	; 0x01
    3f44:	88 30       	cpi	r24, 0x08	; 8
    3f46:	98 f3       	brcs	.-26     	; 0x3f2e <AllActuatorReset+0x9c>
		AirHubArray[i] = AIR_OFF;
	}
	#endif
	#ifdef USE_MU
	controller = ControllerDataReset();
    3f48:	0e 94 de 01 	call	0x3bc	; 0x3bc <ControllerDataReset>
    3f4c:	90 93 93 04 	sts	0x0493, r25
    3f50:	80 93 92 04 	sts	0x0492, r24
	#endif
	
	// Variable Reset
	ProcessJobInitialize();
    3f54:	0e 94 34 18 	call	0x3068	; 0x3068 <ProcessJobInitialize>
}
    3f58:	0f 90       	pop	r0
    3f5a:	cf 91       	pop	r28
    3f5c:	df 91       	pop	r29
    3f5e:	08 95       	ret

00003f60 <TireControl>:


static void TireControl(TireControlStatus *t){
    3f60:	df 93       	push	r29
    3f62:	cf 93       	push	r28
    3f64:	00 d0       	rcall	.+0      	; 0x3f66 <TireControl+0x6>
    3f66:	cd b7       	in	r28, 0x3d	; 61
    3f68:	de b7       	in	r29, 0x3e	; 62
    3f6a:	9a 83       	std	Y+2, r25	; 0x02
    3f6c:	89 83       	std	Y+1, r24	; 0x01
	if(t->Act == FOR){
    3f6e:	89 81       	ldd	r24, Y+1	; 0x01
    3f70:	9a 81       	ldd	r25, Y+2	; 0x02
    3f72:	fc 01       	movw	r30, r24
    3f74:	81 85       	ldd	r24, Z+9	; 0x09
    3f76:	81 30       	cpi	r24, 0x01	; 1
    3f78:	d1 f4       	brne	.+52     	; 0x3fae <TireControl+0x4e>
		if(t->Tire == _BRAKE){
    3f7a:	89 81       	ldd	r24, Y+1	; 0x01
    3f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f7e:	fc 01       	movw	r30, r24
    3f80:	80 81       	ld	r24, Z
    3f82:	88 30       	cpi	r24, 0x08	; 8
    3f84:	49 f4       	brne	.+18     	; 0x3f98 <TireControl+0x38>
			t->Tire = _FOR_UP;
    3f86:	89 81       	ldd	r24, Y+1	; 0x01
    3f88:	9a 81       	ldd	r25, Y+2	; 0x02
    3f8a:	fc 01       	movw	r30, r24
    3f8c:	10 82       	st	Z, r1
			t->Pwm = 0;
    3f8e:	89 81       	ldd	r24, Y+1	; 0x01
    3f90:	9a 81       	ldd	r25, Y+2	; 0x02
    3f92:	fc 01       	movw	r30, r24
    3f94:	11 82       	std	Z+1, r1	; 0x01
    3f96:	27 c0       	rjmp	.+78     	; 0x3fe6 <TireControl+0x86>
		}
		else if(t->Tire == _FOR_DOWN){
    3f98:	89 81       	ldd	r24, Y+1	; 0x01
    3f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f9c:	fc 01       	movw	r30, r24
    3f9e:	80 81       	ld	r24, Z
    3fa0:	81 30       	cpi	r24, 0x01	; 1
    3fa2:	09 f5       	brne	.+66     	; 0x3fe6 <TireControl+0x86>
			t->Tire = _FOR_UP;
    3fa4:	89 81       	ldd	r24, Y+1	; 0x01
    3fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fa8:	fc 01       	movw	r30, r24
    3faa:	10 82       	st	Z, r1
    3fac:	1c c0       	rjmp	.+56     	; 0x3fe6 <TireControl+0x86>
		}
	}
	else{
		if(t->Tire == _FOR_UP || t->Tire == _FOR_MAX){
    3fae:	89 81       	ldd	r24, Y+1	; 0x01
    3fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb2:	fc 01       	movw	r30, r24
    3fb4:	80 81       	ld	r24, Z
    3fb6:	88 23       	and	r24, r24
    3fb8:	31 f0       	breq	.+12     	; 0x3fc6 <TireControl+0x66>
    3fba:	89 81       	ldd	r24, Y+1	; 0x01
    3fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    3fbe:	fc 01       	movw	r30, r24
    3fc0:	80 81       	ld	r24, Z
    3fc2:	82 30       	cpi	r24, 0x02	; 2
    3fc4:	81 f4       	brne	.+32     	; 0x3fe6 <TireControl+0x86>
			t->Tire = _FOR_DOWN;
    3fc6:	89 81       	ldd	r24, Y+1	; 0x01
    3fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fca:	21 e0       	ldi	r18, 0x01	; 1
    3fcc:	fc 01       	movw	r30, r24
    3fce:	20 83       	st	Z, r18
			t->p = SolveTireDownFunction(t->Pwm);
    3fd0:	89 81       	ldd	r24, Y+1	; 0x01
    3fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    3fd4:	fc 01       	movw	r30, r24
    3fd6:	81 81       	ldd	r24, Z+1	; 0x01
    3fd8:	0e 94 bd 22 	call	0x457a	; 0x457a <SolveTireDownFunction>
    3fdc:	28 2f       	mov	r18, r24
    3fde:	89 81       	ldd	r24, Y+1	; 0x01
    3fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe2:	fc 01       	movw	r30, r24
    3fe4:	27 83       	std	Z+7, r18	; 0x07
		}
	}
	
	if(t->Act == BACK){
    3fe6:	89 81       	ldd	r24, Y+1	; 0x01
    3fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fea:	fc 01       	movw	r30, r24
    3fec:	81 85       	ldd	r24, Z+9	; 0x09
    3fee:	82 30       	cpi	r24, 0x02	; 2
    3ff0:	e1 f4       	brne	.+56     	; 0x402a <TireControl+0xca>
		if(t->Tire == _BRAKE){
    3ff2:	89 81       	ldd	r24, Y+1	; 0x01
    3ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ff6:	fc 01       	movw	r30, r24
    3ff8:	80 81       	ld	r24, Z
    3ffa:	88 30       	cpi	r24, 0x08	; 8
    3ffc:	51 f4       	brne	.+20     	; 0x4012 <TireControl+0xb2>
			t->Tire = _BACK_UP;
    3ffe:	89 81       	ldd	r24, Y+1	; 0x01
    4000:	9a 81       	ldd	r25, Y+2	; 0x02
    4002:	24 e0       	ldi	r18, 0x04	; 4
    4004:	fc 01       	movw	r30, r24
    4006:	20 83       	st	Z, r18
			t->Pwm = 0;
    4008:	89 81       	ldd	r24, Y+1	; 0x01
    400a:	9a 81       	ldd	r25, Y+2	; 0x02
    400c:	fc 01       	movw	r30, r24
    400e:	11 82       	std	Z+1, r1	; 0x01
    4010:	28 c0       	rjmp	.+80     	; 0x4062 <TireControl+0x102>
		}
		else if(t->Tire == _BACK_DOWN){
    4012:	89 81       	ldd	r24, Y+1	; 0x01
    4014:	9a 81       	ldd	r25, Y+2	; 0x02
    4016:	fc 01       	movw	r30, r24
    4018:	80 81       	ld	r24, Z
    401a:	85 30       	cpi	r24, 0x05	; 5
    401c:	11 f5       	brne	.+68     	; 0x4062 <TireControl+0x102>
			t->Tire = _BACK_UP;
    401e:	89 81       	ldd	r24, Y+1	; 0x01
    4020:	9a 81       	ldd	r25, Y+2	; 0x02
    4022:	24 e0       	ldi	r18, 0x04	; 4
    4024:	fc 01       	movw	r30, r24
    4026:	20 83       	st	Z, r18
    4028:	1c c0       	rjmp	.+56     	; 0x4062 <TireControl+0x102>
		}
	}
	else {
		if(t->Tire == _BACK_UP || t->Tire == _BACK_MAX){
    402a:	89 81       	ldd	r24, Y+1	; 0x01
    402c:	9a 81       	ldd	r25, Y+2	; 0x02
    402e:	fc 01       	movw	r30, r24
    4030:	80 81       	ld	r24, Z
    4032:	84 30       	cpi	r24, 0x04	; 4
    4034:	31 f0       	breq	.+12     	; 0x4042 <TireControl+0xe2>
    4036:	89 81       	ldd	r24, Y+1	; 0x01
    4038:	9a 81       	ldd	r25, Y+2	; 0x02
    403a:	fc 01       	movw	r30, r24
    403c:	80 81       	ld	r24, Z
    403e:	86 30       	cpi	r24, 0x06	; 6
    4040:	81 f4       	brne	.+32     	; 0x4062 <TireControl+0x102>
			t->Tire = _BACK_DOWN;
    4042:	89 81       	ldd	r24, Y+1	; 0x01
    4044:	9a 81       	ldd	r25, Y+2	; 0x02
    4046:	25 e0       	ldi	r18, 0x05	; 5
    4048:	fc 01       	movw	r30, r24
    404a:	20 83       	st	Z, r18
			t->p = SolveTireDownFunction(t->Pwm);
    404c:	89 81       	ldd	r24, Y+1	; 0x01
    404e:	9a 81       	ldd	r25, Y+2	; 0x02
    4050:	fc 01       	movw	r30, r24
    4052:	81 81       	ldd	r24, Z+1	; 0x01
    4054:	0e 94 bd 22 	call	0x457a	; 0x457a <SolveTireDownFunction>
    4058:	28 2f       	mov	r18, r24
    405a:	89 81       	ldd	r24, Y+1	; 0x01
    405c:	9a 81       	ldd	r25, Y+2	; 0x02
    405e:	fc 01       	movw	r30, r24
    4060:	27 83       	std	Z+7, r18	; 0x07
		}
	}
	
	if(t->Act == BRAKE){
    4062:	89 81       	ldd	r24, Y+1	; 0x01
    4064:	9a 81       	ldd	r25, Y+2	; 0x02
    4066:	fc 01       	movw	r30, r24
    4068:	81 85       	ldd	r24, Z+9	; 0x09
    406a:	83 30       	cpi	r24, 0x03	; 3
    406c:	29 f4       	brne	.+10     	; 0x4078 <TireControl+0x118>
		t->Tire = _BRAKE;
    406e:	89 81       	ldd	r24, Y+1	; 0x01
    4070:	9a 81       	ldd	r25, Y+2	; 0x02
    4072:	28 e0       	ldi	r18, 0x08	; 8
    4074:	fc 01       	movw	r30, r24
    4076:	20 83       	st	Z, r18
	}
	
	switch(t->Tire){
    4078:	89 81       	ldd	r24, Y+1	; 0x01
    407a:	9a 81       	ldd	r25, Y+2	; 0x02
    407c:	fc 01       	movw	r30, r24
    407e:	80 81       	ld	r24, Z
    4080:	88 2f       	mov	r24, r24
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	84 30       	cpi	r24, 0x04	; 4
    4086:	91 05       	cpc	r25, r1
    4088:	09 f4       	brne	.+2      	; 0x408c <TireControl+0x12c>
    408a:	c4 c0       	rjmp	.+392    	; 0x4214 <TireControl+0x2b4>
    408c:	85 30       	cpi	r24, 0x05	; 5
    408e:	91 05       	cpc	r25, r1
    4090:	5c f4       	brge	.+22     	; 0x40a8 <TireControl+0x148>
    4092:	81 30       	cpi	r24, 0x01	; 1
    4094:	91 05       	cpc	r25, r1
    4096:	09 f4       	brne	.+2      	; 0x409a <TireControl+0x13a>
    4098:	5a c0       	rjmp	.+180    	; 0x414e <TireControl+0x1ee>
    409a:	82 30       	cpi	r24, 0x02	; 2
    409c:	91 05       	cpc	r25, r1
    409e:	09 f4       	brne	.+2      	; 0x40a2 <TireControl+0x142>
    40a0:	aa c0       	rjmp	.+340    	; 0x41f6 <TireControl+0x296>
    40a2:	00 97       	sbiw	r24, 0x00	; 0
    40a4:	71 f0       	breq	.+28     	; 0x40c2 <TireControl+0x162>
	  case _BRAKE:
		t->Status = BRAKE;
		t->Pwm = BRAKE_PWM;
		break;
	  default:
	    break;
    40a6:	6c c1       	rjmp	.+728    	; 0x4380 <TireControl+0x420>
	
	if(t->Act == BRAKE){
		t->Tire = _BRAKE;
	}
	
	switch(t->Tire){
    40a8:	86 30       	cpi	r24, 0x06	; 6
    40aa:	91 05       	cpc	r25, r1
    40ac:	09 f4       	brne	.+2      	; 0x40b0 <TireControl+0x150>
    40ae:	4b c1       	rjmp	.+662    	; 0x4346 <TireControl+0x3e6>
    40b0:	86 30       	cpi	r24, 0x06	; 6
    40b2:	91 05       	cpc	r25, r1
    40b4:	0c f4       	brge	.+2      	; 0x40b8 <TireControl+0x158>
    40b6:	f4 c0       	rjmp	.+488    	; 0x42a0 <TireControl+0x340>
    40b8:	88 30       	cpi	r24, 0x08	; 8
    40ba:	91 05       	cpc	r25, r1
    40bc:	09 f4       	brne	.+2      	; 0x40c0 <TireControl+0x160>
    40be:	52 c1       	rjmp	.+676    	; 0x4364 <TireControl+0x404>
	  case _BRAKE:
		t->Status = BRAKE;
		t->Pwm = BRAKE_PWM;
		break;
	  default:
	    break;
    40c0:	5f c1       	rjmp	.+702    	; 0x4380 <TireControl+0x420>
		t->Tire = _BRAKE;
	}
	
	switch(t->Tire){
	  case _FOR_UP:
		t->Count += 1;
    40c2:	89 81       	ldd	r24, Y+1	; 0x01
    40c4:	9a 81       	ldd	r25, Y+2	; 0x02
    40c6:	fc 01       	movw	r30, r24
    40c8:	82 81       	ldd	r24, Z+2	; 0x02
    40ca:	93 81       	ldd	r25, Z+3	; 0x03
    40cc:	9c 01       	movw	r18, r24
    40ce:	2f 5f       	subi	r18, 0xFF	; 255
    40d0:	3f 4f       	sbci	r19, 0xFF	; 255
    40d2:	89 81       	ldd	r24, Y+1	; 0x01
    40d4:	9a 81       	ldd	r25, Y+2	; 0x02
    40d6:	fc 01       	movw	r30, r24
    40d8:	33 83       	std	Z+3, r19	; 0x03
    40da:	22 83       	std	Z+2, r18	; 0x02
		if(t->Count >= t->UpSpan){
    40dc:	89 81       	ldd	r24, Y+1	; 0x01
    40de:	9a 81       	ldd	r25, Y+2	; 0x02
    40e0:	fc 01       	movw	r30, r24
    40e2:	22 81       	ldd	r18, Z+2	; 0x02
    40e4:	33 81       	ldd	r19, Z+3	; 0x03
    40e6:	89 81       	ldd	r24, Y+1	; 0x01
    40e8:	9a 81       	ldd	r25, Y+2	; 0x02
    40ea:	fc 01       	movw	r30, r24
    40ec:	85 81       	ldd	r24, Z+5	; 0x05
    40ee:	88 2f       	mov	r24, r24
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	28 17       	cp	r18, r24
    40f4:	39 07       	cpc	r19, r25
    40f6:	78 f0       	brcs	.+30     	; 0x4116 <TireControl+0x1b6>
			t->Pwm += 1;
    40f8:	89 81       	ldd	r24, Y+1	; 0x01
    40fa:	9a 81       	ldd	r25, Y+2	; 0x02
    40fc:	fc 01       	movw	r30, r24
    40fe:	81 81       	ldd	r24, Z+1	; 0x01
    4100:	8f 5f       	subi	r24, 0xFF	; 255
    4102:	28 2f       	mov	r18, r24
    4104:	89 81       	ldd	r24, Y+1	; 0x01
    4106:	9a 81       	ldd	r25, Y+2	; 0x02
    4108:	fc 01       	movw	r30, r24
    410a:	21 83       	std	Z+1, r18	; 0x01
			t->Count = 0;
    410c:	89 81       	ldd	r24, Y+1	; 0x01
    410e:	9a 81       	ldd	r25, Y+2	; 0x02
    4110:	fc 01       	movw	r30, r24
    4112:	13 82       	std	Z+3, r1	; 0x03
    4114:	12 82       	std	Z+2, r1	; 0x02
		}
		if(t->Pwm >= t->MaxPwm){
    4116:	89 81       	ldd	r24, Y+1	; 0x01
    4118:	9a 81       	ldd	r25, Y+2	; 0x02
    411a:	fc 01       	movw	r30, r24
    411c:	81 81       	ldd	r24, Z+1	; 0x01
    411e:	28 2f       	mov	r18, r24
    4120:	33 27       	eor	r19, r19
    4122:	27 fd       	sbrc	r18, 7
    4124:	30 95       	com	r19
    4126:	89 81       	ldd	r24, Y+1	; 0x01
    4128:	9a 81       	ldd	r25, Y+2	; 0x02
    412a:	fc 01       	movw	r30, r24
    412c:	80 85       	ldd	r24, Z+8	; 0x08
    412e:	88 2f       	mov	r24, r24
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	28 17       	cp	r18, r24
    4134:	39 07       	cpc	r19, r25
    4136:	2c f0       	brlt	.+10     	; 0x4142 <TireControl+0x1e2>
			t->Tire = _FOR_MAX;
    4138:	89 81       	ldd	r24, Y+1	; 0x01
    413a:	9a 81       	ldd	r25, Y+2	; 0x02
    413c:	22 e0       	ldi	r18, 0x02	; 2
    413e:	fc 01       	movw	r30, r24
    4140:	20 83       	st	Z, r18
		}
		t->Status = FOR;
    4142:	89 81       	ldd	r24, Y+1	; 0x01
    4144:	9a 81       	ldd	r25, Y+2	; 0x02
    4146:	21 e0       	ldi	r18, 0x01	; 1
    4148:	fc 01       	movw	r30, r24
    414a:	24 83       	std	Z+4, r18	; 0x04
		break;
    414c:	19 c1       	rjmp	.+562    	; 0x4380 <TireControl+0x420>
	  case _FOR_DOWN:
	    t->Count += 1;
    414e:	89 81       	ldd	r24, Y+1	; 0x01
    4150:	9a 81       	ldd	r25, Y+2	; 0x02
    4152:	fc 01       	movw	r30, r24
    4154:	82 81       	ldd	r24, Z+2	; 0x02
    4156:	93 81       	ldd	r25, Z+3	; 0x03
    4158:	9c 01       	movw	r18, r24
    415a:	2f 5f       	subi	r18, 0xFF	; 255
    415c:	3f 4f       	sbci	r19, 0xFF	; 255
    415e:	89 81       	ldd	r24, Y+1	; 0x01
    4160:	9a 81       	ldd	r25, Y+2	; 0x02
    4162:	fc 01       	movw	r30, r24
    4164:	33 83       	std	Z+3, r19	; 0x03
    4166:	22 83       	std	Z+2, r18	; 0x02
		if(t->Count >= t->DownSpan){
    4168:	89 81       	ldd	r24, Y+1	; 0x01
    416a:	9a 81       	ldd	r25, Y+2	; 0x02
    416c:	fc 01       	movw	r30, r24
    416e:	22 81       	ldd	r18, Z+2	; 0x02
    4170:	33 81       	ldd	r19, Z+3	; 0x03
    4172:	89 81       	ldd	r24, Y+1	; 0x01
    4174:	9a 81       	ldd	r25, Y+2	; 0x02
    4176:	fc 01       	movw	r30, r24
    4178:	86 81       	ldd	r24, Z+6	; 0x06
    417a:	88 2f       	mov	r24, r24
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	28 17       	cp	r18, r24
    4180:	39 07       	cpc	r19, r25
    4182:	f0 f0       	brcs	.+60     	; 0x41c0 <TireControl+0x260>
			t->p += 1;
    4184:	89 81       	ldd	r24, Y+1	; 0x01
    4186:	9a 81       	ldd	r25, Y+2	; 0x02
    4188:	fc 01       	movw	r30, r24
    418a:	87 81       	ldd	r24, Z+7	; 0x07
    418c:	28 2f       	mov	r18, r24
    418e:	2f 5f       	subi	r18, 0xFF	; 255
    4190:	89 81       	ldd	r24, Y+1	; 0x01
    4192:	9a 81       	ldd	r25, Y+2	; 0x02
    4194:	fc 01       	movw	r30, r24
    4196:	27 83       	std	Z+7, r18	; 0x07
			t->Pwm = TireTable[t->p];
    4198:	89 81       	ldd	r24, Y+1	; 0x01
    419a:	9a 81       	ldd	r25, Y+2	; 0x02
    419c:	fc 01       	movw	r30, r24
    419e:	87 81       	ldd	r24, Z+7	; 0x07
    41a0:	88 2f       	mov	r24, r24
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	86 5e       	subi	r24, 0xE6	; 230
    41a6:	9b 4f       	sbci	r25, 0xFB	; 251
    41a8:	fc 01       	movw	r30, r24
    41aa:	80 81       	ld	r24, Z
    41ac:	28 2f       	mov	r18, r24
    41ae:	89 81       	ldd	r24, Y+1	; 0x01
    41b0:	9a 81       	ldd	r25, Y+2	; 0x02
    41b2:	fc 01       	movw	r30, r24
    41b4:	21 83       	std	Z+1, r18	; 0x01
			t->Count = 0;
    41b6:	89 81       	ldd	r24, Y+1	; 0x01
    41b8:	9a 81       	ldd	r25, Y+2	; 0x02
    41ba:	fc 01       	movw	r30, r24
    41bc:	13 82       	std	Z+3, r1	; 0x03
    41be:	12 82       	std	Z+2, r1	; 0x02
		}
		t->Status = FOR;	
    41c0:	89 81       	ldd	r24, Y+1	; 0x01
    41c2:	9a 81       	ldd	r25, Y+2	; 0x02
    41c4:	21 e0       	ldi	r18, 0x01	; 1
    41c6:	fc 01       	movw	r30, r24
    41c8:	24 83       	std	Z+4, r18	; 0x04
		if(t->Pwm <= 1){
    41ca:	89 81       	ldd	r24, Y+1	; 0x01
    41cc:	9a 81       	ldd	r25, Y+2	; 0x02
    41ce:	fc 01       	movw	r30, r24
    41d0:	81 81       	ldd	r24, Z+1	; 0x01
    41d2:	82 30       	cpi	r24, 0x02	; 2
    41d4:	0c f0       	brlt	.+2      	; 0x41d8 <TireControl+0x278>
    41d6:	d1 c0       	rjmp	.+418    	; 0x437a <TireControl+0x41a>
			t->Pwm = 0;
    41d8:	89 81       	ldd	r24, Y+1	; 0x01
    41da:	9a 81       	ldd	r25, Y+2	; 0x02
    41dc:	fc 01       	movw	r30, r24
    41de:	11 82       	std	Z+1, r1	; 0x01
			t->Tire = _BRAKE;
    41e0:	89 81       	ldd	r24, Y+1	; 0x01
    41e2:	9a 81       	ldd	r25, Y+2	; 0x02
    41e4:	28 e0       	ldi	r18, 0x08	; 8
    41e6:	fc 01       	movw	r30, r24
    41e8:	20 83       	st	Z, r18
			t->Status = BRAKE;
    41ea:	89 81       	ldd	r24, Y+1	; 0x01
    41ec:	9a 81       	ldd	r25, Y+2	; 0x02
    41ee:	23 e0       	ldi	r18, 0x03	; 3
    41f0:	fc 01       	movw	r30, r24
    41f2:	24 83       	std	Z+4, r18	; 0x04
		}	
		break;
    41f4:	c5 c0       	rjmp	.+394    	; 0x4380 <TireControl+0x420>
      case _FOR_MAX:
		t->Status = FOR;
    41f6:	89 81       	ldd	r24, Y+1	; 0x01
    41f8:	9a 81       	ldd	r25, Y+2	; 0x02
    41fa:	21 e0       	ldi	r18, 0x01	; 1
    41fc:	fc 01       	movw	r30, r24
    41fe:	24 83       	std	Z+4, r18	; 0x04
		t->Pwm = t->MaxPwm;
    4200:	89 81       	ldd	r24, Y+1	; 0x01
    4202:	9a 81       	ldd	r25, Y+2	; 0x02
    4204:	fc 01       	movw	r30, r24
    4206:	80 85       	ldd	r24, Z+8	; 0x08
    4208:	28 2f       	mov	r18, r24
    420a:	89 81       	ldd	r24, Y+1	; 0x01
    420c:	9a 81       	ldd	r25, Y+2	; 0x02
    420e:	fc 01       	movw	r30, r24
    4210:	21 83       	std	Z+1, r18	; 0x01
		
		break;
    4212:	b6 c0       	rjmp	.+364    	; 0x4380 <TireControl+0x420>
	  case _BACK_UP:
	    t->Count += 1;
    4214:	89 81       	ldd	r24, Y+1	; 0x01
    4216:	9a 81       	ldd	r25, Y+2	; 0x02
    4218:	fc 01       	movw	r30, r24
    421a:	82 81       	ldd	r24, Z+2	; 0x02
    421c:	93 81       	ldd	r25, Z+3	; 0x03
    421e:	9c 01       	movw	r18, r24
    4220:	2f 5f       	subi	r18, 0xFF	; 255
    4222:	3f 4f       	sbci	r19, 0xFF	; 255
    4224:	89 81       	ldd	r24, Y+1	; 0x01
    4226:	9a 81       	ldd	r25, Y+2	; 0x02
    4228:	fc 01       	movw	r30, r24
    422a:	33 83       	std	Z+3, r19	; 0x03
    422c:	22 83       	std	Z+2, r18	; 0x02
		if(t->Count >= t->UpSpan){
    422e:	89 81       	ldd	r24, Y+1	; 0x01
    4230:	9a 81       	ldd	r25, Y+2	; 0x02
    4232:	fc 01       	movw	r30, r24
    4234:	22 81       	ldd	r18, Z+2	; 0x02
    4236:	33 81       	ldd	r19, Z+3	; 0x03
    4238:	89 81       	ldd	r24, Y+1	; 0x01
    423a:	9a 81       	ldd	r25, Y+2	; 0x02
    423c:	fc 01       	movw	r30, r24
    423e:	85 81       	ldd	r24, Z+5	; 0x05
    4240:	88 2f       	mov	r24, r24
    4242:	90 e0       	ldi	r25, 0x00	; 0
    4244:	28 17       	cp	r18, r24
    4246:	39 07       	cpc	r19, r25
    4248:	78 f0       	brcs	.+30     	; 0x4268 <TireControl+0x308>
			t->Pwm += 1;
    424a:	89 81       	ldd	r24, Y+1	; 0x01
    424c:	9a 81       	ldd	r25, Y+2	; 0x02
    424e:	fc 01       	movw	r30, r24
    4250:	81 81       	ldd	r24, Z+1	; 0x01
    4252:	8f 5f       	subi	r24, 0xFF	; 255
    4254:	28 2f       	mov	r18, r24
    4256:	89 81       	ldd	r24, Y+1	; 0x01
    4258:	9a 81       	ldd	r25, Y+2	; 0x02
    425a:	fc 01       	movw	r30, r24
    425c:	21 83       	std	Z+1, r18	; 0x01
			t->Count = 0;
    425e:	89 81       	ldd	r24, Y+1	; 0x01
    4260:	9a 81       	ldd	r25, Y+2	; 0x02
    4262:	fc 01       	movw	r30, r24
    4264:	13 82       	std	Z+3, r1	; 0x03
    4266:	12 82       	std	Z+2, r1	; 0x02
		}
		if(t->Pwm >= t->MaxPwm){
    4268:	89 81       	ldd	r24, Y+1	; 0x01
    426a:	9a 81       	ldd	r25, Y+2	; 0x02
    426c:	fc 01       	movw	r30, r24
    426e:	81 81       	ldd	r24, Z+1	; 0x01
    4270:	28 2f       	mov	r18, r24
    4272:	33 27       	eor	r19, r19
    4274:	27 fd       	sbrc	r18, 7
    4276:	30 95       	com	r19
    4278:	89 81       	ldd	r24, Y+1	; 0x01
    427a:	9a 81       	ldd	r25, Y+2	; 0x02
    427c:	fc 01       	movw	r30, r24
    427e:	80 85       	ldd	r24, Z+8	; 0x08
    4280:	88 2f       	mov	r24, r24
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	28 17       	cp	r18, r24
    4286:	39 07       	cpc	r19, r25
    4288:	2c f0       	brlt	.+10     	; 0x4294 <TireControl+0x334>
			t->Tire = _BACK_MAX;
    428a:	89 81       	ldd	r24, Y+1	; 0x01
    428c:	9a 81       	ldd	r25, Y+2	; 0x02
    428e:	26 e0       	ldi	r18, 0x06	; 6
    4290:	fc 01       	movw	r30, r24
    4292:	20 83       	st	Z, r18
		}
		t->Status = BACK;
    4294:	89 81       	ldd	r24, Y+1	; 0x01
    4296:	9a 81       	ldd	r25, Y+2	; 0x02
    4298:	22 e0       	ldi	r18, 0x02	; 2
    429a:	fc 01       	movw	r30, r24
    429c:	24 83       	std	Z+4, r18	; 0x04
		break;
    429e:	70 c0       	rjmp	.+224    	; 0x4380 <TireControl+0x420>
	  case _BACK_DOWN:
	    t->Count += 1;
    42a0:	89 81       	ldd	r24, Y+1	; 0x01
    42a2:	9a 81       	ldd	r25, Y+2	; 0x02
    42a4:	fc 01       	movw	r30, r24
    42a6:	82 81       	ldd	r24, Z+2	; 0x02
    42a8:	93 81       	ldd	r25, Z+3	; 0x03
    42aa:	9c 01       	movw	r18, r24
    42ac:	2f 5f       	subi	r18, 0xFF	; 255
    42ae:	3f 4f       	sbci	r19, 0xFF	; 255
    42b0:	89 81       	ldd	r24, Y+1	; 0x01
    42b2:	9a 81       	ldd	r25, Y+2	; 0x02
    42b4:	fc 01       	movw	r30, r24
    42b6:	33 83       	std	Z+3, r19	; 0x03
    42b8:	22 83       	std	Z+2, r18	; 0x02
		if(t->Count >= t->DownSpan){
    42ba:	89 81       	ldd	r24, Y+1	; 0x01
    42bc:	9a 81       	ldd	r25, Y+2	; 0x02
    42be:	fc 01       	movw	r30, r24
    42c0:	22 81       	ldd	r18, Z+2	; 0x02
    42c2:	33 81       	ldd	r19, Z+3	; 0x03
    42c4:	89 81       	ldd	r24, Y+1	; 0x01
    42c6:	9a 81       	ldd	r25, Y+2	; 0x02
    42c8:	fc 01       	movw	r30, r24
    42ca:	86 81       	ldd	r24, Z+6	; 0x06
    42cc:	88 2f       	mov	r24, r24
    42ce:	90 e0       	ldi	r25, 0x00	; 0
    42d0:	28 17       	cp	r18, r24
    42d2:	39 07       	cpc	r19, r25
    42d4:	f0 f0       	brcs	.+60     	; 0x4312 <TireControl+0x3b2>
			t->p += 1;
    42d6:	89 81       	ldd	r24, Y+1	; 0x01
    42d8:	9a 81       	ldd	r25, Y+2	; 0x02
    42da:	fc 01       	movw	r30, r24
    42dc:	87 81       	ldd	r24, Z+7	; 0x07
    42de:	28 2f       	mov	r18, r24
    42e0:	2f 5f       	subi	r18, 0xFF	; 255
    42e2:	89 81       	ldd	r24, Y+1	; 0x01
    42e4:	9a 81       	ldd	r25, Y+2	; 0x02
    42e6:	fc 01       	movw	r30, r24
    42e8:	27 83       	std	Z+7, r18	; 0x07
			t->Pwm = TireTable[t->p];
    42ea:	89 81       	ldd	r24, Y+1	; 0x01
    42ec:	9a 81       	ldd	r25, Y+2	; 0x02
    42ee:	fc 01       	movw	r30, r24
    42f0:	87 81       	ldd	r24, Z+7	; 0x07
    42f2:	88 2f       	mov	r24, r24
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	86 5e       	subi	r24, 0xE6	; 230
    42f8:	9b 4f       	sbci	r25, 0xFB	; 251
    42fa:	fc 01       	movw	r30, r24
    42fc:	80 81       	ld	r24, Z
    42fe:	28 2f       	mov	r18, r24
    4300:	89 81       	ldd	r24, Y+1	; 0x01
    4302:	9a 81       	ldd	r25, Y+2	; 0x02
    4304:	fc 01       	movw	r30, r24
    4306:	21 83       	std	Z+1, r18	; 0x01
			t->Count = 0;
    4308:	89 81       	ldd	r24, Y+1	; 0x01
    430a:	9a 81       	ldd	r25, Y+2	; 0x02
    430c:	fc 01       	movw	r30, r24
    430e:	13 82       	std	Z+3, r1	; 0x03
    4310:	12 82       	std	Z+2, r1	; 0x02
		}
		t->Status = BACK;
    4312:	89 81       	ldd	r24, Y+1	; 0x01
    4314:	9a 81       	ldd	r25, Y+2	; 0x02
    4316:	22 e0       	ldi	r18, 0x02	; 2
    4318:	fc 01       	movw	r30, r24
    431a:	24 83       	std	Z+4, r18	; 0x04
		if(t->Pwm <= 1){
    431c:	89 81       	ldd	r24, Y+1	; 0x01
    431e:	9a 81       	ldd	r25, Y+2	; 0x02
    4320:	fc 01       	movw	r30, r24
    4322:	81 81       	ldd	r24, Z+1	; 0x01
    4324:	82 30       	cpi	r24, 0x02	; 2
    4326:	5c f5       	brge	.+86     	; 0x437e <TireControl+0x41e>
			t->Pwm = 0;
    4328:	89 81       	ldd	r24, Y+1	; 0x01
    432a:	9a 81       	ldd	r25, Y+2	; 0x02
    432c:	fc 01       	movw	r30, r24
    432e:	11 82       	std	Z+1, r1	; 0x01
			t->Tire = _BRAKE;
    4330:	89 81       	ldd	r24, Y+1	; 0x01
    4332:	9a 81       	ldd	r25, Y+2	; 0x02
    4334:	28 e0       	ldi	r18, 0x08	; 8
    4336:	fc 01       	movw	r30, r24
    4338:	20 83       	st	Z, r18
			t->Status = BRAKE;
    433a:	89 81       	ldd	r24, Y+1	; 0x01
    433c:	9a 81       	ldd	r25, Y+2	; 0x02
    433e:	23 e0       	ldi	r18, 0x03	; 3
    4340:	fc 01       	movw	r30, r24
    4342:	24 83       	std	Z+4, r18	; 0x04
		}		
		break;
    4344:	1d c0       	rjmp	.+58     	; 0x4380 <TireControl+0x420>
	  case _BACK_MAX:
	    t->Status = BACK;
    4346:	89 81       	ldd	r24, Y+1	; 0x01
    4348:	9a 81       	ldd	r25, Y+2	; 0x02
    434a:	22 e0       	ldi	r18, 0x02	; 2
    434c:	fc 01       	movw	r30, r24
    434e:	24 83       	std	Z+4, r18	; 0x04
		t->Pwm = t->MaxPwm;
    4350:	89 81       	ldd	r24, Y+1	; 0x01
    4352:	9a 81       	ldd	r25, Y+2	; 0x02
    4354:	fc 01       	movw	r30, r24
    4356:	80 85       	ldd	r24, Z+8	; 0x08
    4358:	28 2f       	mov	r18, r24
    435a:	89 81       	ldd	r24, Y+1	; 0x01
    435c:	9a 81       	ldd	r25, Y+2	; 0x02
    435e:	fc 01       	movw	r30, r24
    4360:	21 83       	std	Z+1, r18	; 0x01
	    
		break;
    4362:	0e c0       	rjmp	.+28     	; 0x4380 <TireControl+0x420>
	  case _BRAKE:
		t->Status = BRAKE;
    4364:	89 81       	ldd	r24, Y+1	; 0x01
    4366:	9a 81       	ldd	r25, Y+2	; 0x02
    4368:	23 e0       	ldi	r18, 0x03	; 3
    436a:	fc 01       	movw	r30, r24
    436c:	24 83       	std	Z+4, r18	; 0x04
		t->Pwm = BRAKE_PWM;
    436e:	89 81       	ldd	r24, Y+1	; 0x01
    4370:	9a 81       	ldd	r25, Y+2	; 0x02
    4372:	24 e6       	ldi	r18, 0x64	; 100
    4374:	fc 01       	movw	r30, r24
    4376:	21 83       	std	Z+1, r18	; 0x01
		break;
    4378:	03 c0       	rjmp	.+6      	; 0x4380 <TireControl+0x420>
		if(t->Pwm <= 1){
			t->Pwm = 0;
			t->Tire = _BRAKE;
			t->Status = BRAKE;
		}	
		break;
    437a:	00 00       	nop
    437c:	01 c0       	rjmp	.+2      	; 0x4380 <TireControl+0x420>
		if(t->Pwm <= 1){
			t->Pwm = 0;
			t->Tire = _BRAKE;
			t->Status = BRAKE;
		}		
		break;
    437e:	00 00       	nop
		break;
	  default:
	    break;
	}
	
	if(t->MotorNo == 2){
    4380:	89 81       	ldd	r24, Y+1	; 0x01
    4382:	9a 81       	ldd	r25, Y+2	; 0x02
    4384:	fc 01       	movw	r30, r24
    4386:	82 85       	ldd	r24, Z+10	; 0x0a
    4388:	82 30       	cpi	r24, 0x02	; 2
    438a:	69 f4       	brne	.+26     	; 0x43a6 <TireControl+0x446>
		STEERING_M.status = t->Status;
    438c:	89 81       	ldd	r24, Y+1	; 0x01
    438e:	9a 81       	ldd	r25, Y+2	; 0x02
    4390:	fc 01       	movw	r30, r24
    4392:	84 81       	ldd	r24, Z+4	; 0x04
    4394:	80 93 b8 04 	sts	0x04B8, r24
		STEERING_M.pwm = t->Pwm;
    4398:	89 81       	ldd	r24, Y+1	; 0x01
    439a:	9a 81       	ldd	r25, Y+2	; 0x02
    439c:	fc 01       	movw	r30, r24
    439e:	81 81       	ldd	r24, Z+1	; 0x01
    43a0:	80 93 b9 04 	sts	0x04B9, r24
    43a4:	33 c0       	rjmp	.+102    	; 0x440c <TireControl+0x4ac>
	}
	else if(t->MotorNo == 5){
    43a6:	89 81       	ldd	r24, Y+1	; 0x01
    43a8:	9a 81       	ldd	r25, Y+2	; 0x02
    43aa:	fc 01       	movw	r30, r24
    43ac:	82 85       	ldd	r24, Z+10	; 0x0a
    43ae:	85 30       	cpi	r24, 0x05	; 5
    43b0:	69 f4       	brne	.+26     	; 0x43cc <TireControl+0x46c>
		FRONT_TIRE.status = t->Status;
    43b2:	89 81       	ldd	r24, Y+1	; 0x01
    43b4:	9a 81       	ldd	r25, Y+2	; 0x02
    43b6:	fc 01       	movw	r30, r24
    43b8:	84 81       	ldd	r24, Z+4	; 0x04
    43ba:	80 93 be 04 	sts	0x04BE, r24
		FRONT_TIRE.pwm = t->Pwm;
    43be:	89 81       	ldd	r24, Y+1	; 0x01
    43c0:	9a 81       	ldd	r25, Y+2	; 0x02
    43c2:	fc 01       	movw	r30, r24
    43c4:	81 81       	ldd	r24, Z+1	; 0x01
    43c6:	80 93 bf 04 	sts	0x04BF, r24
    43ca:	20 c0       	rjmp	.+64     	; 0x440c <TireControl+0x4ac>
	}
	else{
		MotorArray[t->MotorNo].status = t->Status;
    43cc:	89 81       	ldd	r24, Y+1	; 0x01
    43ce:	9a 81       	ldd	r25, Y+2	; 0x02
    43d0:	fc 01       	movw	r30, r24
    43d2:	82 85       	ldd	r24, Z+10	; 0x0a
    43d4:	88 2f       	mov	r24, r24
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	29 81       	ldd	r18, Y+1	; 0x01
    43da:	3a 81       	ldd	r19, Y+2	; 0x02
    43dc:	f9 01       	movw	r30, r18
    43de:	24 81       	ldd	r18, Z+4	; 0x04
    43e0:	88 0f       	add	r24, r24
    43e2:	99 1f       	adc	r25, r25
    43e4:	81 5c       	subi	r24, 0xC1	; 193
    43e6:	9a 4f       	sbci	r25, 0xFA	; 250
    43e8:	fc 01       	movw	r30, r24
    43ea:	20 83       	st	Z, r18
		MotorArray[t->MotorNo].pwm = t->Pwm;
    43ec:	89 81       	ldd	r24, Y+1	; 0x01
    43ee:	9a 81       	ldd	r25, Y+2	; 0x02
    43f0:	fc 01       	movw	r30, r24
    43f2:	82 85       	ldd	r24, Z+10	; 0x0a
    43f4:	88 2f       	mov	r24, r24
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	29 81       	ldd	r18, Y+1	; 0x01
    43fa:	3a 81       	ldd	r19, Y+2	; 0x02
    43fc:	f9 01       	movw	r30, r18
    43fe:	21 81       	ldd	r18, Z+1	; 0x01
    4400:	88 0f       	add	r24, r24
    4402:	99 1f       	adc	r25, r25
    4404:	80 5c       	subi	r24, 0xC0	; 192
    4406:	9a 4f       	sbci	r25, 0xFA	; 250
    4408:	fc 01       	movw	r30, r24
    440a:	20 83       	st	Z, r18
	}	
}
    440c:	0f 90       	pop	r0
    440e:	0f 90       	pop	r0
    4410:	cf 91       	pop	r28
    4412:	df 91       	pop	r29
    4414:	08 95       	ret

00004416 <SteeringControl>:

static void SteeringControl(void){
    4416:	df 93       	push	r29
    4418:	cf 93       	push	r28
    441a:	cd b7       	in	r28, 0x3d	; 61
    441c:	de b7       	in	r29, 0x3e	; 62
	if(STEERING_LEFT_BUTTON){
    441e:	80 91 92 04 	lds	r24, 0x0492
    4422:	90 91 93 04 	lds	r25, 0x0493
    4426:	fc 01       	movw	r30, r24
    4428:	81 81       	ldd	r24, Z+1	; 0x01
    442a:	80 72       	andi	r24, 0x20	; 32
    442c:	88 23       	and	r24, r24
    442e:	69 f0       	breq	.+26     	; 0x444a <SteeringControl+0x34>
		STEERING_M.status = FOR;
    4430:	81 e0       	ldi	r24, 0x01	; 1
    4432:	80 93 b8 04 	sts	0x04B8, r24
		STEERING_M.pwm = 100;
    4436:	84 e6       	ldi	r24, 0x64	; 100
    4438:	80 93 b9 04 	sts	0x04B9, r24
		
		LeftTire.MaxPwm = LTIRE_STEERING_MAX_PWM;
    443c:	84 e1       	ldi	r24, 0x14	; 20
    443e:	80 93 d8 03 	sts	0x03D8, r24
		RightTire.MaxPwm = RTIRE_MAX_PWM;
    4442:	8e e1       	ldi	r24, 0x1E	; 30
    4444:	80 93 e3 03 	sts	0x03E3, r24
    4448:	22 c0       	rjmp	.+68     	; 0x448e <SteeringControl+0x78>
	}
	else if(STEERING_RIGHT_BUTTON){
    444a:	80 91 92 04 	lds	r24, 0x0492
    444e:	90 91 93 04 	lds	r25, 0x0493
    4452:	fc 01       	movw	r30, r24
    4454:	81 81       	ldd	r24, Z+1	; 0x01
    4456:	80 74       	andi	r24, 0x40	; 64
    4458:	88 23       	and	r24, r24
    445a:	69 f0       	breq	.+26     	; 0x4476 <SteeringControl+0x60>
		STEERING_M.status = BACK;
    445c:	82 e0       	ldi	r24, 0x02	; 2
    445e:	80 93 b8 04 	sts	0x04B8, r24
		STEERING_M.pwm = 100;
    4462:	84 e6       	ldi	r24, 0x64	; 100
    4464:	80 93 b9 04 	sts	0x04B9, r24
		
		LeftTire.MaxPwm = LTIRE_MAX_PWM;
    4468:	8e e1       	ldi	r24, 0x1E	; 30
    446a:	80 93 d8 03 	sts	0x03D8, r24
		RightTire.MaxPwm = RTIRE_STEERING_MAX_PWM;
    446e:	84 e1       	ldi	r24, 0x14	; 20
    4470:	80 93 e3 03 	sts	0x03E3, r24
    4474:	0c c0       	rjmp	.+24     	; 0x448e <SteeringControl+0x78>
	}
	else {
		STEERING_M.status = BRAKE;
    4476:	83 e0       	ldi	r24, 0x03	; 3
    4478:	80 93 b8 04 	sts	0x04B8, r24
		STEERING_M.pwm = BRAKE_PWM;
    447c:	84 e6       	ldi	r24, 0x64	; 100
    447e:	80 93 b9 04 	sts	0x04B9, r24
		
		LeftTire.MaxPwm = LTIRE_MAX_PWM;
    4482:	8e e1       	ldi	r24, 0x1E	; 30
    4484:	80 93 d8 03 	sts	0x03D8, r24
		RightTire.MaxPwm = RTIRE_MAX_PWM;
    4488:	8e e1       	ldi	r24, 0x1E	; 30
    448a:	80 93 e3 03 	sts	0x03E3, r24
	}
}
    448e:	cf 91       	pop	r28
    4490:	df 91       	pop	r29
    4492:	08 95       	ret

00004494 <ResetProcessChange>:

static void ResetProcessChange(void){
    4494:	df 93       	push	r29
    4496:	cf 93       	push	r28
    4498:	cd b7       	in	r28, 0x3d	; 61
    449a:	de b7       	in	r29, 0x3e	; 62
	F_BELT_M.status = BRAKE;
    449c:	83 e0       	ldi	r24, 0x03	; 3
    449e:	80 93 ba 04 	sts	0x04BA, r24
	F_BELT_M.pwm = BRAKE_PWM;
    44a2:	84 e6       	ldi	r24, 0x64	; 100
    44a4:	80 93 bb 04 	sts	0x04BB, r24
	B_BELT_M.status = BRAKE;
    44a8:	83 e0       	ldi	r24, 0x03	; 3
    44aa:	80 93 bc 04 	sts	0x04BC, r24
	B_BELT_M.pwm    = BRAKE_PWM;
    44ae:	84 e6       	ldi	r24, 0x64	; 100
    44b0:	80 93 bd 04 	sts	0x04BD, r24
	BeltStatus = BRAKE;
    44b4:	83 e0       	ldi	r24, 0x03	; 3
    44b6:	80 93 02 04 	sts	0x0402, r24
	
	ProcessIncrementButtonPush = false;
    44ba:	10 92 09 04 	sts	0x0409, r1
	ProcessIncrementButtonPushed = false;
    44be:	10 92 0a 04 	sts	0x040A, r1
	ProcessDecrementButtonPush = false;
    44c2:	10 92 0b 04 	sts	0x040B, r1
	ProcessDecrementButtonPushed = false;
    44c6:	10 92 0c 04 	sts	0x040C, r1
	ArmButtonPush = false;
    44ca:	10 92 0d 04 	sts	0x040D, r1
	ArmButtonPushed = false;
    44ce:	10 92 0e 04 	sts	0x040E, r1
	BeltButtonPush = false;
    44d2:	10 92 0f 04 	sts	0x040F, r1
	BeltButtonPushed = false;
    44d6:	10 92 10 04 	sts	0x0410, r1
	BeltBackButtonPush = false;
    44da:	10 92 11 04 	sts	0x0411, r1
	BeltBackButtonPushed = false;	
    44de:	10 92 12 04 	sts	0x0412, r1
	BackUnitUpButtonPush = false;
    44e2:	10 92 13 04 	sts	0x0413, r1
	BackUnitUpButtonPushed = false;
    44e6:	10 92 14 04 	sts	0x0414, r1
	PetitFlatPlaneLockButtonPush = false;
    44ea:	10 92 15 04 	sts	0x0415, r1
	PetitFlatPlaneLockButtonPushed = false;
    44ee:	10 92 16 04 	sts	0x0416, r1
	FrontTireUpDownButtonPush = false;
    44f2:	10 92 17 04 	sts	0x0417, r1
	FrontTireUpDownButtonPushed = false;
    44f6:	10 92 18 04 	sts	0x0418, r1
	
	FrontTireDown = false;
    44fa:	10 92 fe 03 	sts	0x03FE, r1
}
    44fe:	cf 91       	pop	r28
    4500:	df 91       	pop	r29
    4502:	08 95       	ret

00004504 <TireDownFunction>:

static uint8_t TireDownFunction(uint8_t x){
    4504:	df 93       	push	r29
    4506:	cf 93       	push	r28
    4508:	0f 92       	push	r0
    450a:	cd b7       	in	r28, 0x3d	; 61
    450c:	de b7       	in	r29, 0x3e	; 62
    450e:	89 83       	std	Y+1, r24	; 0x01
	static const float a = 100.0 / (119 * 119);
	
	return (uint8_t)((x - 119) * (x - 119) * a);
    4510:	89 81       	ldd	r24, Y+1	; 0x01
    4512:	88 2f       	mov	r24, r24
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	ac 01       	movw	r20, r24
    4518:	47 57       	subi	r20, 0x77	; 119
    451a:	50 40       	sbci	r21, 0x00	; 0
    451c:	89 81       	ldd	r24, Y+1	; 0x01
    451e:	88 2f       	mov	r24, r24
    4520:	90 e0       	ldi	r25, 0x00	; 0
    4522:	9c 01       	movw	r18, r24
    4524:	27 57       	subi	r18, 0x77	; 119
    4526:	30 40       	sbci	r19, 0x00	; 0
    4528:	42 9f       	mul	r20, r18
    452a:	c0 01       	movw	r24, r0
    452c:	43 9f       	mul	r20, r19
    452e:	90 0d       	add	r25, r0
    4530:	52 9f       	mul	r21, r18
    4532:	90 0d       	add	r25, r0
    4534:	11 24       	eor	r1, r1
    4536:	aa 27       	eor	r26, r26
    4538:	97 fd       	sbrc	r25, 7
    453a:	a0 95       	com	r26
    453c:	ba 2f       	mov	r27, r26
    453e:	bc 01       	movw	r22, r24
    4540:	cd 01       	movw	r24, r26
    4542:	0e 94 e3 2b 	call	0x57c6	; 0x57c6 <__floatsisf>
    4546:	dc 01       	movw	r26, r24
    4548:	cb 01       	movw	r24, r22
    454a:	20 91 65 01 	lds	r18, 0x0165
    454e:	30 91 66 01 	lds	r19, 0x0166
    4552:	40 91 67 01 	lds	r20, 0x0167
    4556:	50 91 68 01 	lds	r21, 0x0168
    455a:	bc 01       	movw	r22, r24
    455c:	cd 01       	movw	r24, r26
    455e:	0e 94 b9 2a 	call	0x5572	; 0x5572 <__mulsf3>
    4562:	dc 01       	movw	r26, r24
    4564:	cb 01       	movw	r24, r22
    4566:	bc 01       	movw	r22, r24
    4568:	cd 01       	movw	r24, r26
    456a:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__fixunssfsi>
    456e:	dc 01       	movw	r26, r24
    4570:	cb 01       	movw	r24, r22
}
    4572:	0f 90       	pop	r0
    4574:	cf 91       	pop	r28
    4576:	df 91       	pop	r29
    4578:	08 95       	ret

0000457a <SolveTireDownFunction>:

static uint8_t SolveTireDownFunction(uint8_t y){
    457a:	df 93       	push	r29
    457c:	cf 93       	push	r28
    457e:	0f 92       	push	r0
    4580:	cd b7       	in	r28, 0x3d	; 61
    4582:	de b7       	in	r29, 0x3e	; 62
    4584:	89 83       	std	Y+1, r24	; 0x01
	return -(119 / 10.0) * sqrt(y) + 119;
    4586:	89 81       	ldd	r24, Y+1	; 0x01
    4588:	88 2f       	mov	r24, r24
    458a:	90 e0       	ldi	r25, 0x00	; 0
    458c:	a0 e0       	ldi	r26, 0x00	; 0
    458e:	b0 e0       	ldi	r27, 0x00	; 0
    4590:	bc 01       	movw	r22, r24
    4592:	cd 01       	movw	r24, r26
    4594:	0e 94 95 2c 	call	0x592a	; 0x592a <__floatunsisf>
    4598:	dc 01       	movw	r26, r24
    459a:	cb 01       	movw	r24, r22
    459c:	bc 01       	movw	r22, r24
    459e:	cd 01       	movw	r24, r26
    45a0:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <sqrt>
    45a4:	dc 01       	movw	r26, r24
    45a6:	cb 01       	movw	r24, r22
    45a8:	bc 01       	movw	r22, r24
    45aa:	cd 01       	movw	r24, r26
    45ac:	26 e6       	ldi	r18, 0x66	; 102
    45ae:	36 e6       	ldi	r19, 0x66	; 102
    45b0:	4e e3       	ldi	r20, 0x3E	; 62
    45b2:	51 ec       	ldi	r21, 0xC1	; 193
    45b4:	0e 94 b9 2a 	call	0x5572	; 0x5572 <__mulsf3>
    45b8:	dc 01       	movw	r26, r24
    45ba:	cb 01       	movw	r24, r22
    45bc:	bc 01       	movw	r22, r24
    45be:	cd 01       	movw	r24, r26
    45c0:	20 e0       	ldi	r18, 0x00	; 0
    45c2:	30 e0       	ldi	r19, 0x00	; 0
    45c4:	4e ee       	ldi	r20, 0xEE	; 238
    45c6:	52 e4       	ldi	r21, 0x42	; 66
    45c8:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <__addsf3>
    45cc:	dc 01       	movw	r26, r24
    45ce:	cb 01       	movw	r24, r22
    45d0:	bc 01       	movw	r22, r24
    45d2:	cd 01       	movw	r24, r26
    45d4:	0e 94 e5 28 	call	0x51ca	; 0x51ca <__fixunssfsi>
    45d8:	dc 01       	movw	r26, r24
    45da:	cb 01       	movw	r24, r22
}
    45dc:	0f 90       	pop	r0
    45de:	cf 91       	pop	r28
    45e0:	df 91       	pop	r29
    45e2:	08 95       	ret

000045e4 <ModeLedControl>:

#endif

static void ModeLedControl(void){
    45e4:	df 93       	push	r29
    45e6:	cf 93       	push	r28
    45e8:	cd b7       	in	r28, 0x3d	; 61
    45ea:	de b7       	in	r29, 0x3e	; 62
	static bool ModeChanger = false;
	ModeChanger = !ModeChanger;
    45ec:	90 91 a6 04 	lds	r25, 0x04A6
    45f0:	81 e0       	ldi	r24, 0x01	; 1
    45f2:	89 27       	eor	r24, r25
    45f4:	88 2f       	mov	r24, r24
    45f6:	90 e0       	ldi	r25, 0x00	; 0
    45f8:	80 93 a6 04 	sts	0x04A6, r24
	
#if SPACE_MODE
	if(CtrlLost && powerLost){
    45fc:	80 91 a7 04 	lds	r24, 0x04A7
    4600:	88 23       	and	r24, r24
    4602:	79 f0       	breq	.+30     	; 0x4622 <ModeLedControl+0x3e>
    4604:	80 91 54 05 	lds	r24, 0x0554
    4608:	88 23       	and	r24, r24
    460a:	59 f0       	breq	.+22     	; 0x4622 <ModeLedControl+0x3e>
		LedHubArray[0] = LED_ON;
    460c:	81 e0       	ldi	r24, 0x01	; 1
    460e:	80 93 a8 04 	sts	0x04A8, r24
		LedHubArray[1] = LED_OFF;
    4612:	10 92 a9 04 	sts	0x04A9, r1
		LedHubArray[2] = LED_OFF;
    4616:	10 92 aa 04 	sts	0x04AA, r1
		LedHubArray[3] = LED_ON;
    461a:	81 e0       	ldi	r24, 0x01	; 1
    461c:	80 93 ab 04 	sts	0x04AB, r24
    4620:	60 c0       	rjmp	.+192    	; 0x46e2 <ModeLedControl+0xfe>
	}
	else if(CtrlLost){
    4622:	80 91 a7 04 	lds	r24, 0x04A7
    4626:	88 23       	and	r24, r24
    4628:	59 f0       	breq	.+22     	; 0x4640 <ModeLedControl+0x5c>
		LedHubArray[0] = LED_OFF;
    462a:	10 92 a8 04 	sts	0x04A8, r1
		LedHubArray[1] = LED_ON;
    462e:	81 e0       	ldi	r24, 0x01	; 1
    4630:	80 93 a9 04 	sts	0x04A9, r24
		LedHubArray[2] = LED_OFF;
    4634:	10 92 aa 04 	sts	0x04AA, r1
		LedHubArray[3] = LED_ON;
    4638:	81 e0       	ldi	r24, 0x01	; 1
    463a:	80 93 ab 04 	sts	0x04AB, r24
    463e:	51 c0       	rjmp	.+162    	; 0x46e2 <ModeLedControl+0xfe>
	}
	else if(powerLost){
    4640:	80 91 54 05 	lds	r24, 0x0554
    4644:	88 23       	and	r24, r24
    4646:	61 f0       	breq	.+24     	; 0x4660 <ModeLedControl+0x7c>
		LedHubArray[0] = LED_ON;
    4648:	81 e0       	ldi	r24, 0x01	; 1
    464a:	80 93 a8 04 	sts	0x04A8, r24
		LedHubArray[1] = LED_ON;
    464e:	81 e0       	ldi	r24, 0x01	; 1
    4650:	80 93 a9 04 	sts	0x04A9, r24
		LedHubArray[2] = LED_OFF;
    4654:	10 92 aa 04 	sts	0x04AA, r1
		LedHubArray[3] = LED_ON;
    4658:	81 e0       	ldi	r24, 0x01	; 1
    465a:	80 93 ab 04 	sts	0x04AB, r24
    465e:	41 c0       	rjmp	.+130    	; 0x46e2 <ModeLedControl+0xfe>
	}
	else{
#if SPACE_MODE
		switch(currentProcess){
    4660:	80 91 94 04 	lds	r24, 0x0494
    4664:	90 91 95 04 	lds	r25, 0x0495
    4668:	81 30       	cpi	r24, 0x01	; 1
    466a:	91 05       	cpc	r25, r1
    466c:	c9 f0       	breq	.+50     	; 0x46a0 <ModeLedControl+0xbc>
    466e:	82 30       	cpi	r24, 0x02	; 2
    4670:	91 05       	cpc	r25, r1
    4672:	1c f4       	brge	.+6      	; 0x467a <ModeLedControl+0x96>
    4674:	00 97       	sbiw	r24, 0x00	; 0
    4676:	41 f0       	breq	.+16     	; 0x4688 <ModeLedControl+0xa4>
    4678:	34 c0       	rjmp	.+104    	; 0x46e2 <ModeLedControl+0xfe>
    467a:	82 30       	cpi	r24, 0x02	; 2
    467c:	91 05       	cpc	r25, r1
    467e:	e1 f0       	breq	.+56     	; 0x46b8 <ModeLedControl+0xd4>
    4680:	83 30       	cpi	r24, 0x03	; 3
    4682:	91 05       	cpc	r25, r1
    4684:	19 f1       	breq	.+70     	; 0x46cc <ModeLedControl+0xe8>
    4686:	2d c0       	rjmp	.+90     	; 0x46e2 <ModeLedControl+0xfe>
			case 0:
				LedHubArray[0] = LED_OFF;
    4688:	10 92 a8 04 	sts	0x04A8, r1
				LedHubArray[1] = LED_ON;
    468c:	81 e0       	ldi	r24, 0x01	; 1
    468e:	80 93 a9 04 	sts	0x04A9, r24
				LedHubArray[2] = LED_ON;
    4692:	81 e0       	ldi	r24, 0x01	; 1
    4694:	80 93 aa 04 	sts	0x04AA, r24
				LedHubArray[3] = LED_ON;
    4698:	81 e0       	ldi	r24, 0x01	; 1
    469a:	80 93 ab 04 	sts	0x04AB, r24
				break;
    469e:	21 c0       	rjmp	.+66     	; 0x46e2 <ModeLedControl+0xfe>
			case 1:
				LedHubArray[0] = LED_ON;
    46a0:	81 e0       	ldi	r24, 0x01	; 1
    46a2:	80 93 a8 04 	sts	0x04A8, r24
				LedHubArray[1] = LED_OFF;
    46a6:	10 92 a9 04 	sts	0x04A9, r1
				LedHubArray[2] = LED_ON;
    46aa:	81 e0       	ldi	r24, 0x01	; 1
    46ac:	80 93 aa 04 	sts	0x04AA, r24
				LedHubArray[3] = LED_ON;
    46b0:	81 e0       	ldi	r24, 0x01	; 1
    46b2:	80 93 ab 04 	sts	0x04AB, r24
				break;
    46b6:	15 c0       	rjmp	.+42     	; 0x46e2 <ModeLedControl+0xfe>
			case 2:
				LedHubArray[0] = LED_OFF;
    46b8:	10 92 a8 04 	sts	0x04A8, r1
				LedHubArray[1] = LED_OFF;
    46bc:	10 92 a9 04 	sts	0x04A9, r1
				LedHubArray[2] = LED_OFF;
    46c0:	10 92 aa 04 	sts	0x04AA, r1
				LedHubArray[3] = LED_ON;
    46c4:	81 e0       	ldi	r24, 0x01	; 1
    46c6:	80 93 ab 04 	sts	0x04AB, r24
				break;
    46ca:	0b c0       	rjmp	.+22     	; 0x46e2 <ModeLedControl+0xfe>
			case 3:
				LedHubArray[0] = LED_OFF;
    46cc:	10 92 a8 04 	sts	0x04A8, r1
				LedHubArray[1] = LED_OFF;
    46d0:	10 92 a9 04 	sts	0x04A9, r1
				LedHubArray[2] = LED_ON;
    46d4:	81 e0       	ldi	r24, 0x01	; 1
    46d6:	80 93 aa 04 	sts	0x04AA, r24
				LedHubArray[3] = LED_ON;
    46da:	81 e0       	ldi	r24, 0x01	; 1
    46dc:	80 93 ab 04 	sts	0x04AB, r24
				break;
    46e0:	00 00       	nop
		LedHubArray[2] = LED_OFF;
	}
#endif

// リードスイッチ
	if(TIRE_FRONT_SW){
    46e2:	80 91 16 05 	lds	r24, 0x0516
    46e6:	88 23       	and	r24, r24
    46e8:	21 f0       	breq	.+8      	; 0x46f2 <ModeLedControl+0x10e>
		LedHubArray[8] = LED_ON;
    46ea:	81 e0       	ldi	r24, 0x01	; 1
    46ec:	80 93 b0 04 	sts	0x04B0, r24
    46f0:	02 c0       	rjmp	.+4      	; 0x46f6 <ModeLedControl+0x112>
	}
	else{
		LedHubArray[8] = LED_OFF;
    46f2:	10 92 b0 04 	sts	0x04B0, r1
	}
	if(TIRE_REAR_SW){
    46f6:	80 91 17 05 	lds	r24, 0x0517
    46fa:	88 23       	and	r24, r24
    46fc:	21 f0       	breq	.+8      	; 0x4706 <ModeLedControl+0x122>
		LedHubArray[9] = LED_ON;
    46fe:	81 e0       	ldi	r24, 0x01	; 1
    4700:	80 93 b1 04 	sts	0x04B1, r24
    4704:	02 c0       	rjmp	.+4      	; 0x470a <ModeLedControl+0x126>
	}
	else{
		LedHubArray[9] = LED_OFF;
    4706:	10 92 b1 04 	sts	0x04B1, r1
	}
	
// リミットスイッチ
	if(STEERING_LEFT_SW){
    470a:	80 91 18 05 	lds	r24, 0x0518
    470e:	88 23       	and	r24, r24
    4710:	21 f0       	breq	.+8      	; 0x471a <ModeLedControl+0x136>
		LedHubArray[10] = LED_ON;
    4712:	81 e0       	ldi	r24, 0x01	; 1
    4714:	80 93 b2 04 	sts	0x04B2, r24
    4718:	02 c0       	rjmp	.+4      	; 0x471e <ModeLedControl+0x13a>
	}
	else{
		LedHubArray[10] = LED_OFF;	
    471a:	10 92 b2 04 	sts	0x04B2, r1
	}				
	if(STEERING_RIGHT_SW){
    471e:	80 91 19 05 	lds	r24, 0x0519
    4722:	88 23       	and	r24, r24
    4724:	21 f0       	breq	.+8      	; 0x472e <ModeLedControl+0x14a>
		LedHubArray[11] = LED_ON;
    4726:	81 e0       	ldi	r24, 0x01	; 1
    4728:	80 93 b3 04 	sts	0x04B3, r24
    472c:	02 c0       	rjmp	.+4      	; 0x4732 <ModeLedControl+0x14e>
	}
	else{
		LedHubArray[11] = LED_OFF;
    472e:	10 92 b3 04 	sts	0x04B3, r1
	}				
		
// ロックLed ( Parallel Communication )
		
	if(ModeChanger){
    4732:	80 91 a6 04 	lds	r24, 0x04A6
    4736:	88 23       	and	r24, r24
    4738:	19 f1       	breq	.+70     	; 0x4780 <ModeLedControl+0x19c>
		LedHubArray[4] = LED_OFF;
    473a:	10 92 ac 04 	sts	0x04AC, r1
		
		// 角材ロック
		if(!F_LOCK_A){
    473e:	90 91 cb 04 	lds	r25, 0x04CB
    4742:	81 e0       	ldi	r24, 0x01	; 1
    4744:	89 27       	eor	r24, r25
    4746:	88 23       	and	r24, r24
    4748:	21 f0       	breq	.+8      	; 0x4752 <ModeLedControl+0x16e>
			LedHubArray[7] = LED_ON;
    474a:	81 e0       	ldi	r24, 0x01	; 1
    474c:	80 93 af 04 	sts	0x04AF, r24
    4750:	02 c0       	rjmp	.+4      	; 0x4756 <ModeLedControl+0x172>
		}
		else{
			LedHubArray[7] = LED_OFF;
    4752:	10 92 af 04 	sts	0x04AF, r1
		}
		if(TIRE_A){
    4756:	80 91 cc 04 	lds	r24, 0x04CC
    475a:	88 23       	and	r24, r24
    475c:	21 f0       	breq	.+8      	; 0x4766 <ModeLedControl+0x182>
			LedHubArray[6] = LED_ON;
    475e:	81 e0       	ldi	r24, 0x01	; 1
    4760:	80 93 ae 04 	sts	0x04AE, r24
    4764:	02 c0       	rjmp	.+4      	; 0x476a <ModeLedControl+0x186>
		}
		else{
			LedHubArray[6] = LED_OFF;
    4766:	10 92 ae 04 	sts	0x04AE, r1
		}
		if(FRONT_TIRE_A){
    476a:	80 91 ce 04 	lds	r24, 0x04CE
    476e:	88 23       	and	r24, r24
    4770:	21 f0       	breq	.+8      	; 0x477a <ModeLedControl+0x196>
			LedHubArray[5] = LED_ON;
    4772:	81 e0       	ldi	r24, 0x01	; 1
    4774:	80 93 ad 04 	sts	0x04AD, r24
    4778:	34 c0       	rjmp	.+104    	; 0x47e2 <ModeLedControl+0x1fe>
		}
		else{
			LedHubArray[5] = LED_OFF;
    477a:	10 92 ad 04 	sts	0x04AD, r1
    477e:	31 c0       	rjmp	.+98     	; 0x47e2 <ModeLedControl+0x1fe>
		}
	}
	else{
		LedHubArray[4] = LED_ON;
    4780:	81 e0       	ldi	r24, 0x01	; 1
    4782:	80 93 ac 04 	sts	0x04AC, r24
		// ZRコマンド
		if(PETIT_LOCK_A0_S){
    4786:	80 91 cd 04 	lds	r24, 0x04CD
    478a:	88 23       	and	r24, r24
    478c:	21 f0       	breq	.+8      	; 0x4796 <ModeLedControl+0x1b2>
			LedHubArray[5] = LED_ON;
    478e:	81 e0       	ldi	r24, 0x01	; 1
    4790:	80 93 ad 04 	sts	0x04AD, r24
    4794:	02 c0       	rjmp	.+4      	; 0x479a <ModeLedControl+0x1b6>
		}
		else{
			LedHubArray[5] = LED_OFF;
    4796:	10 92 ad 04 	sts	0x04AD, r1
		}
		// 平地ロック
		if(LOCK_A0_S && !LOCK_A0_DS){
    479a:	80 91 c8 04 	lds	r24, 0x04C8
    479e:	88 23       	and	r24, r24
    47a0:	61 f0       	breq	.+24     	; 0x47ba <ModeLedControl+0x1d6>
    47a2:	90 91 c9 04 	lds	r25, 0x04C9
    47a6:	81 e0       	ldi	r24, 0x01	; 1
    47a8:	89 27       	eor	r24, r25
    47aa:	88 23       	and	r24, r24
    47ac:	31 f0       	breq	.+12     	; 0x47ba <ModeLedControl+0x1d6>
			LedHubArray[6] = LED_ON;
    47ae:	81 e0       	ldi	r24, 0x01	; 1
    47b0:	80 93 ae 04 	sts	0x04AE, r24
			LedHubArray[7] = LED_OFF;
    47b4:	10 92 af 04 	sts	0x04AF, r1
    47b8:	14 c0       	rjmp	.+40     	; 0x47e2 <ModeLedControl+0x1fe>
		}
		else if(!LOCK_A0_S && LOCK_A0_DS){
    47ba:	90 91 c8 04 	lds	r25, 0x04C8
    47be:	81 e0       	ldi	r24, 0x01	; 1
    47c0:	89 27       	eor	r24, r25
    47c2:	88 23       	and	r24, r24
    47c4:	51 f0       	breq	.+20     	; 0x47da <ModeLedControl+0x1f6>
    47c6:	80 91 c9 04 	lds	r24, 0x04C9
    47ca:	88 23       	and	r24, r24
    47cc:	31 f0       	breq	.+12     	; 0x47da <ModeLedControl+0x1f6>
		// 傾斜ロック
			LedHubArray[6] = LED_OFF;
    47ce:	10 92 ae 04 	sts	0x04AE, r1
			LedHubArray[7] = LED_ON;
    47d2:	81 e0       	ldi	r24, 0x01	; 1
    47d4:	80 93 af 04 	sts	0x04AF, r24
    47d8:	04 c0       	rjmp	.+8      	; 0x47e2 <ModeLedControl+0x1fe>
		}
		else{
			LedHubArray[6] = LED_OFF;
    47da:	10 92 ae 04 	sts	0x04AE, r1
			LedHubArray[7] = LED_OFF;
    47de:	10 92 af 04 	sts	0x04AF, r1
		}
	}
}	
    47e2:	cf 91       	pop	r28
    47e4:	df 91       	pop	r29
    47e6:	08 95       	ret

000047e8 <SafetySetup>:
bool buzzerStopFlag;
bool buzzerPatternStatus;
uint16_t buzzerCount;
#endif

void SafetySetup() {
    47e8:	df 93       	push	r29
    47ea:	cf 93       	push	r28
    47ec:	cd b7       	in	r28, 0x3d	; 61
    47ee:	de b7       	in	r29, 0x3e	; 62
	#if defined(USE_TIMER0)
		SafetyInitialize[0] = SafetyInitialize0;
    47f0:	83 ee       	ldi	r24, 0xE3	; 227
    47f2:	94 e2       	ldi	r25, 0x24	; 36
    47f4:	90 93 58 05 	sts	0x0558, r25
    47f8:	80 93 57 05 	sts	0x0557, r24
	#endif
	#if defined(USE_TIMER1)
		SafetyInitialize[1] = SafetyInitialize1;
    47fc:	8b e1       	ldi	r24, 0x1B	; 27
    47fe:	95 e2       	ldi	r25, 0x25	; 37
    4800:	90 93 5a 05 	sts	0x055A, r25
    4804:	80 93 59 05 	sts	0x0559, r24
	#endif
	#if defined(USE_TIMER2)
		SafetyInitialize[2] = SafetyInitialize2;
    4808:	83 e5       	ldi	r24, 0x53	; 83
    480a:	95 e2       	ldi	r25, 0x25	; 37
    480c:	90 93 5c 05 	sts	0x055C, r25
    4810:	80 93 5b 05 	sts	0x055B, r24
	#endif
	#if defined(USE_TIMER3)
		SafetyInitialize[3] = SafetyInitialize3;
    4814:	8b e8       	ldi	r24, 0x8B	; 139
    4816:	95 e2       	ldi	r25, 0x25	; 37
    4818:	90 93 5e 05 	sts	0x055E, r25
    481c:	80 93 5d 05 	sts	0x055D, r24
		SafetyInitialize[4] = SafetyInitialize4;
	#endif
	#if defined(USE_TIMER5)
		SafetyInitialize[5] = SafetyInitialize5;
	#endif
}
    4820:	cf 91       	pop	r28
    4822:	df 91       	pop	r29
    4824:	08 95       	ret

00004826 <SafetyChecker>:

#if defined(USE_POWER_CHECK)
void SafetyChecker(void) {
    4826:	df 93       	push	r29
    4828:	cf 93       	push	r28
    482a:	cd b7       	in	r28, 0x3d	; 61
    482c:	de b7       	in	r29, 0x3e	; 62
	if( !bit_is_set(*SAFETY_READ_PORT.PIN, SAFETY_READ_BIT)) {
    482e:	80 91 ad 05 	lds	r24, 0x05AD
    4832:	90 91 ae 05 	lds	r25, 0x05AE
    4836:	fc 01       	movw	r30, r24
    4838:	80 81       	ld	r24, Z
    483a:	88 2f       	mov	r24, r24
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	81 70       	andi	r24, 0x01	; 1
    4840:	90 70       	andi	r25, 0x00	; 0
    4842:	00 97       	sbiw	r24, 0x00	; 0
    4844:	31 f4       	brne	.+12     	; 0x4852 <SafetyChecker+0x2c>
		powerLost = false;
    4846:	10 92 54 05 	sts	0x0554, r1
		#if defined(USE_LED)
			LedArray[SAFETY_LED_NO] = LED_ON;
    484a:	81 e0       	ldi	r24, 0x01	; 1
    484c:	80 93 3e 05 	sts	0x053E, r24
    4850:	05 c0       	rjmp	.+10     	; 0x485c <SafetyChecker+0x36>
		#endif
	}
	else {
		powerLost = true;
    4852:	81 e0       	ldi	r24, 0x01	; 1
    4854:	80 93 54 05 	sts	0x0554, r24
		#if defined(USE_LED)
			LedArray[SAFETY_LED_NO] = LED_OFF;
    4858:	10 92 3e 05 	sts	0x053E, r1
		#endif
	}
	
	#if defined(USE_BUZZER)
		if(powerLost && CtrlLost) {
    485c:	80 91 54 05 	lds	r24, 0x0554
    4860:	88 23       	and	r24, r24
    4862:	49 f1       	breq	.+82     	; 0x48b6 <SafetyChecker+0x90>
    4864:	80 91 a7 04 	lds	r24, 0x04A7
    4868:	88 23       	and	r24, r24
    486a:	29 f1       	breq	.+74     	; 0x48b6 <SafetyChecker+0x90>
			buzzerStopFlag = true;
    486c:	81 e0       	ldi	r24, 0x01	; 1
    486e:	80 93 64 05 	sts	0x0564, r24
			if(buzzerCount == 0) {
    4872:	80 91 55 05 	lds	r24, 0x0555
    4876:	90 91 56 05 	lds	r25, 0x0556
    487a:	00 97       	sbiw	r24, 0x00	; 0
    487c:	71 f4       	brne	.+28     	; 0x489a <SafetyChecker+0x74>
				buzzerCount = 15;
    487e:	8f e0       	ldi	r24, 0x0F	; 15
    4880:	90 e0       	ldi	r25, 0x00	; 0
    4882:	90 93 56 05 	sts	0x0556, r25
    4886:	80 93 55 05 	sts	0x0555, r24
				buzzerStatus = !buzzerStatus;
    488a:	90 91 63 05 	lds	r25, 0x0563
    488e:	81 e0       	ldi	r24, 0x01	; 1
    4890:	89 27       	eor	r24, r25
    4892:	88 2f       	mov	r24, r24
    4894:	90 e0       	ldi	r25, 0x00	; 0
    4896:	80 93 63 05 	sts	0x0563, r24
			}
			BuzzerStatus = buzzerStatus;
    489a:	80 91 63 05 	lds	r24, 0x0563
    489e:	80 93 28 05 	sts	0x0528, r24
			buzzerCount--;
    48a2:	80 91 55 05 	lds	r24, 0x0555
    48a6:	90 91 56 05 	lds	r25, 0x0556
    48aa:	01 97       	sbiw	r24, 0x01	; 1
    48ac:	90 93 56 05 	sts	0x0556, r25
    48b0:	80 93 55 05 	sts	0x0555, r24
    48b4:	85 c0       	rjmp	.+266    	; 0x49c0 <SafetyChecker+0x19a>
		}
		else if(!powerLost && CtrlLost) {
    48b6:	90 91 54 05 	lds	r25, 0x0554
    48ba:	81 e0       	ldi	r24, 0x01	; 1
    48bc:	89 27       	eor	r24, r25
    48be:	88 23       	and	r24, r24
    48c0:	49 f1       	breq	.+82     	; 0x4914 <SafetyChecker+0xee>
    48c2:	80 91 a7 04 	lds	r24, 0x04A7
    48c6:	88 23       	and	r24, r24
    48c8:	29 f1       	breq	.+74     	; 0x4914 <SafetyChecker+0xee>
			buzzerStopFlag = true;
    48ca:	81 e0       	ldi	r24, 0x01	; 1
    48cc:	80 93 64 05 	sts	0x0564, r24
			if(buzzerCount == 0) {
    48d0:	80 91 55 05 	lds	r24, 0x0555
    48d4:	90 91 56 05 	lds	r25, 0x0556
    48d8:	00 97       	sbiw	r24, 0x00	; 0
    48da:	71 f4       	brne	.+28     	; 0x48f8 <SafetyChecker+0xd2>
				buzzerCount = 3;
    48dc:	83 e0       	ldi	r24, 0x03	; 3
    48de:	90 e0       	ldi	r25, 0x00	; 0
    48e0:	90 93 56 05 	sts	0x0556, r25
    48e4:	80 93 55 05 	sts	0x0555, r24
				buzzerStatus = !buzzerStatus;
    48e8:	90 91 63 05 	lds	r25, 0x0563
    48ec:	81 e0       	ldi	r24, 0x01	; 1
    48ee:	89 27       	eor	r24, r25
    48f0:	88 2f       	mov	r24, r24
    48f2:	90 e0       	ldi	r25, 0x00	; 0
    48f4:	80 93 63 05 	sts	0x0563, r24
			}
			BuzzerStatus = buzzerStatus;
    48f8:	80 91 63 05 	lds	r24, 0x0563
    48fc:	80 93 28 05 	sts	0x0528, r24
			buzzerCount--;
    4900:	80 91 55 05 	lds	r24, 0x0555
    4904:	90 91 56 05 	lds	r25, 0x0556
    4908:	01 97       	sbiw	r24, 0x01	; 1
    490a:	90 93 56 05 	sts	0x0556, r25
    490e:	80 93 55 05 	sts	0x0555, r24
    4912:	56 c0       	rjmp	.+172    	; 0x49c0 <SafetyChecker+0x19a>
		}
		else if(powerLost && !CtrlLost) {
    4914:	80 91 54 05 	lds	r24, 0x0554
    4918:	88 23       	and	r24, r24
    491a:	09 f4       	brne	.+2      	; 0x491e <SafetyChecker+0xf8>
    491c:	45 c0       	rjmp	.+138    	; 0x49a8 <SafetyChecker+0x182>
    491e:	90 91 a7 04 	lds	r25, 0x04A7
    4922:	81 e0       	ldi	r24, 0x01	; 1
    4924:	89 27       	eor	r24, r25
    4926:	88 23       	and	r24, r24
    4928:	09 f4       	brne	.+2      	; 0x492c <SafetyChecker+0x106>
    492a:	3e c0       	rjmp	.+124    	; 0x49a8 <SafetyChecker+0x182>
			buzzerStopFlag = true;
    492c:	81 e0       	ldi	r24, 0x01	; 1
    492e:	80 93 64 05 	sts	0x0564, r24
			if(buzzerCount == 0) {
    4932:	80 91 55 05 	lds	r24, 0x0555
    4936:	90 91 56 05 	lds	r25, 0x0556
    493a:	00 97       	sbiw	r24, 0x00	; 0
    493c:	39 f5       	brne	.+78     	; 0x498c <SafetyChecker+0x166>
				if(buzzerPatternStatus){
    493e:	80 91 53 05 	lds	r24, 0x0553
    4942:	88 23       	and	r24, r24
    4944:	39 f0       	breq	.+14     	; 0x4954 <SafetyChecker+0x12e>
					buzzerCount = 15;
    4946:	8f e0       	ldi	r24, 0x0F	; 15
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	90 93 56 05 	sts	0x0556, r25
    494e:	80 93 55 05 	sts	0x0555, r24
    4952:	06 c0       	rjmp	.+12     	; 0x4960 <SafetyChecker+0x13a>
				}else{
					buzzerCount = 5;
    4954:	85 e0       	ldi	r24, 0x05	; 5
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	90 93 56 05 	sts	0x0556, r25
    495c:	80 93 55 05 	sts	0x0555, r24
				}
				buzzerStatus = !buzzerStatus;
    4960:	90 91 63 05 	lds	r25, 0x0563
    4964:	81 e0       	ldi	r24, 0x01	; 1
    4966:	89 27       	eor	r24, r25
    4968:	88 2f       	mov	r24, r24
    496a:	90 e0       	ldi	r25, 0x00	; 0
    496c:	80 93 63 05 	sts	0x0563, r24
				if(!buzzerStatus){
    4970:	90 91 63 05 	lds	r25, 0x0563
    4974:	81 e0       	ldi	r24, 0x01	; 1
    4976:	89 27       	eor	r24, r25
    4978:	88 23       	and	r24, r24
    497a:	41 f0       	breq	.+16     	; 0x498c <SafetyChecker+0x166>
					buzzerPatternStatus = !buzzerPatternStatus;
    497c:	90 91 53 05 	lds	r25, 0x0553
    4980:	81 e0       	ldi	r24, 0x01	; 1
    4982:	89 27       	eor	r24, r25
    4984:	88 2f       	mov	r24, r24
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	80 93 53 05 	sts	0x0553, r24
				}
			}
			BuzzerStatus = buzzerStatus;
    498c:	80 91 63 05 	lds	r24, 0x0563
    4990:	80 93 28 05 	sts	0x0528, r24
			buzzerCount--;
    4994:	80 91 55 05 	lds	r24, 0x0555
    4998:	90 91 56 05 	lds	r25, 0x0556
    499c:	01 97       	sbiw	r24, 0x01	; 1
    499e:	90 93 56 05 	sts	0x0556, r25
    49a2:	80 93 55 05 	sts	0x0555, r24
    49a6:	0c c0       	rjmp	.+24     	; 0x49c0 <SafetyChecker+0x19a>
		}
		else {
			if(buzzerStopFlag) {
    49a8:	80 91 64 05 	lds	r24, 0x0564
    49ac:	88 23       	and	r24, r24
    49ae:	41 f0       	breq	.+16     	; 0x49c0 <SafetyChecker+0x19a>
				BuzzerStatus = BUZZER_OFF;
    49b0:	10 92 28 05 	sts	0x0528, r1
				buzzerStopFlag = false;
    49b4:	10 92 64 05 	sts	0x0564, r1
				buzzerCount = 0;
    49b8:	10 92 56 05 	sts	0x0556, r1
    49bc:	10 92 55 05 	sts	0x0555, r1
			}
		}
	#endif
}
    49c0:	cf 91       	pop	r28
    49c2:	df 91       	pop	r29
    49c4:	08 95       	ret

000049c6 <SafetyInitialize0>:
#endif

#if defined(USE_TIMER0)
static void SafetyInitialize0(void) {
    49c6:	df 93       	push	r29
    49c8:	cf 93       	push	r28
    49ca:	cd b7       	in	r28, 0x3d	; 61
    49cc:	de b7       	in	r29, 0x3e	; 62
	sbi(*TIMER.T0.TCIMSK, TOIE0_BIT);
    49ce:	80 91 6f 05 	lds	r24, 0x056F
    49d2:	90 91 70 05 	lds	r25, 0x0570
    49d6:	20 91 6f 05 	lds	r18, 0x056F
    49da:	30 91 70 05 	lds	r19, 0x0570
    49de:	f9 01       	movw	r30, r18
    49e0:	20 81       	ld	r18, Z
    49e2:	21 60       	ori	r18, 0x01	; 1
    49e4:	fc 01       	movw	r30, r24
    49e6:	20 83       	st	Z, r18
	
	#if defined(USE_POWER_CHECK)
		cbi(*SAFETY_READ_PORT.DDR, SAFETY_READ_BIT);
    49e8:	80 91 a9 05 	lds	r24, 0x05A9
    49ec:	90 91 aa 05 	lds	r25, 0x05AA
    49f0:	20 91 a9 05 	lds	r18, 0x05A9
    49f4:	30 91 aa 05 	lds	r19, 0x05AA
    49f8:	f9 01       	movw	r30, r18
    49fa:	20 81       	ld	r18, Z
    49fc:	2e 7f       	andi	r18, 0xFE	; 254
    49fe:	fc 01       	movw	r30, r24
    4a00:	20 83       	st	Z, r18
		sbi(*SAFETY_READ_PORT.PORT, SAFETY_READ_BIT);
    4a02:	80 91 ab 05 	lds	r24, 0x05AB
    4a06:	90 91 ac 05 	lds	r25, 0x05AC
    4a0a:	20 91 ab 05 	lds	r18, 0x05AB
    4a0e:	30 91 ac 05 	lds	r19, 0x05AC
    4a12:	f9 01       	movw	r30, r18
    4a14:	20 81       	ld	r18, Z
    4a16:	21 60       	ori	r18, 0x01	; 1
    4a18:	fc 01       	movw	r30, r24
    4a1a:	20 83       	st	Z, r18
	#endif
	
	#if defined(USE_POWER_CHECK)
		powerLost = false;
    4a1c:	10 92 54 05 	sts	0x0554, r1
	#endif
	#if defined(USE_BUZZER)
		buzzerStatus = false;
    4a20:	10 92 63 05 	sts	0x0563, r1
		buzzerCount = 0;
    4a24:	10 92 56 05 	sts	0x0556, r1
    4a28:	10 92 55 05 	sts	0x0555, r1
		buzzerPatternStatus = false;
    4a2c:	10 92 53 05 	sts	0x0553, r1
	#endif
}
    4a30:	cf 91       	pop	r28
    4a32:	df 91       	pop	r29
    4a34:	08 95       	ret

00004a36 <SafetyInitialize1>:
#endif

#if defined(USE_TIMER1)
static void SafetyInitialize1(void) {
    4a36:	df 93       	push	r29
    4a38:	cf 93       	push	r28
    4a3a:	cd b7       	in	r28, 0x3d	; 61
    4a3c:	de b7       	in	r29, 0x3e	; 62
	sbi(*TIMER.T1.TCIMSK, TOIE1_BIT);
    4a3e:	80 91 83 05 	lds	r24, 0x0583
    4a42:	90 91 84 05 	lds	r25, 0x0584
    4a46:	20 91 83 05 	lds	r18, 0x0583
    4a4a:	30 91 84 05 	lds	r19, 0x0584
    4a4e:	f9 01       	movw	r30, r18
    4a50:	20 81       	ld	r18, Z
    4a52:	24 60       	ori	r18, 0x04	; 4
    4a54:	fc 01       	movw	r30, r24
    4a56:	20 83       	st	Z, r18
	
	#if defined(USE_POWER_CHECK)
		cbi(*SAFETY_READ_PORT.DDR, SAFETY_READ_BIT);
    4a58:	80 91 a9 05 	lds	r24, 0x05A9
    4a5c:	90 91 aa 05 	lds	r25, 0x05AA
    4a60:	20 91 a9 05 	lds	r18, 0x05A9
    4a64:	30 91 aa 05 	lds	r19, 0x05AA
    4a68:	f9 01       	movw	r30, r18
    4a6a:	20 81       	ld	r18, Z
    4a6c:	2e 7f       	andi	r18, 0xFE	; 254
    4a6e:	fc 01       	movw	r30, r24
    4a70:	20 83       	st	Z, r18
		sbi(*SAFETY_READ_PORT.PORT, SAFETY_READ_BIT);
    4a72:	80 91 ab 05 	lds	r24, 0x05AB
    4a76:	90 91 ac 05 	lds	r25, 0x05AC
    4a7a:	20 91 ab 05 	lds	r18, 0x05AB
    4a7e:	30 91 ac 05 	lds	r19, 0x05AC
    4a82:	f9 01       	movw	r30, r18
    4a84:	20 81       	ld	r18, Z
    4a86:	21 60       	ori	r18, 0x01	; 1
    4a88:	fc 01       	movw	r30, r24
    4a8a:	20 83       	st	Z, r18
	#endif
	
	#if defined(USE_POWER_CHECK)
		powerLost = false;
    4a8c:	10 92 54 05 	sts	0x0554, r1
	#endif
	#if defined(USE_BUZZER)
		buzzerStatus = false;
    4a90:	10 92 63 05 	sts	0x0563, r1
		buzzerCount = 0;
    4a94:	10 92 56 05 	sts	0x0556, r1
    4a98:	10 92 55 05 	sts	0x0555, r1
		buzzerPatternStatus = false;
    4a9c:	10 92 53 05 	sts	0x0553, r1
	#endif
}
    4aa0:	cf 91       	pop	r28
    4aa2:	df 91       	pop	r29
    4aa4:	08 95       	ret

00004aa6 <SafetyInitialize2>:
#endif

#if defined(USE_TIMER2)
static void SafetyInitialize2(void) {
    4aa6:	df 93       	push	r29
    4aa8:	cf 93       	push	r28
    4aaa:	cd b7       	in	r28, 0x3d	; 61
    4aac:	de b7       	in	r29, 0x3e	; 62
	sbi(*TIMER.T2.TCIMSK, TOIE2_BIT);
    4aae:	80 91 91 05 	lds	r24, 0x0591
    4ab2:	90 91 92 05 	lds	r25, 0x0592
    4ab6:	20 91 91 05 	lds	r18, 0x0591
    4aba:	30 91 92 05 	lds	r19, 0x0592
    4abe:	f9 01       	movw	r30, r18
    4ac0:	20 81       	ld	r18, Z
    4ac2:	20 64       	ori	r18, 0x40	; 64
    4ac4:	fc 01       	movw	r30, r24
    4ac6:	20 83       	st	Z, r18
	
	#if defined(USE_POWER_CHECK)
		cbi(*SAFETY_READ_PORT.DDR, SAFETY_READ_BIT);
    4ac8:	80 91 a9 05 	lds	r24, 0x05A9
    4acc:	90 91 aa 05 	lds	r25, 0x05AA
    4ad0:	20 91 a9 05 	lds	r18, 0x05A9
    4ad4:	30 91 aa 05 	lds	r19, 0x05AA
    4ad8:	f9 01       	movw	r30, r18
    4ada:	20 81       	ld	r18, Z
    4adc:	2e 7f       	andi	r18, 0xFE	; 254
    4ade:	fc 01       	movw	r30, r24
    4ae0:	20 83       	st	Z, r18
		sbi(*SAFETY_READ_PORT.PORT, SAFETY_READ_BIT);
    4ae2:	80 91 ab 05 	lds	r24, 0x05AB
    4ae6:	90 91 ac 05 	lds	r25, 0x05AC
    4aea:	20 91 ab 05 	lds	r18, 0x05AB
    4aee:	30 91 ac 05 	lds	r19, 0x05AC
    4af2:	f9 01       	movw	r30, r18
    4af4:	20 81       	ld	r18, Z
    4af6:	21 60       	ori	r18, 0x01	; 1
    4af8:	fc 01       	movw	r30, r24
    4afa:	20 83       	st	Z, r18
	#endif
	
	#if defined(USE_POWER_CHECK)
		powerLost = false;
    4afc:	10 92 54 05 	sts	0x0554, r1
	#endif
	#if defined(USE_BUZZER)
		buzzerStatus = false;
    4b00:	10 92 63 05 	sts	0x0563, r1
		buzzerCount = 0;
    4b04:	10 92 56 05 	sts	0x0556, r1
    4b08:	10 92 55 05 	sts	0x0555, r1
		buzzerPatternStatus = false;
    4b0c:	10 92 53 05 	sts	0x0553, r1
	#endif
}
    4b10:	cf 91       	pop	r28
    4b12:	df 91       	pop	r29
    4b14:	08 95       	ret

00004b16 <SafetyInitialize3>:
#endif

#if defined(USE_TIMER3)
static void SafetyInitialize3(void) {
    4b16:	df 93       	push	r29
    4b18:	cf 93       	push	r28
    4b1a:	cd b7       	in	r28, 0x3d	; 61
    4b1c:	de b7       	in	r29, 0x3e	; 62
	sbi(*TIMER.T3.TCIMSK, TOIE3_BIT);
    4b1e:	80 91 a5 05 	lds	r24, 0x05A5
    4b22:	90 91 a6 05 	lds	r25, 0x05A6
    4b26:	20 91 a5 05 	lds	r18, 0x05A5
    4b2a:	30 91 a6 05 	lds	r19, 0x05A6
    4b2e:	f9 01       	movw	r30, r18
    4b30:	20 81       	ld	r18, Z
    4b32:	24 60       	ori	r18, 0x04	; 4
    4b34:	fc 01       	movw	r30, r24
    4b36:	20 83       	st	Z, r18
	
	#if defined(USE_POWER_CHECK)
		cbi(*SAFETY_READ_PORT.DDR, SAFETY_READ_BIT);
    4b38:	80 91 a9 05 	lds	r24, 0x05A9
    4b3c:	90 91 aa 05 	lds	r25, 0x05AA
    4b40:	20 91 a9 05 	lds	r18, 0x05A9
    4b44:	30 91 aa 05 	lds	r19, 0x05AA
    4b48:	f9 01       	movw	r30, r18
    4b4a:	20 81       	ld	r18, Z
    4b4c:	2e 7f       	andi	r18, 0xFE	; 254
    4b4e:	fc 01       	movw	r30, r24
    4b50:	20 83       	st	Z, r18
		sbi(*SAFETY_READ_PORT.PORT, SAFETY_READ_BIT);
    4b52:	80 91 ab 05 	lds	r24, 0x05AB
    4b56:	90 91 ac 05 	lds	r25, 0x05AC
    4b5a:	20 91 ab 05 	lds	r18, 0x05AB
    4b5e:	30 91 ac 05 	lds	r19, 0x05AC
    4b62:	f9 01       	movw	r30, r18
    4b64:	20 81       	ld	r18, Z
    4b66:	21 60       	ori	r18, 0x01	; 1
    4b68:	fc 01       	movw	r30, r24
    4b6a:	20 83       	st	Z, r18
	#endif
	
	#if defined(USE_POWER_CHECK)
		powerLost = false;
    4b6c:	10 92 54 05 	sts	0x0554, r1
	#endif
	#if defined(USE_BUZZER)
		buzzerStatus = false;
    4b70:	10 92 63 05 	sts	0x0563, r1
		buzzerCount = 0;
    4b74:	10 92 56 05 	sts	0x0556, r1
    4b78:	10 92 55 05 	sts	0x0555, r1
		buzzerPatternStatus = false;
    4b7c:	10 92 53 05 	sts	0x0553, r1
	#endif
}
    4b80:	cf 91       	pop	r28
    4b82:	df 91       	pop	r29
    4b84:	08 95       	ret

00004b86 <SystemSetup>:
#if defined(USE_PCINT)
	struct st_pcint PCINT;
#endif


void SystemSetup(void) {
    4b86:	df 93       	push	r29
    4b88:	cf 93       	push	r28
    4b8a:	cd b7       	in	r28, 0x3d	; 61
    4b8c:	de b7       	in	r29, 0x3e	; 62
	IORegSetup();			// Setup.c
    4b8e:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <IORegSetup>
	#if defined(USE_TIMER)
		TimerRegSetup();	// Setup.c
    4b92:	0e 94 65 26 	call	0x4cca	; 0x4cca <TimerRegSetup>
		TimerSetup();		// Setup.c
    4b96:	0e 94 38 27 	call	0x4e70	; 0x4e70 <TimerSetup>
	#endif
	#if (defined(USE_UART) || defined(USE_MU))
		UartRegSetup();		// Setup.c
    4b9a:	0e 94 77 28 	call	0x50ee	; 0x50ee <UartRegSetup>
		UartSetup();		// Uart.c
    4b9e:	0e 94 bf 09 	call	0x137e	; 0x137e <UartSetup>
	#endif
	#if defined(USE_EXINT)
		ExintRegSetup();	// Setup.c
    4ba2:	0e 94 c6 28 	call	0x518c	; 0x518c <ExintRegSetup>
	#if defined(USE_PCINT)
		PcintRegSetup();	// Setup.c
	#endif
	
	#if defined(USE_EXINT)
		ExintSetup();
    4ba6:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <ExintSetup>
	#endif
	#if defined(USE_PCINT)
		PcintSetup();
	#endif
	#if defined(USE_ENCODER)
		EncoderSetup();		// Encoder.c
    4baa:	0e 94 2f 0b 	call	0x165e	; 0x165e <EncoderSetup>
	#endif
	#if defined(USE_MU)
		MuSetup();			// Mu.c
    4bae:	0e 94 65 00 	call	0xca	; 0xca <MuSetup>
	#endif
	
	#if defined(USE_MOTOR)
		MotorSetup();		// Motor.c
    4bb2:	0e 94 b2 14 	call	0x2964	; 0x2964 <MotorSetup>
	#if defined(USE_SERVO)
		ServoSetup();		// Servo.c
	#endif
	
	#if defined(USE_SAFETY)
		SafetySetup();		// Safety.c
    4bb6:	0e 94 f4 23 	call	0x47e8	; 0x47e8 <SafetySetup>
	#endif
}
    4bba:	cf 91       	pop	r28
    4bbc:	df 91       	pop	r29
    4bbe:	08 95       	ret

00004bc0 <IORegSetup>:

static void IORegSetup(void) {
    4bc0:	df 93       	push	r29
    4bc2:	cf 93       	push	r28
    4bc4:	cd b7       	in	r28, 0x3d	; 61
    4bc6:	de b7       	in	r29, 0x3e	; 62
	#ifdef DDRA
		IO.PA.DDR =		(uint8_t*)&DDRA_REG;
    4bc8:	8a e3       	ldi	r24, 0x3A	; 58
    4bca:	90 e0       	ldi	r25, 0x00	; 0
    4bcc:	90 93 aa 05 	sts	0x05AA, r25
    4bd0:	80 93 a9 05 	sts	0x05A9, r24
		IO.PA.PORT =	(uint8_t*)&PORTA_REG;
    4bd4:	8b e3       	ldi	r24, 0x3B	; 59
    4bd6:	90 e0       	ldi	r25, 0x00	; 0
    4bd8:	90 93 ac 05 	sts	0x05AC, r25
    4bdc:	80 93 ab 05 	sts	0x05AB, r24
		IO.PA.PIN =		(uint8_t*)&PINA_REG;
    4be0:	89 e3       	ldi	r24, 0x39	; 57
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	90 93 ae 05 	sts	0x05AE, r25
    4be8:	80 93 ad 05 	sts	0x05AD, r24
	#endif
	#ifdef DDRB
		IO.PB.DDR =		(uint8_t*)&DDRB_REG;
    4bec:	87 e3       	ldi	r24, 0x37	; 55
    4bee:	90 e0       	ldi	r25, 0x00	; 0
    4bf0:	90 93 b0 05 	sts	0x05B0, r25
    4bf4:	80 93 af 05 	sts	0x05AF, r24
		IO.PB.PORT =	(uint8_t*)&PORTB_REG;
    4bf8:	88 e3       	ldi	r24, 0x38	; 56
    4bfa:	90 e0       	ldi	r25, 0x00	; 0
    4bfc:	90 93 b2 05 	sts	0x05B2, r25
    4c00:	80 93 b1 05 	sts	0x05B1, r24
		IO.PB.PIN =		(uint8_t*)&PINB_REG;
    4c04:	86 e3       	ldi	r24, 0x36	; 54
    4c06:	90 e0       	ldi	r25, 0x00	; 0
    4c08:	90 93 b4 05 	sts	0x05B4, r25
    4c0c:	80 93 b3 05 	sts	0x05B3, r24
	#endif
	#ifdef DDRC
		IO.PC.DDR =		(uint8_t*)&DDRC_REG;
    4c10:	84 e3       	ldi	r24, 0x34	; 52
    4c12:	90 e0       	ldi	r25, 0x00	; 0
    4c14:	90 93 b6 05 	sts	0x05B6, r25
    4c18:	80 93 b5 05 	sts	0x05B5, r24
		IO.PC.PORT =	(uint8_t*)&PORTC_REG;
    4c1c:	85 e3       	ldi	r24, 0x35	; 53
    4c1e:	90 e0       	ldi	r25, 0x00	; 0
    4c20:	90 93 b8 05 	sts	0x05B8, r25
    4c24:	80 93 b7 05 	sts	0x05B7, r24
		IO.PC.PIN =		(uint8_t*)&PINC_REG;
    4c28:	83 e3       	ldi	r24, 0x33	; 51
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	90 93 ba 05 	sts	0x05BA, r25
    4c30:	80 93 b9 05 	sts	0x05B9, r24
	#endif
	#ifdef DDRD
		IO.PD.DDR =		(uint8_t*)&DDRD_REG;
    4c34:	81 e3       	ldi	r24, 0x31	; 49
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	90 93 bc 05 	sts	0x05BC, r25
    4c3c:	80 93 bb 05 	sts	0x05BB, r24
		IO.PD.PORT =	(uint8_t*)&PORTD_REG;
    4c40:	82 e3       	ldi	r24, 0x32	; 50
    4c42:	90 e0       	ldi	r25, 0x00	; 0
    4c44:	90 93 be 05 	sts	0x05BE, r25
    4c48:	80 93 bd 05 	sts	0x05BD, r24
		IO.PD.PIN =		(uint8_t*)&PIND_REG;
    4c4c:	80 e3       	ldi	r24, 0x30	; 48
    4c4e:	90 e0       	ldi	r25, 0x00	; 0
    4c50:	90 93 c0 05 	sts	0x05C0, r25
    4c54:	80 93 bf 05 	sts	0x05BF, r24
	#endif
	#ifdef DDRE
		IO.PE.DDR =		(uint8_t*)&DDRE_REG;
    4c58:	82 e2       	ldi	r24, 0x22	; 34
    4c5a:	90 e0       	ldi	r25, 0x00	; 0
    4c5c:	90 93 c2 05 	sts	0x05C2, r25
    4c60:	80 93 c1 05 	sts	0x05C1, r24
		IO.PE.PORT =	(uint8_t*)&PORTE_REG;
    4c64:	83 e2       	ldi	r24, 0x23	; 35
    4c66:	90 e0       	ldi	r25, 0x00	; 0
    4c68:	90 93 c4 05 	sts	0x05C4, r25
    4c6c:	80 93 c3 05 	sts	0x05C3, r24
		IO.PE.PIN =		(uint8_t*)&PINE_REG;
    4c70:	81 e2       	ldi	r24, 0x21	; 33
    4c72:	90 e0       	ldi	r25, 0x00	; 0
    4c74:	90 93 c6 05 	sts	0x05C6, r25
    4c78:	80 93 c5 05 	sts	0x05C5, r24
	#endif
	#ifdef DDRF
		IO.PF.DDR =		(uint8_t*)&DDRF_REG;
    4c7c:	81 e6       	ldi	r24, 0x61	; 97
    4c7e:	90 e0       	ldi	r25, 0x00	; 0
    4c80:	90 93 c8 05 	sts	0x05C8, r25
    4c84:	80 93 c7 05 	sts	0x05C7, r24
		IO.PF.PORT =	(uint8_t*)&PORTF_REG;
    4c88:	82 e6       	ldi	r24, 0x62	; 98
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	90 93 ca 05 	sts	0x05CA, r25
    4c90:	80 93 c9 05 	sts	0x05C9, r24
		IO.PF.PIN =		(uint8_t*)&PINF_REG;
    4c94:	80 e2       	ldi	r24, 0x20	; 32
    4c96:	90 e0       	ldi	r25, 0x00	; 0
    4c98:	90 93 cc 05 	sts	0x05CC, r25
    4c9c:	80 93 cb 05 	sts	0x05CB, r24
	#endif
	#ifdef DDRG
		IO.PG.DDR =		(uint8_t*)&DDRG_REG;
    4ca0:	84 e6       	ldi	r24, 0x64	; 100
    4ca2:	90 e0       	ldi	r25, 0x00	; 0
    4ca4:	90 93 ce 05 	sts	0x05CE, r25
    4ca8:	80 93 cd 05 	sts	0x05CD, r24
		IO.PG.PORT =	(uint8_t*)&PORTG_REG;
    4cac:	85 e6       	ldi	r24, 0x65	; 101
    4cae:	90 e0       	ldi	r25, 0x00	; 0
    4cb0:	90 93 d0 05 	sts	0x05D0, r25
    4cb4:	80 93 cf 05 	sts	0x05CF, r24
		IO.PG.PIN =		(uint8_t*)&PING_REG;
    4cb8:	83 e6       	ldi	r24, 0x63	; 99
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	90 93 d2 05 	sts	0x05D2, r25
    4cc0:	80 93 d1 05 	sts	0x05D1, r24
	#ifdef DDRL
		IO.PL.DDR =		(uint8_t*)&DDRL_REG;
		IO.PL.PORT =	(uint8_t*)&PORTL_REG;
		IO.PL.PIN =		(uint8_t*)&PINL_REG;
	#endif
}
    4cc4:	cf 91       	pop	r28
    4cc6:	df 91       	pop	r29
    4cc8:	08 95       	ret

00004cca <TimerRegSetup>:

#if defined(USE_TIMER)
static void TimerRegSetup() {
    4cca:	df 93       	push	r29
    4ccc:	cf 93       	push	r28
    4cce:	cd b7       	in	r28, 0x3d	; 61
    4cd0:	de b7       	in	r29, 0x3e	; 62
	#if defined(TCNT0)
		TIMER.T0.TCCRA =	(uint8_t*)&TCCR0_REG;
    4cd2:	83 e5       	ldi	r24, 0x53	; 83
    4cd4:	90 e0       	ldi	r25, 0x00	; 0
    4cd6:	90 93 66 05 	sts	0x0566, r25
    4cda:	80 93 65 05 	sts	0x0565, r24
		TIMER.T0.TCCRB =	(uint8_t*)&TCCR0_REG;
    4cde:	83 e5       	ldi	r24, 0x53	; 83
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
    4ce2:	90 93 68 05 	sts	0x0568, r25
    4ce6:	80 93 67 05 	sts	0x0567, r24
		TIMER.T0.TCNT =		(uint8_t*)&TCNT0_REG;
    4cea:	82 e5       	ldi	r24, 0x52	; 82
    4cec:	90 e0       	ldi	r25, 0x00	; 0
    4cee:	90 93 6a 05 	sts	0x056A, r25
    4cf2:	80 93 69 05 	sts	0x0569, r24
		TIMER.T0.OCRA =		(uint8_t*)&OCR0_REG;
    4cf6:	81 e5       	ldi	r24, 0x51	; 81
    4cf8:	90 e0       	ldi	r25, 0x00	; 0
    4cfa:	90 93 6c 05 	sts	0x056C, r25
    4cfe:	80 93 6b 05 	sts	0x056B, r24
		TIMER.T0.OCRB =		(uint8_t*)&OCR0_REG;
    4d02:	81 e5       	ldi	r24, 0x51	; 81
    4d04:	90 e0       	ldi	r25, 0x00	; 0
    4d06:	90 93 6e 05 	sts	0x056E, r25
    4d0a:	80 93 6d 05 	sts	0x056D, r24
		TIMER.T0.TCIMSK =	(uint8_t*)&TIMSK0_REG;
    4d0e:	87 e5       	ldi	r24, 0x57	; 87
    4d10:	90 e0       	ldi	r25, 0x00	; 0
    4d12:	90 93 70 05 	sts	0x0570, r25
    4d16:	80 93 6f 05 	sts	0x056F, r24
		TIMER.T0.TCIFR =	(uint8_t*)&TIFR0_REG;
    4d1a:	86 e5       	ldi	r24, 0x56	; 86
    4d1c:	90 e0       	ldi	r25, 0x00	; 0
    4d1e:	90 93 72 05 	sts	0x0572, r25
    4d22:	80 93 71 05 	sts	0x0571, r24
	#endif
	#if defined(TCNT1)
		TIMER.T1.TCCRA =	(uint8_t*)&TCCR1A_REG;
    4d26:	8f e4       	ldi	r24, 0x4F	; 79
    4d28:	90 e0       	ldi	r25, 0x00	; 0
    4d2a:	90 93 74 05 	sts	0x0574, r25
    4d2e:	80 93 73 05 	sts	0x0573, r24
		TIMER.T1.TCCRB =	(uint8_t*)&TCCR1B_REG;
    4d32:	8e e4       	ldi	r24, 0x4E	; 78
    4d34:	90 e0       	ldi	r25, 0x00	; 0
    4d36:	90 93 76 05 	sts	0x0576, r25
    4d3a:	80 93 75 05 	sts	0x0575, r24
		TIMER.T1.TCCRC =	(uint8_t*)&TCCR1C_REG;
    4d3e:	8a e7       	ldi	r24, 0x7A	; 122
    4d40:	90 e0       	ldi	r25, 0x00	; 0
    4d42:	90 93 78 05 	sts	0x0578, r25
    4d46:	80 93 77 05 	sts	0x0577, r24
		TIMER.T1.TCNT =		(uint16_t*)&TCNT1_REG;
    4d4a:	8c e4       	ldi	r24, 0x4C	; 76
    4d4c:	90 e0       	ldi	r25, 0x00	; 0
    4d4e:	90 93 7a 05 	sts	0x057A, r25
    4d52:	80 93 79 05 	sts	0x0579, r24
		TIMER.T1.OCRA =		(uint16_t*)&OCR1A_REG;
    4d56:	8a e4       	ldi	r24, 0x4A	; 74
    4d58:	90 e0       	ldi	r25, 0x00	; 0
    4d5a:	90 93 7c 05 	sts	0x057C, r25
    4d5e:	80 93 7b 05 	sts	0x057B, r24
		TIMER.T1.OCRB =		(uint16_t*)&OCR1B_REG;
    4d62:	88 e4       	ldi	r24, 0x48	; 72
    4d64:	90 e0       	ldi	r25, 0x00	; 0
    4d66:	90 93 7e 05 	sts	0x057E, r25
    4d6a:	80 93 7d 05 	sts	0x057D, r24
		TIMER.T1.OCRC =		(uint16_t*)&OCR1C_REG;
    4d6e:	88 e7       	ldi	r24, 0x78	; 120
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	90 93 80 05 	sts	0x0580, r25
    4d76:	80 93 7f 05 	sts	0x057F, r24
		TIMER.T1.ICR =		(uint16_t*)&ICR1_REG;
    4d7a:	86 e4       	ldi	r24, 0x46	; 70
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	90 93 82 05 	sts	0x0582, r25
    4d82:	80 93 81 05 	sts	0x0581, r24
		TIMER.T1.TCIMSK =	(uint8_t*)&TIMSK1_REG;
    4d86:	87 e5       	ldi	r24, 0x57	; 87
    4d88:	90 e0       	ldi	r25, 0x00	; 0
    4d8a:	90 93 84 05 	sts	0x0584, r25
    4d8e:	80 93 83 05 	sts	0x0583, r24
		TIMER.T1.TCIFR =	(uint8_t*)&TIFR1_REG;
    4d92:	86 e5       	ldi	r24, 0x56	; 86
    4d94:	90 e0       	ldi	r25, 0x00	; 0
    4d96:	90 93 86 05 	sts	0x0586, r25
    4d9a:	80 93 85 05 	sts	0x0585, r24
	#endif
	#if defined(TCNT2)
		TIMER.T2.TCCRA =	(uint8_t*)&TCCR2_REG;
    4d9e:	85 e4       	ldi	r24, 0x45	; 69
    4da0:	90 e0       	ldi	r25, 0x00	; 0
    4da2:	90 93 88 05 	sts	0x0588, r25
    4da6:	80 93 87 05 	sts	0x0587, r24
		TIMER.T2.TCCRB =	(uint8_t*)&TCCR2_REG;
    4daa:	85 e4       	ldi	r24, 0x45	; 69
    4dac:	90 e0       	ldi	r25, 0x00	; 0
    4dae:	90 93 8a 05 	sts	0x058A, r25
    4db2:	80 93 89 05 	sts	0x0589, r24
		TIMER.T2.TCNT =		(uint8_t*)&TCNT2_REG;
    4db6:	84 e4       	ldi	r24, 0x44	; 68
    4db8:	90 e0       	ldi	r25, 0x00	; 0
    4dba:	90 93 8c 05 	sts	0x058C, r25
    4dbe:	80 93 8b 05 	sts	0x058B, r24
		TIMER.T2.OCRA =		(uint8_t*)&OCR2_REG;
    4dc2:	83 e4       	ldi	r24, 0x43	; 67
    4dc4:	90 e0       	ldi	r25, 0x00	; 0
    4dc6:	90 93 8e 05 	sts	0x058E, r25
    4dca:	80 93 8d 05 	sts	0x058D, r24
		TIMER.T2.OCRB =		(uint8_t*)&OCR2_REG;
    4dce:	83 e4       	ldi	r24, 0x43	; 67
    4dd0:	90 e0       	ldi	r25, 0x00	; 0
    4dd2:	90 93 90 05 	sts	0x0590, r25
    4dd6:	80 93 8f 05 	sts	0x058F, r24
		TIMER.T2.TCIMSK =	(uint8_t*)&TIMSK2_REG;
    4dda:	87 e5       	ldi	r24, 0x57	; 87
    4ddc:	90 e0       	ldi	r25, 0x00	; 0
    4dde:	90 93 92 05 	sts	0x0592, r25
    4de2:	80 93 91 05 	sts	0x0591, r24
		TIMER.T2.TCIFR =	(uint8_t*)&TIFR2_REG;
    4de6:	86 e5       	ldi	r24, 0x56	; 86
    4de8:	90 e0       	ldi	r25, 0x00	; 0
    4dea:	90 93 94 05 	sts	0x0594, r25
    4dee:	80 93 93 05 	sts	0x0593, r24
	#endif
	#if defined(TCNT3)
		TIMER.T3.TCCRA =	(uint8_t*)&TCCR3A_REG;
    4df2:	8b e8       	ldi	r24, 0x8B	; 139
    4df4:	90 e0       	ldi	r25, 0x00	; 0
    4df6:	90 93 96 05 	sts	0x0596, r25
    4dfa:	80 93 95 05 	sts	0x0595, r24
		TIMER.T3.TCCRB =	(uint8_t*)&TCCR3B_REG;
    4dfe:	8a e8       	ldi	r24, 0x8A	; 138
    4e00:	90 e0       	ldi	r25, 0x00	; 0
    4e02:	90 93 98 05 	sts	0x0598, r25
    4e06:	80 93 97 05 	sts	0x0597, r24
		TIMER.T3.TCCRC =	(uint8_t*)&TCCR3C_REG;
    4e0a:	8c e8       	ldi	r24, 0x8C	; 140
    4e0c:	90 e0       	ldi	r25, 0x00	; 0
    4e0e:	90 93 9a 05 	sts	0x059A, r25
    4e12:	80 93 99 05 	sts	0x0599, r24
		TIMER.T3.TCNT =		(uint16_t*)&TCNT3_REG;
    4e16:	88 e8       	ldi	r24, 0x88	; 136
    4e18:	90 e0       	ldi	r25, 0x00	; 0
    4e1a:	90 93 9c 05 	sts	0x059C, r25
    4e1e:	80 93 9b 05 	sts	0x059B, r24
		TIMER.T3.OCRA =		(uint16_t*)&OCR3A_REG;
    4e22:	86 e8       	ldi	r24, 0x86	; 134
    4e24:	90 e0       	ldi	r25, 0x00	; 0
    4e26:	90 93 9e 05 	sts	0x059E, r25
    4e2a:	80 93 9d 05 	sts	0x059D, r24
		TIMER.T3.OCRB =		(uint16_t*)&OCR3B_REG;
    4e2e:	84 e8       	ldi	r24, 0x84	; 132
    4e30:	90 e0       	ldi	r25, 0x00	; 0
    4e32:	90 93 a0 05 	sts	0x05A0, r25
    4e36:	80 93 9f 05 	sts	0x059F, r24
		TIMER.T3.OCRC =		(uint16_t*)&OCR3C_REG;
    4e3a:	82 e8       	ldi	r24, 0x82	; 130
    4e3c:	90 e0       	ldi	r25, 0x00	; 0
    4e3e:	90 93 a2 05 	sts	0x05A2, r25
    4e42:	80 93 a1 05 	sts	0x05A1, r24
		TIMER.T3.ICR =		(uint16_t*)&ICR3_REG;
    4e46:	80 e8       	ldi	r24, 0x80	; 128
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	90 93 a4 05 	sts	0x05A4, r25
    4e4e:	80 93 a3 05 	sts	0x05A3, r24
		TIMER.T3.TCIMSK =	(uint8_t*)&TIMSK3_REG;
    4e52:	87 e5       	ldi	r24, 0x57	; 87
    4e54:	90 e0       	ldi	r25, 0x00	; 0
    4e56:	90 93 a6 05 	sts	0x05A6, r25
    4e5a:	80 93 a5 05 	sts	0x05A5, r24
		TIMER.T3.TCIFR =	(uint8_t*)&ETIFR3_REG;
    4e5e:	8c e7       	ldi	r24, 0x7C	; 124
    4e60:	90 e0       	ldi	r25, 0x00	; 0
    4e62:	90 93 a8 05 	sts	0x05A8, r25
    4e66:	80 93 a7 05 	sts	0x05A7, r24
		TIMER.T5.OCRC =		(uint16_t*)&OCR5C_REG;
		TIMER.T5.ICR =		(uint16_t*)&ICR5_REG;
		TIMER.T5.TCIMSK =	(uint8_t*)&TIMSK5_REG;
		TIMER.T5.TCIFR =	(uint8_t*)&TIFR5_REG;
	#endif
}
    4e6a:	cf 91       	pop	r28
    4e6c:	df 91       	pop	r29
    4e6e:	08 95       	ret

00004e70 <TimerSetup>:
#endif

#if defined(USE_TIMER)
static void TimerSetup() {
    4e70:	df 93       	push	r29
    4e72:	cf 93       	push	r28
    4e74:	cd b7       	in	r28, 0x3d	; 61
    4e76:	de b7       	in	r29, 0x3e	; 62
	#if defined(USE_TIMER0)
		if(TIMER0_WGM & 0x01)	sbi(*TIMER.T0.TCCRA, WGM00_BIT);
    4e78:	80 91 65 05 	lds	r24, 0x0565
    4e7c:	90 91 66 05 	lds	r25, 0x0566
    4e80:	20 91 65 05 	lds	r18, 0x0565
    4e84:	30 91 66 05 	lds	r19, 0x0566
    4e88:	f9 01       	movw	r30, r18
    4e8a:	20 81       	ld	r18, Z
    4e8c:	20 64       	ori	r18, 0x40	; 64
    4e8e:	fc 01       	movw	r30, r24
    4e90:	20 83       	st	Z, r18
		else					cbi(*TIMER.T0.TCCRA, WGM00_BIT);
		if(TIMER0_WGM & 0x02)	sbi(*TIMER.T0.TCCRA, WGM01_BIT);
    4e92:	80 91 65 05 	lds	r24, 0x0565
    4e96:	90 91 66 05 	lds	r25, 0x0566
    4e9a:	20 91 65 05 	lds	r18, 0x0565
    4e9e:	30 91 66 05 	lds	r19, 0x0566
    4ea2:	f9 01       	movw	r30, r18
    4ea4:	20 81       	ld	r18, Z
    4ea6:	28 60       	ori	r18, 0x08	; 8
    4ea8:	fc 01       	movw	r30, r24
    4eaa:	20 83       	st	Z, r18
		else					cbi(*TIMER.T0.TCCRA, WGM01_BIT);
		//if(TIMER0_WGM & 0x04)	//sbi(*TIMER.T0.TCCRB, WGM02_BIT);
		//else					//cbi(*TIMER.T0.TCCRB, WGM02_BIT);
		if(TIMER0_CS & 0x01)	sbi(*TIMER.T0.TCCRB, CS00_BIT);
		else					cbi(*TIMER.T0.TCCRB, CS00_BIT);
    4eac:	80 91 67 05 	lds	r24, 0x0567
    4eb0:	90 91 68 05 	lds	r25, 0x0568
    4eb4:	20 91 67 05 	lds	r18, 0x0567
    4eb8:	30 91 68 05 	lds	r19, 0x0568
    4ebc:	f9 01       	movw	r30, r18
    4ebe:	20 81       	ld	r18, Z
    4ec0:	2e 7f       	andi	r18, 0xFE	; 254
    4ec2:	fc 01       	movw	r30, r24
    4ec4:	20 83       	st	Z, r18
		if(TIMER0_CS & 0x02)	sbi(*TIMER.T0.TCCRB, CS01_BIT);
		else					cbi(*TIMER.T0.TCCRB, CS01_BIT);
    4ec6:	80 91 67 05 	lds	r24, 0x0567
    4eca:	90 91 68 05 	lds	r25, 0x0568
    4ece:	20 91 67 05 	lds	r18, 0x0567
    4ed2:	30 91 68 05 	lds	r19, 0x0568
    4ed6:	f9 01       	movw	r30, r18
    4ed8:	20 81       	ld	r18, Z
    4eda:	2d 7f       	andi	r18, 0xFD	; 253
    4edc:	fc 01       	movw	r30, r24
    4ede:	20 83       	st	Z, r18
		if(TIMER0_CS & 0x04)	sbi(*TIMER.T0.TCCRB, CS02_BIT);
    4ee0:	80 91 67 05 	lds	r24, 0x0567
    4ee4:	90 91 68 05 	lds	r25, 0x0568
    4ee8:	20 91 67 05 	lds	r18, 0x0567
    4eec:	30 91 68 05 	lds	r19, 0x0568
    4ef0:	f9 01       	movw	r30, r18
    4ef2:	20 81       	ld	r18, Z
    4ef4:	24 60       	ori	r18, 0x04	; 4
    4ef6:	fc 01       	movw	r30, r24
    4ef8:	20 83       	st	Z, r18
		else					cbi(*TIMER.T0.TCCRB, CS02_BIT);
	#endif
	#if defined(USE_TIMER1)
		if(TIMER1_WGM & 0x01)	sbi(*TIMER.T1.TCCRA, WGM10_BIT);
    4efa:	80 91 73 05 	lds	r24, 0x0573
    4efe:	90 91 74 05 	lds	r25, 0x0574
    4f02:	20 91 73 05 	lds	r18, 0x0573
    4f06:	30 91 74 05 	lds	r19, 0x0574
    4f0a:	f9 01       	movw	r30, r18
    4f0c:	20 81       	ld	r18, Z
    4f0e:	21 60       	ori	r18, 0x01	; 1
    4f10:	fc 01       	movw	r30, r24
    4f12:	20 83       	st	Z, r18
		else					cbi(*TIMER.T1.TCCRA, WGM10_BIT);
		if(TIMER1_WGM & 0x02)	sbi(*TIMER.T1.TCCRA, WGM11_BIT);
		else					cbi(*TIMER.T1.TCCRA, WGM11_BIT);
    4f14:	80 91 73 05 	lds	r24, 0x0573
    4f18:	90 91 74 05 	lds	r25, 0x0574
    4f1c:	20 91 73 05 	lds	r18, 0x0573
    4f20:	30 91 74 05 	lds	r19, 0x0574
    4f24:	f9 01       	movw	r30, r18
    4f26:	20 81       	ld	r18, Z
    4f28:	2d 7f       	andi	r18, 0xFD	; 253
    4f2a:	fc 01       	movw	r30, r24
    4f2c:	20 83       	st	Z, r18
		if(TIMER1_WGM & 0x04)	sbi(*TIMER.T1.TCCRB, WGM12_BIT);
    4f2e:	80 91 75 05 	lds	r24, 0x0575
    4f32:	90 91 76 05 	lds	r25, 0x0576
    4f36:	20 91 75 05 	lds	r18, 0x0575
    4f3a:	30 91 76 05 	lds	r19, 0x0576
    4f3e:	f9 01       	movw	r30, r18
    4f40:	20 81       	ld	r18, Z
    4f42:	28 60       	ori	r18, 0x08	; 8
    4f44:	fc 01       	movw	r30, r24
    4f46:	20 83       	st	Z, r18
		else					cbi(*TIMER.T1.TCCRB, WGM12_BIT);
		if(TIMER1_WGM & 0x08)	sbi(*TIMER.T1.TCCRB, WGM13_BIT);
		else					cbi(*TIMER.T1.TCCRB, WGM13_BIT);
    4f48:	80 91 75 05 	lds	r24, 0x0575
    4f4c:	90 91 76 05 	lds	r25, 0x0576
    4f50:	20 91 75 05 	lds	r18, 0x0575
    4f54:	30 91 76 05 	lds	r19, 0x0576
    4f58:	f9 01       	movw	r30, r18
    4f5a:	20 81       	ld	r18, Z
    4f5c:	2f 7e       	andi	r18, 0xEF	; 239
    4f5e:	fc 01       	movw	r30, r24
    4f60:	20 83       	st	Z, r18
		if(TIMER1_CS & 0x01)	sbi(*TIMER.T1.TCCRB, CS10_BIT);
    4f62:	80 91 75 05 	lds	r24, 0x0575
    4f66:	90 91 76 05 	lds	r25, 0x0576
    4f6a:	20 91 75 05 	lds	r18, 0x0575
    4f6e:	30 91 76 05 	lds	r19, 0x0576
    4f72:	f9 01       	movw	r30, r18
    4f74:	20 81       	ld	r18, Z
    4f76:	21 60       	ori	r18, 0x01	; 1
    4f78:	fc 01       	movw	r30, r24
    4f7a:	20 83       	st	Z, r18
		else					cbi(*TIMER.T1.TCCRB, CS10_BIT);
		if(TIMER1_CS & 0x02)	sbi(*TIMER.T1.TCCRB, CS11_BIT);
    4f7c:	80 91 75 05 	lds	r24, 0x0575
    4f80:	90 91 76 05 	lds	r25, 0x0576
    4f84:	20 91 75 05 	lds	r18, 0x0575
    4f88:	30 91 76 05 	lds	r19, 0x0576
    4f8c:	f9 01       	movw	r30, r18
    4f8e:	20 81       	ld	r18, Z
    4f90:	22 60       	ori	r18, 0x02	; 2
    4f92:	fc 01       	movw	r30, r24
    4f94:	20 83       	st	Z, r18
		else					cbi(*TIMER.T1.TCCRB, CS11_BIT);
		if(TIMER1_CS & 0x04)	sbi(*TIMER.T1.TCCRB, CS12_BIT);
		else					cbi(*TIMER.T1.TCCRB, CS12_BIT);
    4f96:	80 91 75 05 	lds	r24, 0x0575
    4f9a:	90 91 76 05 	lds	r25, 0x0576
    4f9e:	20 91 75 05 	lds	r18, 0x0575
    4fa2:	30 91 76 05 	lds	r19, 0x0576
    4fa6:	f9 01       	movw	r30, r18
    4fa8:	20 81       	ld	r18, Z
    4faa:	2b 7f       	andi	r18, 0xFB	; 251
    4fac:	fc 01       	movw	r30, r24
    4fae:	20 83       	st	Z, r18
	#endif
	#if defined(USE_TIMER2)
		if(TIMER2_WGM & 0x01)	sbi(*TIMER.T2.TCCRA, WGM20_BIT);
		else					cbi(*TIMER.T2.TCCRA, WGM20_BIT);
    4fb0:	80 91 87 05 	lds	r24, 0x0587
    4fb4:	90 91 88 05 	lds	r25, 0x0588
    4fb8:	20 91 87 05 	lds	r18, 0x0587
    4fbc:	30 91 88 05 	lds	r19, 0x0588
    4fc0:	f9 01       	movw	r30, r18
    4fc2:	20 81       	ld	r18, Z
    4fc4:	2f 7b       	andi	r18, 0xBF	; 191
    4fc6:	fc 01       	movw	r30, r24
    4fc8:	20 83       	st	Z, r18
		if(TIMER2_WGM & 0x02)	sbi(*TIMER.T2.TCCRA, WGM21_BIT);
		else					cbi(*TIMER.T2.TCCRA, WGM21_BIT);
    4fca:	80 91 87 05 	lds	r24, 0x0587
    4fce:	90 91 88 05 	lds	r25, 0x0588
    4fd2:	20 91 87 05 	lds	r18, 0x0587
    4fd6:	30 91 88 05 	lds	r19, 0x0588
    4fda:	f9 01       	movw	r30, r18
    4fdc:	20 81       	ld	r18, Z
    4fde:	27 7f       	andi	r18, 0xF7	; 247
    4fe0:	fc 01       	movw	r30, r24
    4fe2:	20 83       	st	Z, r18
		//if(TIMER2_WGM & 0x04)	//sbi(*TIMER.T2.TCCRB, WGM22_BIT);
		//else					//cbi(*TIMER.T2.TCCRB, WGM22_BIT);
		if(TIMER2_CS & 0x01)	sbi(*TIMER.T2.TCCRB, CS20_BIT);
    4fe4:	80 91 89 05 	lds	r24, 0x0589
    4fe8:	90 91 8a 05 	lds	r25, 0x058A
    4fec:	20 91 89 05 	lds	r18, 0x0589
    4ff0:	30 91 8a 05 	lds	r19, 0x058A
    4ff4:	f9 01       	movw	r30, r18
    4ff6:	20 81       	ld	r18, Z
    4ff8:	21 60       	ori	r18, 0x01	; 1
    4ffa:	fc 01       	movw	r30, r24
    4ffc:	20 83       	st	Z, r18
		else					cbi(*TIMER.T2.TCCRB, CS20_BIT);
		if(TIMER2_CS & 0x02)	sbi(*TIMER.T2.TCCRB, CS21_BIT);
    4ffe:	80 91 89 05 	lds	r24, 0x0589
    5002:	90 91 8a 05 	lds	r25, 0x058A
    5006:	20 91 89 05 	lds	r18, 0x0589
    500a:	30 91 8a 05 	lds	r19, 0x058A
    500e:	f9 01       	movw	r30, r18
    5010:	20 81       	ld	r18, Z
    5012:	22 60       	ori	r18, 0x02	; 2
    5014:	fc 01       	movw	r30, r24
    5016:	20 83       	st	Z, r18
		else					cbi(*TIMER.T2.TCCRB, CS21_BIT);
		if(TIMER2_CS & 0x04)	sbi(*TIMER.T2.TCCRB, CS22_BIT);
		else					cbi(*TIMER.T2.TCCRB, CS22_BIT);
    5018:	80 91 89 05 	lds	r24, 0x0589
    501c:	90 91 8a 05 	lds	r25, 0x058A
    5020:	20 91 89 05 	lds	r18, 0x0589
    5024:	30 91 8a 05 	lds	r19, 0x058A
    5028:	f9 01       	movw	r30, r18
    502a:	20 81       	ld	r18, Z
    502c:	2b 7f       	andi	r18, 0xFB	; 251
    502e:	fc 01       	movw	r30, r24
    5030:	20 83       	st	Z, r18
	#endif
	#if defined(USE_TIMER3)
		if(TIMER3_WGM & 0x01)	sbi(*TIMER.T3.TCCRA, WGM30_BIT);
    5032:	80 91 95 05 	lds	r24, 0x0595
    5036:	90 91 96 05 	lds	r25, 0x0596
    503a:	20 91 95 05 	lds	r18, 0x0595
    503e:	30 91 96 05 	lds	r19, 0x0596
    5042:	f9 01       	movw	r30, r18
    5044:	20 81       	ld	r18, Z
    5046:	21 60       	ori	r18, 0x01	; 1
    5048:	fc 01       	movw	r30, r24
    504a:	20 83       	st	Z, r18
		else					cbi(*TIMER.T3.TCCRA, WGM30_BIT);
		if(TIMER3_WGM & 0x02)	sbi(*TIMER.T3.TCCRA, WGM31_BIT);
		else					cbi(*TIMER.T3.TCCRA, WGM31_BIT);
    504c:	80 91 95 05 	lds	r24, 0x0595
    5050:	90 91 96 05 	lds	r25, 0x0596
    5054:	20 91 95 05 	lds	r18, 0x0595
    5058:	30 91 96 05 	lds	r19, 0x0596
    505c:	f9 01       	movw	r30, r18
    505e:	20 81       	ld	r18, Z
    5060:	2d 7f       	andi	r18, 0xFD	; 253
    5062:	fc 01       	movw	r30, r24
    5064:	20 83       	st	Z, r18
		if(TIMER3_WGM & 0x04)	sbi(*TIMER.T3.TCCRB, WGM32_BIT);
    5066:	80 91 97 05 	lds	r24, 0x0597
    506a:	90 91 98 05 	lds	r25, 0x0598
    506e:	20 91 97 05 	lds	r18, 0x0597
    5072:	30 91 98 05 	lds	r19, 0x0598
    5076:	f9 01       	movw	r30, r18
    5078:	20 81       	ld	r18, Z
    507a:	28 60       	ori	r18, 0x08	; 8
    507c:	fc 01       	movw	r30, r24
    507e:	20 83       	st	Z, r18
		else					cbi(*TIMER.T3.TCCRB, WGM32_BIT);
		if(TIMER3_WGM & 0x08)	sbi(*TIMER.T3.TCCRB, WGM33_BIT);
		else					cbi(*TIMER.T3.TCCRB, WGM33_BIT);
    5080:	80 91 97 05 	lds	r24, 0x0597
    5084:	90 91 98 05 	lds	r25, 0x0598
    5088:	20 91 97 05 	lds	r18, 0x0597
    508c:	30 91 98 05 	lds	r19, 0x0598
    5090:	f9 01       	movw	r30, r18
    5092:	20 81       	ld	r18, Z
    5094:	2f 7e       	andi	r18, 0xEF	; 239
    5096:	fc 01       	movw	r30, r24
    5098:	20 83       	st	Z, r18
		if(TIMER3_CS & 0x01)	sbi(*TIMER.T3.TCCRB, CS30_BIT);
		else					cbi(*TIMER.T3.TCCRB, CS30_BIT);
    509a:	80 91 97 05 	lds	r24, 0x0597
    509e:	90 91 98 05 	lds	r25, 0x0598
    50a2:	20 91 97 05 	lds	r18, 0x0597
    50a6:	30 91 98 05 	lds	r19, 0x0598
    50aa:	f9 01       	movw	r30, r18
    50ac:	20 81       	ld	r18, Z
    50ae:	2e 7f       	andi	r18, 0xFE	; 254
    50b0:	fc 01       	movw	r30, r24
    50b2:	20 83       	st	Z, r18
		if(TIMER3_CS & 0x02)	sbi(*TIMER.T3.TCCRB, CS31_BIT);
    50b4:	80 91 97 05 	lds	r24, 0x0597
    50b8:	90 91 98 05 	lds	r25, 0x0598
    50bc:	20 91 97 05 	lds	r18, 0x0597
    50c0:	30 91 98 05 	lds	r19, 0x0598
    50c4:	f9 01       	movw	r30, r18
    50c6:	20 81       	ld	r18, Z
    50c8:	22 60       	ori	r18, 0x02	; 2
    50ca:	fc 01       	movw	r30, r24
    50cc:	20 83       	st	Z, r18
		else					cbi(*TIMER.T3.TCCRB, CS31_BIT);
		if(TIMER3_CS & 0x04)	sbi(*TIMER.T3.TCCRB, CS32_BIT);
		else					cbi(*TIMER.T3.TCCRB, CS32_BIT);
    50ce:	80 91 97 05 	lds	r24, 0x0597
    50d2:	90 91 98 05 	lds	r25, 0x0598
    50d6:	20 91 97 05 	lds	r18, 0x0597
    50da:	30 91 98 05 	lds	r19, 0x0598
    50de:	f9 01       	movw	r30, r18
    50e0:	20 81       	ld	r18, Z
    50e2:	2b 7f       	andi	r18, 0xFB	; 251
    50e4:	fc 01       	movw	r30, r24
    50e6:	20 83       	st	Z, r18
		if(TIMER5_CS & 0x02)	sbi(*TIMER.T5.TCCRB, CS51_BIT);
		else					cbi(*TIMER.T5.TCCRB, CS51_BIT);
		if(TIMER5_CS & 0x04)	sbi(*TIMER.T5.TCCRB, CS52_BIT);
		else					cbi(*TIMER.T5.TCCRB, CS52_BIT);
	#endif
}
    50e8:	cf 91       	pop	r28
    50ea:	df 91       	pop	r29
    50ec:	08 95       	ret

000050ee <UartRegSetup>:
#endif

#if (defined(USE_UART) || defined(USE_MU))
static void UartRegSetup() {
    50ee:	df 93       	push	r29
    50f0:	cf 93       	push	r28
    50f2:	cd b7       	in	r28, 0x3d	; 61
    50f4:	de b7       	in	r29, 0x3e	; 62
	#if defined(UDR0) || defined(UDR)
		USART.U0.UCASRA =	(uint8_t*)&UCSR0A_REG;
    50f6:	8b e2       	ldi	r24, 0x2B	; 43
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	90 93 d4 05 	sts	0x05D4, r25
    50fe:	80 93 d3 05 	sts	0x05D3, r24
		USART.U0.UCASRB =	(uint8_t*)&UCSR0B_REG;
    5102:	8a e2       	ldi	r24, 0x2A	; 42
    5104:	90 e0       	ldi	r25, 0x00	; 0
    5106:	90 93 d6 05 	sts	0x05D6, r25
    510a:	80 93 d5 05 	sts	0x05D5, r24
		USART.U0.UCASRC =	(uint8_t*)&UCSR0C_REG;
    510e:	85 e9       	ldi	r24, 0x95	; 149
    5110:	90 e0       	ldi	r25, 0x00	; 0
    5112:	90 93 d8 05 	sts	0x05D8, r25
    5116:	80 93 d7 05 	sts	0x05D7, r24
		USART.U0.UBRREGH =	(uint8_t*)&UBRR0H_REG;
    511a:	80 e9       	ldi	r24, 0x90	; 144
    511c:	90 e0       	ldi	r25, 0x00	; 0
    511e:	90 93 dc 05 	sts	0x05DC, r25
    5122:	80 93 db 05 	sts	0x05DB, r24
		USART.U0.UBRREGL =	(uint8_t*)&UBRR0L_REG;
    5126:	89 e2       	ldi	r24, 0x29	; 41
    5128:	90 e0       	ldi	r25, 0x00	; 0
    512a:	90 93 de 05 	sts	0x05DE, r25
    512e:	80 93 dd 05 	sts	0x05DD, r24
		USART.U0.UDREG =	(uint8_t*)&UDR0_REG;
    5132:	8c e2       	ldi	r24, 0x2C	; 44
    5134:	90 e0       	ldi	r25, 0x00	; 0
    5136:	90 93 da 05 	sts	0x05DA, r25
    513a:	80 93 d9 05 	sts	0x05D9, r24
	#endif
	#if defined(UDR1)
		USART.U1.UCASRA =	(uint8_t*)&UCSR1A_REG;
    513e:	8b e9       	ldi	r24, 0x9B	; 155
    5140:	90 e0       	ldi	r25, 0x00	; 0
    5142:	90 93 e0 05 	sts	0x05E0, r25
    5146:	80 93 df 05 	sts	0x05DF, r24
		USART.U1.UCASRB =	(uint8_t*)&UCSR1B_REG;
    514a:	8a e9       	ldi	r24, 0x9A	; 154
    514c:	90 e0       	ldi	r25, 0x00	; 0
    514e:	90 93 e2 05 	sts	0x05E2, r25
    5152:	80 93 e1 05 	sts	0x05E1, r24
		USART.U1.UCASRC =	(uint8_t*)&UCSR1C_REG;
    5156:	8d e9       	ldi	r24, 0x9D	; 157
    5158:	90 e0       	ldi	r25, 0x00	; 0
    515a:	90 93 e4 05 	sts	0x05E4, r25
    515e:	80 93 e3 05 	sts	0x05E3, r24
		USART.U1.UBRREGH =	(uint8_t*)&UBRR1H_REG;
    5162:	88 e9       	ldi	r24, 0x98	; 152
    5164:	90 e0       	ldi	r25, 0x00	; 0
    5166:	90 93 e8 05 	sts	0x05E8, r25
    516a:	80 93 e7 05 	sts	0x05E7, r24
		USART.U1.UBRREGL =	(uint8_t*)&UBRR1L_REG;
    516e:	89 e9       	ldi	r24, 0x99	; 153
    5170:	90 e0       	ldi	r25, 0x00	; 0
    5172:	90 93 ea 05 	sts	0x05EA, r25
    5176:	80 93 e9 05 	sts	0x05E9, r24
		USART.U1.UDREG =	(uint8_t*)&UDR1_REG;
    517a:	8c e9       	ldi	r24, 0x9C	; 156
    517c:	90 e0       	ldi	r25, 0x00	; 0
    517e:	90 93 e6 05 	sts	0x05E6, r25
    5182:	80 93 e5 05 	sts	0x05E5, r24
		USART.U3.UCASRC =	(uint8_t*)&UCSR3C_REG;
		USART.U3.UBRREGH =	(uint8_t*)&UBRR3H_REG;
		USART.U3.UBRREGL =	(uint8_t*)&UBRR3L_REG;
		USART.U3.UDREG =	(uint8_t*)&UDR3_REG;
	#endif
}
    5186:	cf 91       	pop	r28
    5188:	df 91       	pop	r29
    518a:	08 95       	ret

0000518c <ExintRegSetup>:
#endif

#if defined(USE_EXINT)
static void ExintRegSetup() {
    518c:	df 93       	push	r29
    518e:	cf 93       	push	r28
    5190:	cd b7       	in	r28, 0x3d	; 61
    5192:	de b7       	in	r29, 0x3e	; 62
	#if defined(EIMSK)
		EXINT.EXICRA =	(uint8_t*)&EICRA_REG;
    5194:	8a e6       	ldi	r24, 0x6A	; 106
    5196:	90 e0       	ldi	r25, 0x00	; 0
    5198:	90 93 ec 05 	sts	0x05EC, r25
    519c:	80 93 eb 05 	sts	0x05EB, r24
		EXINT.EXICRB =	(uint8_t*)&EICRB_REG;
    51a0:	8a e5       	ldi	r24, 0x5A	; 90
    51a2:	90 e0       	ldi	r25, 0x00	; 0
    51a4:	90 93 ee 05 	sts	0x05EE, r25
    51a8:	80 93 ed 05 	sts	0x05ED, r24
		EXINT.EXIMSK =	(uint8_t*)&EIMSK_REG;
    51ac:	89 e5       	ldi	r24, 0x59	; 89
    51ae:	90 e0       	ldi	r25, 0x00	; 0
    51b0:	90 93 f0 05 	sts	0x05F0, r25
    51b4:	80 93 ef 05 	sts	0x05EF, r24
		EXINT.EXIFR =	(uint8_t*)&EIFR_REG;
    51b8:	88 e5       	ldi	r24, 0x58	; 88
    51ba:	90 e0       	ldi	r25, 0x00	; 0
    51bc:	90 93 f2 05 	sts	0x05F2, r25
    51c0:	80 93 f1 05 	sts	0x05F1, r24
	#endif
}
    51c4:	cf 91       	pop	r28
    51c6:	df 91       	pop	r29
    51c8:	08 95       	ret

000051ca <__fixunssfsi>:
    51ca:	ef 92       	push	r14
    51cc:	ff 92       	push	r15
    51ce:	0f 93       	push	r16
    51d0:	1f 93       	push	r17
    51d2:	7b 01       	movw	r14, r22
    51d4:	8c 01       	movw	r16, r24
    51d6:	20 e0       	ldi	r18, 0x00	; 0
    51d8:	30 e0       	ldi	r19, 0x00	; 0
    51da:	40 e0       	ldi	r20, 0x00	; 0
    51dc:	5f e4       	ldi	r21, 0x4F	; 79
    51de:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__gesf2>
    51e2:	87 fd       	sbrc	r24, 7
    51e4:	11 c0       	rjmp	.+34     	; 0x5208 <__fixunssfsi+0x3e>
    51e6:	c8 01       	movw	r24, r16
    51e8:	b7 01       	movw	r22, r14
    51ea:	20 e0       	ldi	r18, 0x00	; 0
    51ec:	30 e0       	ldi	r19, 0x00	; 0
    51ee:	40 e0       	ldi	r20, 0x00	; 0
    51f0:	5f e4       	ldi	r21, 0x4F	; 79
    51f2:	0e 94 88 2a 	call	0x5510	; 0x5510 <__subsf3>
    51f6:	0e 94 43 2c 	call	0x5886	; 0x5886 <__fixsfsi>
    51fa:	9b 01       	movw	r18, r22
    51fc:	ac 01       	movw	r20, r24
    51fe:	20 50       	subi	r18, 0x00	; 0
    5200:	30 40       	sbci	r19, 0x00	; 0
    5202:	40 40       	sbci	r20, 0x00	; 0
    5204:	50 48       	sbci	r21, 0x80	; 128
    5206:	06 c0       	rjmp	.+12     	; 0x5214 <__fixunssfsi+0x4a>
    5208:	c8 01       	movw	r24, r16
    520a:	b7 01       	movw	r22, r14
    520c:	0e 94 43 2c 	call	0x5886	; 0x5886 <__fixsfsi>
    5210:	9b 01       	movw	r18, r22
    5212:	ac 01       	movw	r20, r24
    5214:	b9 01       	movw	r22, r18
    5216:	ca 01       	movw	r24, r20
    5218:	1f 91       	pop	r17
    521a:	0f 91       	pop	r16
    521c:	ff 90       	pop	r15
    521e:	ef 90       	pop	r14
    5220:	08 95       	ret

00005222 <_fpadd_parts>:
    5222:	a0 e0       	ldi	r26, 0x00	; 0
    5224:	b0 e0       	ldi	r27, 0x00	; 0
    5226:	e7 e1       	ldi	r30, 0x17	; 23
    5228:	f9 e2       	ldi	r31, 0x29	; 41
    522a:	0c 94 fb 2e 	jmp	0x5df6	; 0x5df6 <__prologue_saves__+0x8>
    522e:	fc 01       	movw	r30, r24
    5230:	ea 01       	movw	r28, r20
    5232:	80 81       	ld	r24, Z
    5234:	82 30       	cpi	r24, 0x02	; 2
    5236:	08 f4       	brcc	.+2      	; 0x523a <_fpadd_parts+0x18>
    5238:	38 c1       	rjmp	.+624    	; 0x54aa <_fpadd_parts+0x288>
    523a:	db 01       	movw	r26, r22
    523c:	9c 91       	ld	r25, X
    523e:	92 30       	cpi	r25, 0x02	; 2
    5240:	08 f4       	brcc	.+2      	; 0x5244 <_fpadd_parts+0x22>
    5242:	30 c1       	rjmp	.+608    	; 0x54a4 <_fpadd_parts+0x282>
    5244:	84 30       	cpi	r24, 0x04	; 4
    5246:	59 f4       	brne	.+22     	; 0x525e <_fpadd_parts+0x3c>
    5248:	94 30       	cpi	r25, 0x04	; 4
    524a:	09 f0       	breq	.+2      	; 0x524e <_fpadd_parts+0x2c>
    524c:	2e c1       	rjmp	.+604    	; 0x54aa <_fpadd_parts+0x288>
    524e:	91 81       	ldd	r25, Z+1	; 0x01
    5250:	11 96       	adiw	r26, 0x01	; 1
    5252:	8c 91       	ld	r24, X
    5254:	11 97       	sbiw	r26, 0x01	; 1
    5256:	98 17       	cp	r25, r24
    5258:	09 f0       	breq	.+2      	; 0x525c <_fpadd_parts+0x3a>
    525a:	21 c1       	rjmp	.+578    	; 0x549e <_fpadd_parts+0x27c>
    525c:	26 c1       	rjmp	.+588    	; 0x54aa <_fpadd_parts+0x288>
    525e:	94 30       	cpi	r25, 0x04	; 4
    5260:	09 f4       	brne	.+2      	; 0x5264 <_fpadd_parts+0x42>
    5262:	20 c1       	rjmp	.+576    	; 0x54a4 <_fpadd_parts+0x282>
    5264:	92 30       	cpi	r25, 0x02	; 2
    5266:	b1 f4       	brne	.+44     	; 0x5294 <_fpadd_parts+0x72>
    5268:	82 30       	cpi	r24, 0x02	; 2
    526a:	09 f0       	breq	.+2      	; 0x526e <_fpadd_parts+0x4c>
    526c:	1e c1       	rjmp	.+572    	; 0x54aa <_fpadd_parts+0x288>
    526e:	ca 01       	movw	r24, r20
    5270:	af 01       	movw	r20, r30
    5272:	28 e0       	ldi	r18, 0x08	; 8
    5274:	da 01       	movw	r26, r20
    5276:	0d 90       	ld	r0, X+
    5278:	ad 01       	movw	r20, r26
    527a:	dc 01       	movw	r26, r24
    527c:	0d 92       	st	X+, r0
    527e:	cd 01       	movw	r24, r26
    5280:	21 50       	subi	r18, 0x01	; 1
    5282:	c1 f7       	brne	.-16     	; 0x5274 <_fpadd_parts+0x52>
    5284:	db 01       	movw	r26, r22
    5286:	11 96       	adiw	r26, 0x01	; 1
    5288:	8c 91       	ld	r24, X
    528a:	11 97       	sbiw	r26, 0x01	; 1
    528c:	91 81       	ldd	r25, Z+1	; 0x01
    528e:	89 23       	and	r24, r25
    5290:	89 83       	std	Y+1, r24	; 0x01
    5292:	0a c1       	rjmp	.+532    	; 0x54a8 <_fpadd_parts+0x286>
    5294:	82 30       	cpi	r24, 0x02	; 2
    5296:	09 f4       	brne	.+2      	; 0x529a <_fpadd_parts+0x78>
    5298:	05 c1       	rjmp	.+522    	; 0x54a4 <_fpadd_parts+0x282>
    529a:	c2 80       	ldd	r12, Z+2	; 0x02
    529c:	d3 80       	ldd	r13, Z+3	; 0x03
    529e:	db 01       	movw	r26, r22
    52a0:	12 96       	adiw	r26, 0x02	; 2
    52a2:	6d 90       	ld	r6, X+
    52a4:	7c 90       	ld	r7, X
    52a6:	13 97       	sbiw	r26, 0x03	; 3
    52a8:	24 81       	ldd	r18, Z+4	; 0x04
    52aa:	35 81       	ldd	r19, Z+5	; 0x05
    52ac:	46 81       	ldd	r20, Z+6	; 0x06
    52ae:	57 81       	ldd	r21, Z+7	; 0x07
    52b0:	14 96       	adiw	r26, 0x04	; 4
    52b2:	ed 90       	ld	r14, X+
    52b4:	fd 90       	ld	r15, X+
    52b6:	0d 91       	ld	r16, X+
    52b8:	1c 91       	ld	r17, X
    52ba:	17 97       	sbiw	r26, 0x07	; 7
    52bc:	c6 01       	movw	r24, r12
    52be:	86 19       	sub	r24, r6
    52c0:	97 09       	sbc	r25, r7
    52c2:	5c 01       	movw	r10, r24
    52c4:	97 ff       	sbrs	r25, 7
    52c6:	04 c0       	rjmp	.+8      	; 0x52d0 <_fpadd_parts+0xae>
    52c8:	aa 24       	eor	r10, r10
    52ca:	bb 24       	eor	r11, r11
    52cc:	a8 1a       	sub	r10, r24
    52ce:	b9 0a       	sbc	r11, r25
    52d0:	b0 e2       	ldi	r27, 0x20	; 32
    52d2:	ab 16       	cp	r10, r27
    52d4:	b1 04       	cpc	r11, r1
    52d6:	0c f0       	brlt	.+2      	; 0x52da <_fpadd_parts+0xb8>
    52d8:	61 c0       	rjmp	.+194    	; 0x539c <_fpadd_parts+0x17a>
    52da:	18 16       	cp	r1, r24
    52dc:	19 06       	cpc	r1, r25
    52de:	6c f5       	brge	.+90     	; 0x533a <_fpadd_parts+0x118>
    52e0:	37 01       	movw	r6, r14
    52e2:	48 01       	movw	r8, r16
    52e4:	0a 2c       	mov	r0, r10
    52e6:	04 c0       	rjmp	.+8      	; 0x52f0 <_fpadd_parts+0xce>
    52e8:	96 94       	lsr	r9
    52ea:	87 94       	ror	r8
    52ec:	77 94       	ror	r7
    52ee:	67 94       	ror	r6
    52f0:	0a 94       	dec	r0
    52f2:	d2 f7       	brpl	.-12     	; 0x52e8 <_fpadd_parts+0xc6>
    52f4:	81 e0       	ldi	r24, 0x01	; 1
    52f6:	90 e0       	ldi	r25, 0x00	; 0
    52f8:	a0 e0       	ldi	r26, 0x00	; 0
    52fa:	b0 e0       	ldi	r27, 0x00	; 0
    52fc:	0a 2c       	mov	r0, r10
    52fe:	04 c0       	rjmp	.+8      	; 0x5308 <_fpadd_parts+0xe6>
    5300:	88 0f       	add	r24, r24
    5302:	99 1f       	adc	r25, r25
    5304:	aa 1f       	adc	r26, r26
    5306:	bb 1f       	adc	r27, r27
    5308:	0a 94       	dec	r0
    530a:	d2 f7       	brpl	.-12     	; 0x5300 <_fpadd_parts+0xde>
    530c:	01 97       	sbiw	r24, 0x01	; 1
    530e:	a1 09       	sbc	r26, r1
    5310:	b1 09       	sbc	r27, r1
    5312:	8e 21       	and	r24, r14
    5314:	9f 21       	and	r25, r15
    5316:	a0 23       	and	r26, r16
    5318:	b1 23       	and	r27, r17
    531a:	ee 24       	eor	r14, r14
    531c:	ff 24       	eor	r15, r15
    531e:	87 01       	movw	r16, r14
    5320:	e3 94       	inc	r14
    5322:	00 97       	sbiw	r24, 0x00	; 0
    5324:	a1 05       	cpc	r26, r1
    5326:	b1 05       	cpc	r27, r1
    5328:	19 f4       	brne	.+6      	; 0x5330 <_fpadd_parts+0x10e>
    532a:	ee 24       	eor	r14, r14
    532c:	ff 24       	eor	r15, r15
    532e:	87 01       	movw	r16, r14
    5330:	e6 28       	or	r14, r6
    5332:	f7 28       	or	r15, r7
    5334:	08 29       	or	r16, r8
    5336:	19 29       	or	r17, r9
    5338:	3c c0       	rjmp	.+120    	; 0x53b2 <_fpadd_parts+0x190>
    533a:	00 97       	sbiw	r24, 0x00	; 0
    533c:	d1 f1       	breq	.+116    	; 0x53b2 <_fpadd_parts+0x190>
    533e:	ca 0c       	add	r12, r10
    5340:	db 1c       	adc	r13, r11
    5342:	39 01       	movw	r6, r18
    5344:	4a 01       	movw	r8, r20
    5346:	0a 2c       	mov	r0, r10
    5348:	04 c0       	rjmp	.+8      	; 0x5352 <_fpadd_parts+0x130>
    534a:	96 94       	lsr	r9
    534c:	87 94       	ror	r8
    534e:	77 94       	ror	r7
    5350:	67 94       	ror	r6
    5352:	0a 94       	dec	r0
    5354:	d2 f7       	brpl	.-12     	; 0x534a <_fpadd_parts+0x128>
    5356:	81 e0       	ldi	r24, 0x01	; 1
    5358:	90 e0       	ldi	r25, 0x00	; 0
    535a:	a0 e0       	ldi	r26, 0x00	; 0
    535c:	b0 e0       	ldi	r27, 0x00	; 0
    535e:	0a 2c       	mov	r0, r10
    5360:	04 c0       	rjmp	.+8      	; 0x536a <_fpadd_parts+0x148>
    5362:	88 0f       	add	r24, r24
    5364:	99 1f       	adc	r25, r25
    5366:	aa 1f       	adc	r26, r26
    5368:	bb 1f       	adc	r27, r27
    536a:	0a 94       	dec	r0
    536c:	d2 f7       	brpl	.-12     	; 0x5362 <_fpadd_parts+0x140>
    536e:	01 97       	sbiw	r24, 0x01	; 1
    5370:	a1 09       	sbc	r26, r1
    5372:	b1 09       	sbc	r27, r1
    5374:	82 23       	and	r24, r18
    5376:	93 23       	and	r25, r19
    5378:	a4 23       	and	r26, r20
    537a:	b5 23       	and	r27, r21
    537c:	21 e0       	ldi	r18, 0x01	; 1
    537e:	30 e0       	ldi	r19, 0x00	; 0
    5380:	40 e0       	ldi	r20, 0x00	; 0
    5382:	50 e0       	ldi	r21, 0x00	; 0
    5384:	00 97       	sbiw	r24, 0x00	; 0
    5386:	a1 05       	cpc	r26, r1
    5388:	b1 05       	cpc	r27, r1
    538a:	19 f4       	brne	.+6      	; 0x5392 <_fpadd_parts+0x170>
    538c:	20 e0       	ldi	r18, 0x00	; 0
    538e:	30 e0       	ldi	r19, 0x00	; 0
    5390:	a9 01       	movw	r20, r18
    5392:	26 29       	or	r18, r6
    5394:	37 29       	or	r19, r7
    5396:	48 29       	or	r20, r8
    5398:	59 29       	or	r21, r9
    539a:	0b c0       	rjmp	.+22     	; 0x53b2 <_fpadd_parts+0x190>
    539c:	6c 14       	cp	r6, r12
    539e:	7d 04       	cpc	r7, r13
    53a0:	24 f4       	brge	.+8      	; 0x53aa <_fpadd_parts+0x188>
    53a2:	ee 24       	eor	r14, r14
    53a4:	ff 24       	eor	r15, r15
    53a6:	87 01       	movw	r16, r14
    53a8:	04 c0       	rjmp	.+8      	; 0x53b2 <_fpadd_parts+0x190>
    53aa:	63 01       	movw	r12, r6
    53ac:	20 e0       	ldi	r18, 0x00	; 0
    53ae:	30 e0       	ldi	r19, 0x00	; 0
    53b0:	a9 01       	movw	r20, r18
    53b2:	81 81       	ldd	r24, Z+1	; 0x01
    53b4:	fb 01       	movw	r30, r22
    53b6:	91 81       	ldd	r25, Z+1	; 0x01
    53b8:	89 17       	cp	r24, r25
    53ba:	09 f4       	brne	.+2      	; 0x53be <_fpadd_parts+0x19c>
    53bc:	45 c0       	rjmp	.+138    	; 0x5448 <_fpadd_parts+0x226>
    53be:	88 23       	and	r24, r24
    53c0:	49 f0       	breq	.+18     	; 0x53d4 <_fpadd_parts+0x1b2>
    53c2:	d8 01       	movw	r26, r16
    53c4:	c7 01       	movw	r24, r14
    53c6:	82 1b       	sub	r24, r18
    53c8:	93 0b       	sbc	r25, r19
    53ca:	a4 0b       	sbc	r26, r20
    53cc:	b5 0b       	sbc	r27, r21
    53ce:	9c 01       	movw	r18, r24
    53d0:	ad 01       	movw	r20, r26
    53d2:	04 c0       	rjmp	.+8      	; 0x53dc <_fpadd_parts+0x1ba>
    53d4:	2e 19       	sub	r18, r14
    53d6:	3f 09       	sbc	r19, r15
    53d8:	40 0b       	sbc	r20, r16
    53da:	51 0b       	sbc	r21, r17
    53dc:	57 fd       	sbrc	r21, 7
    53de:	04 c0       	rjmp	.+8      	; 0x53e8 <_fpadd_parts+0x1c6>
    53e0:	19 82       	std	Y+1, r1	; 0x01
    53e2:	db 82       	std	Y+3, r13	; 0x03
    53e4:	ca 82       	std	Y+2, r12	; 0x02
    53e6:	0b c0       	rjmp	.+22     	; 0x53fe <_fpadd_parts+0x1dc>
    53e8:	81 e0       	ldi	r24, 0x01	; 1
    53ea:	89 83       	std	Y+1, r24	; 0x01
    53ec:	db 82       	std	Y+3, r13	; 0x03
    53ee:	ca 82       	std	Y+2, r12	; 0x02
    53f0:	50 95       	com	r21
    53f2:	40 95       	com	r20
    53f4:	30 95       	com	r19
    53f6:	21 95       	neg	r18
    53f8:	3f 4f       	sbci	r19, 0xFF	; 255
    53fa:	4f 4f       	sbci	r20, 0xFF	; 255
    53fc:	5f 4f       	sbci	r21, 0xFF	; 255
    53fe:	2c 83       	std	Y+4, r18	; 0x04
    5400:	3d 83       	std	Y+5, r19	; 0x05
    5402:	4e 83       	std	Y+6, r20	; 0x06
    5404:	5f 83       	std	Y+7, r21	; 0x07
    5406:	0d c0       	rjmp	.+26     	; 0x5422 <_fpadd_parts+0x200>
    5408:	88 0f       	add	r24, r24
    540a:	99 1f       	adc	r25, r25
    540c:	aa 1f       	adc	r26, r26
    540e:	bb 1f       	adc	r27, r27
    5410:	8c 83       	std	Y+4, r24	; 0x04
    5412:	9d 83       	std	Y+5, r25	; 0x05
    5414:	ae 83       	std	Y+6, r26	; 0x06
    5416:	bf 83       	std	Y+7, r27	; 0x07
    5418:	8a 81       	ldd	r24, Y+2	; 0x02
    541a:	9b 81       	ldd	r25, Y+3	; 0x03
    541c:	01 97       	sbiw	r24, 0x01	; 1
    541e:	9b 83       	std	Y+3, r25	; 0x03
    5420:	8a 83       	std	Y+2, r24	; 0x02
    5422:	8c 81       	ldd	r24, Y+4	; 0x04
    5424:	9d 81       	ldd	r25, Y+5	; 0x05
    5426:	ae 81       	ldd	r26, Y+6	; 0x06
    5428:	bf 81       	ldd	r27, Y+7	; 0x07
    542a:	9c 01       	movw	r18, r24
    542c:	ad 01       	movw	r20, r26
    542e:	21 50       	subi	r18, 0x01	; 1
    5430:	30 40       	sbci	r19, 0x00	; 0
    5432:	40 40       	sbci	r20, 0x00	; 0
    5434:	50 40       	sbci	r21, 0x00	; 0
    5436:	2f 3f       	cpi	r18, 0xFF	; 255
    5438:	ef ef       	ldi	r30, 0xFF	; 255
    543a:	3e 07       	cpc	r19, r30
    543c:	ef ef       	ldi	r30, 0xFF	; 255
    543e:	4e 07       	cpc	r20, r30
    5440:	ef e3       	ldi	r30, 0x3F	; 63
    5442:	5e 07       	cpc	r21, r30
    5444:	08 f3       	brcs	.-62     	; 0x5408 <_fpadd_parts+0x1e6>
    5446:	0b c0       	rjmp	.+22     	; 0x545e <_fpadd_parts+0x23c>
    5448:	89 83       	std	Y+1, r24	; 0x01
    544a:	db 82       	std	Y+3, r13	; 0x03
    544c:	ca 82       	std	Y+2, r12	; 0x02
    544e:	2e 0d       	add	r18, r14
    5450:	3f 1d       	adc	r19, r15
    5452:	40 1f       	adc	r20, r16
    5454:	51 1f       	adc	r21, r17
    5456:	2c 83       	std	Y+4, r18	; 0x04
    5458:	3d 83       	std	Y+5, r19	; 0x05
    545a:	4e 83       	std	Y+6, r20	; 0x06
    545c:	5f 83       	std	Y+7, r21	; 0x07
    545e:	83 e0       	ldi	r24, 0x03	; 3
    5460:	88 83       	st	Y, r24
    5462:	2c 81       	ldd	r18, Y+4	; 0x04
    5464:	3d 81       	ldd	r19, Y+5	; 0x05
    5466:	4e 81       	ldd	r20, Y+6	; 0x06
    5468:	5f 81       	ldd	r21, Y+7	; 0x07
    546a:	57 ff       	sbrs	r21, 7
    546c:	1d c0       	rjmp	.+58     	; 0x54a8 <_fpadd_parts+0x286>
    546e:	da 01       	movw	r26, r20
    5470:	c9 01       	movw	r24, r18
    5472:	81 70       	andi	r24, 0x01	; 1
    5474:	90 70       	andi	r25, 0x00	; 0
    5476:	a0 70       	andi	r26, 0x00	; 0
    5478:	b0 70       	andi	r27, 0x00	; 0
    547a:	56 95       	lsr	r21
    547c:	47 95       	ror	r20
    547e:	37 95       	ror	r19
    5480:	27 95       	ror	r18
    5482:	82 2b       	or	r24, r18
    5484:	93 2b       	or	r25, r19
    5486:	a4 2b       	or	r26, r20
    5488:	b5 2b       	or	r27, r21
    548a:	8c 83       	std	Y+4, r24	; 0x04
    548c:	9d 83       	std	Y+5, r25	; 0x05
    548e:	ae 83       	std	Y+6, r26	; 0x06
    5490:	bf 83       	std	Y+7, r27	; 0x07
    5492:	8a 81       	ldd	r24, Y+2	; 0x02
    5494:	9b 81       	ldd	r25, Y+3	; 0x03
    5496:	01 96       	adiw	r24, 0x01	; 1
    5498:	9b 83       	std	Y+3, r25	; 0x03
    549a:	8a 83       	std	Y+2, r24	; 0x02
    549c:	05 c0       	rjmp	.+10     	; 0x54a8 <_fpadd_parts+0x286>
    549e:	e9 e6       	ldi	r30, 0x69	; 105
    54a0:	f1 e0       	ldi	r31, 0x01	; 1
    54a2:	03 c0       	rjmp	.+6      	; 0x54aa <_fpadd_parts+0x288>
    54a4:	fb 01       	movw	r30, r22
    54a6:	01 c0       	rjmp	.+2      	; 0x54aa <_fpadd_parts+0x288>
    54a8:	fe 01       	movw	r30, r28
    54aa:	cf 01       	movw	r24, r30
    54ac:	cd b7       	in	r28, 0x3d	; 61
    54ae:	de b7       	in	r29, 0x3e	; 62
    54b0:	ee e0       	ldi	r30, 0x0E	; 14
    54b2:	0c 94 17 2f 	jmp	0x5e2e	; 0x5e2e <__epilogue_restores__+0x8>

000054b6 <__addsf3>:
    54b6:	a0 e2       	ldi	r26, 0x20	; 32
    54b8:	b0 e0       	ldi	r27, 0x00	; 0
    54ba:	e1 e6       	ldi	r30, 0x61	; 97
    54bc:	fa e2       	ldi	r31, 0x2A	; 42
    54be:	0c 94 03 2f 	jmp	0x5e06	; 0x5e06 <__prologue_saves__+0x18>
    54c2:	69 83       	std	Y+1, r22	; 0x01
    54c4:	7a 83       	std	Y+2, r23	; 0x02
    54c6:	8b 83       	std	Y+3, r24	; 0x03
    54c8:	9c 83       	std	Y+4, r25	; 0x04
    54ca:	2d 83       	std	Y+5, r18	; 0x05
    54cc:	3e 83       	std	Y+6, r19	; 0x06
    54ce:	4f 83       	std	Y+7, r20	; 0x07
    54d0:	58 87       	std	Y+8, r21	; 0x08
    54d2:	89 e0       	ldi	r24, 0x09	; 9
    54d4:	e8 2e       	mov	r14, r24
    54d6:	f1 2c       	mov	r15, r1
    54d8:	ec 0e       	add	r14, r28
    54da:	fd 1e       	adc	r15, r29
    54dc:	ce 01       	movw	r24, r28
    54de:	01 96       	adiw	r24, 0x01	; 1
    54e0:	b7 01       	movw	r22, r14
    54e2:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__unpack_f>
    54e6:	8e 01       	movw	r16, r28
    54e8:	0f 5e       	subi	r16, 0xEF	; 239
    54ea:	1f 4f       	sbci	r17, 0xFF	; 255
    54ec:	ce 01       	movw	r24, r28
    54ee:	05 96       	adiw	r24, 0x05	; 5
    54f0:	b8 01       	movw	r22, r16
    54f2:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__unpack_f>
    54f6:	c7 01       	movw	r24, r14
    54f8:	b8 01       	movw	r22, r16
    54fa:	ae 01       	movw	r20, r28
    54fc:	47 5e       	subi	r20, 0xE7	; 231
    54fe:	5f 4f       	sbci	r21, 0xFF	; 255
    5500:	0e 94 11 29 	call	0x5222	; 0x5222 <_fpadd_parts>
    5504:	0e 94 67 2d 	call	0x5ace	; 0x5ace <__pack_f>
    5508:	a0 96       	adiw	r28, 0x20	; 32
    550a:	e6 e0       	ldi	r30, 0x06	; 6
    550c:	0c 94 1f 2f 	jmp	0x5e3e	; 0x5e3e <__epilogue_restores__+0x18>

00005510 <__subsf3>:
    5510:	a0 e2       	ldi	r26, 0x20	; 32
    5512:	b0 e0       	ldi	r27, 0x00	; 0
    5514:	ee e8       	ldi	r30, 0x8E	; 142
    5516:	fa e2       	ldi	r31, 0x2A	; 42
    5518:	0c 94 03 2f 	jmp	0x5e06	; 0x5e06 <__prologue_saves__+0x18>
    551c:	69 83       	std	Y+1, r22	; 0x01
    551e:	7a 83       	std	Y+2, r23	; 0x02
    5520:	8b 83       	std	Y+3, r24	; 0x03
    5522:	9c 83       	std	Y+4, r25	; 0x04
    5524:	2d 83       	std	Y+5, r18	; 0x05
    5526:	3e 83       	std	Y+6, r19	; 0x06
    5528:	4f 83       	std	Y+7, r20	; 0x07
    552a:	58 87       	std	Y+8, r21	; 0x08
    552c:	8e 01       	movw	r16, r28
    552e:	07 5f       	subi	r16, 0xF7	; 247
    5530:	1f 4f       	sbci	r17, 0xFF	; 255
    5532:	ce 01       	movw	r24, r28
    5534:	01 96       	adiw	r24, 0x01	; 1
    5536:	b8 01       	movw	r22, r16
    5538:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__unpack_f>
    553c:	91 e1       	ldi	r25, 0x11	; 17
    553e:	e9 2e       	mov	r14, r25
    5540:	f1 2c       	mov	r15, r1
    5542:	ec 0e       	add	r14, r28
    5544:	fd 1e       	adc	r15, r29
    5546:	ce 01       	movw	r24, r28
    5548:	05 96       	adiw	r24, 0x05	; 5
    554a:	b7 01       	movw	r22, r14
    554c:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__unpack_f>
    5550:	8a 89       	ldd	r24, Y+18	; 0x12
    5552:	91 e0       	ldi	r25, 0x01	; 1
    5554:	89 27       	eor	r24, r25
    5556:	8a 8b       	std	Y+18, r24	; 0x12
    5558:	c8 01       	movw	r24, r16
    555a:	b7 01       	movw	r22, r14
    555c:	ae 01       	movw	r20, r28
    555e:	47 5e       	subi	r20, 0xE7	; 231
    5560:	5f 4f       	sbci	r21, 0xFF	; 255
    5562:	0e 94 11 29 	call	0x5222	; 0x5222 <_fpadd_parts>
    5566:	0e 94 67 2d 	call	0x5ace	; 0x5ace <__pack_f>
    556a:	a0 96       	adiw	r28, 0x20	; 32
    556c:	e6 e0       	ldi	r30, 0x06	; 6
    556e:	0c 94 1f 2f 	jmp	0x5e3e	; 0x5e3e <__epilogue_restores__+0x18>

00005572 <__mulsf3>:
    5572:	a0 e2       	ldi	r26, 0x20	; 32
    5574:	b0 e0       	ldi	r27, 0x00	; 0
    5576:	ef eb       	ldi	r30, 0xBF	; 191
    5578:	fa e2       	ldi	r31, 0x2A	; 42
    557a:	0c 94 f7 2e 	jmp	0x5dee	; 0x5dee <__prologue_saves__>
    557e:	69 83       	std	Y+1, r22	; 0x01
    5580:	7a 83       	std	Y+2, r23	; 0x02
    5582:	8b 83       	std	Y+3, r24	; 0x03
    5584:	9c 83       	std	Y+4, r25	; 0x04
    5586:	2d 83       	std	Y+5, r18	; 0x05
    5588:	3e 83       	std	Y+6, r19	; 0x06
    558a:	4f 83       	std	Y+7, r20	; 0x07
    558c:	58 87       	std	Y+8, r21	; 0x08
    558e:	ce 01       	movw	r24, r28
    5590:	01 96       	adiw	r24, 0x01	; 1
    5592:	be 01       	movw	r22, r28
    5594:	67 5f       	subi	r22, 0xF7	; 247
    5596:	7f 4f       	sbci	r23, 0xFF	; 255
    5598:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__unpack_f>
    559c:	ce 01       	movw	r24, r28
    559e:	05 96       	adiw	r24, 0x05	; 5
    55a0:	be 01       	movw	r22, r28
    55a2:	6f 5e       	subi	r22, 0xEF	; 239
    55a4:	7f 4f       	sbci	r23, 0xFF	; 255
    55a6:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__unpack_f>
    55aa:	99 85       	ldd	r25, Y+9	; 0x09
    55ac:	92 30       	cpi	r25, 0x02	; 2
    55ae:	78 f0       	brcs	.+30     	; 0x55ce <__mulsf3+0x5c>
    55b0:	89 89       	ldd	r24, Y+17	; 0x11
    55b2:	82 30       	cpi	r24, 0x02	; 2
    55b4:	c0 f0       	brcs	.+48     	; 0x55e6 <__mulsf3+0x74>
    55b6:	94 30       	cpi	r25, 0x04	; 4
    55b8:	19 f4       	brne	.+6      	; 0x55c0 <__mulsf3+0x4e>
    55ba:	82 30       	cpi	r24, 0x02	; 2
    55bc:	41 f4       	brne	.+16     	; 0x55ce <__mulsf3+0x5c>
    55be:	cb c0       	rjmp	.+406    	; 0x5756 <__mulsf3+0x1e4>
    55c0:	84 30       	cpi	r24, 0x04	; 4
    55c2:	19 f4       	brne	.+6      	; 0x55ca <__mulsf3+0x58>
    55c4:	92 30       	cpi	r25, 0x02	; 2
    55c6:	79 f4       	brne	.+30     	; 0x55e6 <__mulsf3+0x74>
    55c8:	c6 c0       	rjmp	.+396    	; 0x5756 <__mulsf3+0x1e4>
    55ca:	92 30       	cpi	r25, 0x02	; 2
    55cc:	51 f4       	brne	.+20     	; 0x55e2 <__mulsf3+0x70>
    55ce:	81 e0       	ldi	r24, 0x01	; 1
    55d0:	2a 85       	ldd	r18, Y+10	; 0x0a
    55d2:	9a 89       	ldd	r25, Y+18	; 0x12
    55d4:	29 17       	cp	r18, r25
    55d6:	09 f4       	brne	.+2      	; 0x55da <__mulsf3+0x68>
    55d8:	80 e0       	ldi	r24, 0x00	; 0
    55da:	8a 87       	std	Y+10, r24	; 0x0a
    55dc:	ce 01       	movw	r24, r28
    55de:	09 96       	adiw	r24, 0x09	; 9
    55e0:	bc c0       	rjmp	.+376    	; 0x575a <__mulsf3+0x1e8>
    55e2:	82 30       	cpi	r24, 0x02	; 2
    55e4:	51 f4       	brne	.+20     	; 0x55fa <__mulsf3+0x88>
    55e6:	81 e0       	ldi	r24, 0x01	; 1
    55e8:	2a 85       	ldd	r18, Y+10	; 0x0a
    55ea:	9a 89       	ldd	r25, Y+18	; 0x12
    55ec:	29 17       	cp	r18, r25
    55ee:	09 f4       	brne	.+2      	; 0x55f2 <__mulsf3+0x80>
    55f0:	80 e0       	ldi	r24, 0x00	; 0
    55f2:	8a 8b       	std	Y+18, r24	; 0x12
    55f4:	ce 01       	movw	r24, r28
    55f6:	41 96       	adiw	r24, 0x11	; 17
    55f8:	b0 c0       	rjmp	.+352    	; 0x575a <__mulsf3+0x1e8>
    55fa:	6d 84       	ldd	r6, Y+13	; 0x0d
    55fc:	7e 84       	ldd	r7, Y+14	; 0x0e
    55fe:	8f 84       	ldd	r8, Y+15	; 0x0f
    5600:	98 88       	ldd	r9, Y+16	; 0x10
    5602:	ed 88       	ldd	r14, Y+21	; 0x15
    5604:	fe 88       	ldd	r15, Y+22	; 0x16
    5606:	0f 89       	ldd	r16, Y+23	; 0x17
    5608:	18 8d       	ldd	r17, Y+24	; 0x18
    560a:	e0 e2       	ldi	r30, 0x20	; 32
    560c:	f0 e0       	ldi	r31, 0x00	; 0
    560e:	80 e0       	ldi	r24, 0x00	; 0
    5610:	90 e0       	ldi	r25, 0x00	; 0
    5612:	dc 01       	movw	r26, r24
    5614:	aa 24       	eor	r10, r10
    5616:	bb 24       	eor	r11, r11
    5618:	65 01       	movw	r12, r10
    561a:	20 e0       	ldi	r18, 0x00	; 0
    561c:	30 e0       	ldi	r19, 0x00	; 0
    561e:	a9 01       	movw	r20, r18
    5620:	b3 01       	movw	r22, r6
    5622:	61 70       	andi	r22, 0x01	; 1
    5624:	70 70       	andi	r23, 0x00	; 0
    5626:	61 15       	cp	r22, r1
    5628:	71 05       	cpc	r23, r1
    562a:	d1 f0       	breq	.+52     	; 0x5660 <__mulsf3+0xee>
    562c:	2e 0d       	add	r18, r14
    562e:	3f 1d       	adc	r19, r15
    5630:	40 1f       	adc	r20, r16
    5632:	51 1f       	adc	r21, r17
    5634:	15 01       	movw	r2, r10
    5636:	26 01       	movw	r4, r12
    5638:	28 0e       	add	r2, r24
    563a:	39 1e       	adc	r3, r25
    563c:	4a 1e       	adc	r4, r26
    563e:	5b 1e       	adc	r5, r27
    5640:	81 e0       	ldi	r24, 0x01	; 1
    5642:	90 e0       	ldi	r25, 0x00	; 0
    5644:	a0 e0       	ldi	r26, 0x00	; 0
    5646:	b0 e0       	ldi	r27, 0x00	; 0
    5648:	2e 15       	cp	r18, r14
    564a:	3f 05       	cpc	r19, r15
    564c:	40 07       	cpc	r20, r16
    564e:	51 07       	cpc	r21, r17
    5650:	18 f0       	brcs	.+6      	; 0x5658 <__mulsf3+0xe6>
    5652:	80 e0       	ldi	r24, 0x00	; 0
    5654:	90 e0       	ldi	r25, 0x00	; 0
    5656:	dc 01       	movw	r26, r24
    5658:	82 0d       	add	r24, r2
    565a:	93 1d       	adc	r25, r3
    565c:	a4 1d       	adc	r26, r4
    565e:	b5 1d       	adc	r27, r5
    5660:	aa 0c       	add	r10, r10
    5662:	bb 1c       	adc	r11, r11
    5664:	cc 1c       	adc	r12, r12
    5666:	dd 1c       	adc	r13, r13
    5668:	17 ff       	sbrs	r17, 7
    566a:	09 c0       	rjmp	.+18     	; 0x567e <__mulsf3+0x10c>
    566c:	61 e0       	ldi	r22, 0x01	; 1
    566e:	26 2e       	mov	r2, r22
    5670:	31 2c       	mov	r3, r1
    5672:	41 2c       	mov	r4, r1
    5674:	51 2c       	mov	r5, r1
    5676:	a2 28       	or	r10, r2
    5678:	b3 28       	or	r11, r3
    567a:	c4 28       	or	r12, r4
    567c:	d5 28       	or	r13, r5
    567e:	31 97       	sbiw	r30, 0x01	; 1
    5680:	49 f0       	breq	.+18     	; 0x5694 <__mulsf3+0x122>
    5682:	ee 0c       	add	r14, r14
    5684:	ff 1c       	adc	r15, r15
    5686:	00 1f       	adc	r16, r16
    5688:	11 1f       	adc	r17, r17
    568a:	96 94       	lsr	r9
    568c:	87 94       	ror	r8
    568e:	77 94       	ror	r7
    5690:	67 94       	ror	r6
    5692:	c6 cf       	rjmp	.-116    	; 0x5620 <__mulsf3+0xae>
    5694:	6b 89       	ldd	r22, Y+19	; 0x13
    5696:	7c 89       	ldd	r23, Y+20	; 0x14
    5698:	eb 85       	ldd	r30, Y+11	; 0x0b
    569a:	fc 85       	ldd	r31, Y+12	; 0x0c
    569c:	6e 0f       	add	r22, r30
    569e:	7f 1f       	adc	r23, r31
    56a0:	6e 5f       	subi	r22, 0xFE	; 254
    56a2:	7f 4f       	sbci	r23, 0xFF	; 255
    56a4:	7c 8f       	std	Y+28, r23	; 0x1c
    56a6:	6b 8f       	std	Y+27, r22	; 0x1b
    56a8:	61 e0       	ldi	r22, 0x01	; 1
    56aa:	ea 85       	ldd	r30, Y+10	; 0x0a
    56ac:	7a 89       	ldd	r23, Y+18	; 0x12
    56ae:	e7 17       	cp	r30, r23
    56b0:	09 f4       	brne	.+2      	; 0x56b4 <__mulsf3+0x142>
    56b2:	60 e0       	ldi	r22, 0x00	; 0
    56b4:	6a 8f       	std	Y+26, r22	; 0x1a
    56b6:	6b 8d       	ldd	r22, Y+27	; 0x1b
    56b8:	7c 8d       	ldd	r23, Y+28	; 0x1c
    56ba:	10 c0       	rjmp	.+32     	; 0x56dc <__mulsf3+0x16a>
    56bc:	fc 01       	movw	r30, r24
    56be:	e1 70       	andi	r30, 0x01	; 1
    56c0:	f0 70       	andi	r31, 0x00	; 0
    56c2:	30 97       	sbiw	r30, 0x00	; 0
    56c4:	29 f0       	breq	.+10     	; 0x56d0 <__mulsf3+0x15e>
    56c6:	56 95       	lsr	r21
    56c8:	47 95       	ror	r20
    56ca:	37 95       	ror	r19
    56cc:	27 95       	ror	r18
    56ce:	50 68       	ori	r21, 0x80	; 128
    56d0:	b6 95       	lsr	r27
    56d2:	a7 95       	ror	r26
    56d4:	97 95       	ror	r25
    56d6:	87 95       	ror	r24
    56d8:	6f 5f       	subi	r22, 0xFF	; 255
    56da:	7f 4f       	sbci	r23, 0xFF	; 255
    56dc:	b7 fd       	sbrc	r27, 7
    56de:	ee cf       	rjmp	.-36     	; 0x56bc <__mulsf3+0x14a>
    56e0:	0c c0       	rjmp	.+24     	; 0x56fa <__mulsf3+0x188>
    56e2:	88 0f       	add	r24, r24
    56e4:	99 1f       	adc	r25, r25
    56e6:	aa 1f       	adc	r26, r26
    56e8:	bb 1f       	adc	r27, r27
    56ea:	57 fd       	sbrc	r21, 7
    56ec:	81 60       	ori	r24, 0x01	; 1
    56ee:	22 0f       	add	r18, r18
    56f0:	33 1f       	adc	r19, r19
    56f2:	44 1f       	adc	r20, r20
    56f4:	55 1f       	adc	r21, r21
    56f6:	61 50       	subi	r22, 0x01	; 1
    56f8:	70 40       	sbci	r23, 0x00	; 0
    56fa:	80 30       	cpi	r24, 0x00	; 0
    56fc:	e0 e0       	ldi	r30, 0x00	; 0
    56fe:	9e 07       	cpc	r25, r30
    5700:	e0 e0       	ldi	r30, 0x00	; 0
    5702:	ae 07       	cpc	r26, r30
    5704:	e0 e4       	ldi	r30, 0x40	; 64
    5706:	be 07       	cpc	r27, r30
    5708:	60 f3       	brcs	.-40     	; 0x56e2 <__mulsf3+0x170>
    570a:	6b 8f       	std	Y+27, r22	; 0x1b
    570c:	7c 8f       	std	Y+28, r23	; 0x1c
    570e:	6f e7       	ldi	r22, 0x7F	; 127
    5710:	e6 2e       	mov	r14, r22
    5712:	f1 2c       	mov	r15, r1
    5714:	01 2d       	mov	r16, r1
    5716:	11 2d       	mov	r17, r1
    5718:	e8 22       	and	r14, r24
    571a:	f9 22       	and	r15, r25
    571c:	0a 23       	and	r16, r26
    571e:	1b 23       	and	r17, r27
    5720:	60 e4       	ldi	r22, 0x40	; 64
    5722:	e6 16       	cp	r14, r22
    5724:	f1 04       	cpc	r15, r1
    5726:	01 05       	cpc	r16, r1
    5728:	11 05       	cpc	r17, r1
    572a:	61 f4       	brne	.+24     	; 0x5744 <__mulsf3+0x1d2>
    572c:	87 fd       	sbrc	r24, 7
    572e:	0a c0       	rjmp	.+20     	; 0x5744 <__mulsf3+0x1d2>
    5730:	21 15       	cp	r18, r1
    5732:	31 05       	cpc	r19, r1
    5734:	41 05       	cpc	r20, r1
    5736:	51 05       	cpc	r21, r1
    5738:	29 f0       	breq	.+10     	; 0x5744 <__mulsf3+0x1d2>
    573a:	80 5c       	subi	r24, 0xC0	; 192
    573c:	9f 4f       	sbci	r25, 0xFF	; 255
    573e:	af 4f       	sbci	r26, 0xFF	; 255
    5740:	bf 4f       	sbci	r27, 0xFF	; 255
    5742:	80 78       	andi	r24, 0x80	; 128
    5744:	8d 8f       	std	Y+29, r24	; 0x1d
    5746:	9e 8f       	std	Y+30, r25	; 0x1e
    5748:	af 8f       	std	Y+31, r26	; 0x1f
    574a:	b8 a3       	std	Y+32, r27	; 0x20
    574c:	83 e0       	ldi	r24, 0x03	; 3
    574e:	89 8f       	std	Y+25, r24	; 0x19
    5750:	ce 01       	movw	r24, r28
    5752:	49 96       	adiw	r24, 0x19	; 25
    5754:	02 c0       	rjmp	.+4      	; 0x575a <__mulsf3+0x1e8>
    5756:	89 e6       	ldi	r24, 0x69	; 105
    5758:	91 e0       	ldi	r25, 0x01	; 1
    575a:	0e 94 67 2d 	call	0x5ace	; 0x5ace <__pack_f>
    575e:	a0 96       	adiw	r28, 0x20	; 32
    5760:	e2 e1       	ldi	r30, 0x12	; 18
    5762:	0c 94 13 2f 	jmp	0x5e26	; 0x5e26 <__epilogue_restores__>

00005766 <__gesf2>:
    5766:	a8 e1       	ldi	r26, 0x18	; 24
    5768:	b0 e0       	ldi	r27, 0x00	; 0
    576a:	e9 eb       	ldi	r30, 0xB9	; 185
    576c:	fb e2       	ldi	r31, 0x2B	; 43
    576e:	0c 94 03 2f 	jmp	0x5e06	; 0x5e06 <__prologue_saves__+0x18>
    5772:	69 83       	std	Y+1, r22	; 0x01
    5774:	7a 83       	std	Y+2, r23	; 0x02
    5776:	8b 83       	std	Y+3, r24	; 0x03
    5778:	9c 83       	std	Y+4, r25	; 0x04
    577a:	2d 83       	std	Y+5, r18	; 0x05
    577c:	3e 83       	std	Y+6, r19	; 0x06
    577e:	4f 83       	std	Y+7, r20	; 0x07
    5780:	58 87       	std	Y+8, r21	; 0x08
    5782:	8e 01       	movw	r16, r28
    5784:	07 5f       	subi	r16, 0xF7	; 247
    5786:	1f 4f       	sbci	r17, 0xFF	; 255
    5788:	ce 01       	movw	r24, r28
    578a:	01 96       	adiw	r24, 0x01	; 1
    578c:	b8 01       	movw	r22, r16
    578e:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__unpack_f>
    5792:	81 e1       	ldi	r24, 0x11	; 17
    5794:	e8 2e       	mov	r14, r24
    5796:	f1 2c       	mov	r15, r1
    5798:	ec 0e       	add	r14, r28
    579a:	fd 1e       	adc	r15, r29
    579c:	ce 01       	movw	r24, r28
    579e:	05 96       	adiw	r24, 0x05	; 5
    57a0:	b7 01       	movw	r22, r14
    57a2:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__unpack_f>
    57a6:	89 85       	ldd	r24, Y+9	; 0x09
    57a8:	82 30       	cpi	r24, 0x02	; 2
    57aa:	40 f0       	brcs	.+16     	; 0x57bc <__gesf2+0x56>
    57ac:	89 89       	ldd	r24, Y+17	; 0x11
    57ae:	82 30       	cpi	r24, 0x02	; 2
    57b0:	28 f0       	brcs	.+10     	; 0x57bc <__gesf2+0x56>
    57b2:	c8 01       	movw	r24, r16
    57b4:	b7 01       	movw	r22, r14
    57b6:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <__fpcmp_parts_f>
    57ba:	01 c0       	rjmp	.+2      	; 0x57be <__gesf2+0x58>
    57bc:	8f ef       	ldi	r24, 0xFF	; 255
    57be:	68 96       	adiw	r28, 0x18	; 24
    57c0:	e6 e0       	ldi	r30, 0x06	; 6
    57c2:	0c 94 1f 2f 	jmp	0x5e3e	; 0x5e3e <__epilogue_restores__+0x18>

000057c6 <__floatsisf>:
    57c6:	a8 e0       	ldi	r26, 0x08	; 8
    57c8:	b0 e0       	ldi	r27, 0x00	; 0
    57ca:	e9 ee       	ldi	r30, 0xE9	; 233
    57cc:	fb e2       	ldi	r31, 0x2B	; 43
    57ce:	0c 94 03 2f 	jmp	0x5e06	; 0x5e06 <__prologue_saves__+0x18>
    57d2:	7b 01       	movw	r14, r22
    57d4:	8c 01       	movw	r16, r24
    57d6:	83 e0       	ldi	r24, 0x03	; 3
    57d8:	89 83       	std	Y+1, r24	; 0x01
    57da:	d8 01       	movw	r26, r16
    57dc:	c7 01       	movw	r24, r14
    57de:	88 27       	eor	r24, r24
    57e0:	b7 fd       	sbrc	r27, 7
    57e2:	83 95       	inc	r24
    57e4:	99 27       	eor	r25, r25
    57e6:	aa 27       	eor	r26, r26
    57e8:	bb 27       	eor	r27, r27
    57ea:	28 2f       	mov	r18, r24
    57ec:	8a 83       	std	Y+2, r24	; 0x02
    57ee:	e1 14       	cp	r14, r1
    57f0:	f1 04       	cpc	r15, r1
    57f2:	01 05       	cpc	r16, r1
    57f4:	11 05       	cpc	r17, r1
    57f6:	19 f4       	brne	.+6      	; 0x57fe <__floatsisf+0x38>
    57f8:	82 e0       	ldi	r24, 0x02	; 2
    57fa:	89 83       	std	Y+1, r24	; 0x01
    57fc:	37 c0       	rjmp	.+110    	; 0x586c <__floatsisf+0xa6>
    57fe:	8e e1       	ldi	r24, 0x1E	; 30
    5800:	90 e0       	ldi	r25, 0x00	; 0
    5802:	9c 83       	std	Y+4, r25	; 0x04
    5804:	8b 83       	std	Y+3, r24	; 0x03
    5806:	22 23       	and	r18, r18
    5808:	89 f0       	breq	.+34     	; 0x582c <__floatsisf+0x66>
    580a:	80 e0       	ldi	r24, 0x00	; 0
    580c:	e8 16       	cp	r14, r24
    580e:	80 e0       	ldi	r24, 0x00	; 0
    5810:	f8 06       	cpc	r15, r24
    5812:	80 e0       	ldi	r24, 0x00	; 0
    5814:	08 07       	cpc	r16, r24
    5816:	80 e8       	ldi	r24, 0x80	; 128
    5818:	18 07       	cpc	r17, r24
    581a:	69 f1       	breq	.+90     	; 0x5876 <__floatsisf+0xb0>
    581c:	10 95       	com	r17
    581e:	00 95       	com	r16
    5820:	f0 94       	com	r15
    5822:	e0 94       	com	r14
    5824:	e1 1c       	adc	r14, r1
    5826:	f1 1c       	adc	r15, r1
    5828:	01 1d       	adc	r16, r1
    582a:	11 1d       	adc	r17, r1
    582c:	ed 82       	std	Y+5, r14	; 0x05
    582e:	fe 82       	std	Y+6, r15	; 0x06
    5830:	0f 83       	std	Y+7, r16	; 0x07
    5832:	18 87       	std	Y+8, r17	; 0x08
    5834:	c8 01       	movw	r24, r16
    5836:	b7 01       	movw	r22, r14
    5838:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <__clzsi2>
    583c:	9c 01       	movw	r18, r24
    583e:	21 50       	subi	r18, 0x01	; 1
    5840:	30 40       	sbci	r19, 0x00	; 0
    5842:	12 16       	cp	r1, r18
    5844:	13 06       	cpc	r1, r19
    5846:	94 f4       	brge	.+36     	; 0x586c <__floatsisf+0xa6>
    5848:	02 2e       	mov	r0, r18
    584a:	04 c0       	rjmp	.+8      	; 0x5854 <__floatsisf+0x8e>
    584c:	ee 0c       	add	r14, r14
    584e:	ff 1c       	adc	r15, r15
    5850:	00 1f       	adc	r16, r16
    5852:	11 1f       	adc	r17, r17
    5854:	0a 94       	dec	r0
    5856:	d2 f7       	brpl	.-12     	; 0x584c <__floatsisf+0x86>
    5858:	ed 82       	std	Y+5, r14	; 0x05
    585a:	fe 82       	std	Y+6, r15	; 0x06
    585c:	0f 83       	std	Y+7, r16	; 0x07
    585e:	18 87       	std	Y+8, r17	; 0x08
    5860:	8e e1       	ldi	r24, 0x1E	; 30
    5862:	90 e0       	ldi	r25, 0x00	; 0
    5864:	82 1b       	sub	r24, r18
    5866:	93 0b       	sbc	r25, r19
    5868:	9c 83       	std	Y+4, r25	; 0x04
    586a:	8b 83       	std	Y+3, r24	; 0x03
    586c:	ce 01       	movw	r24, r28
    586e:	01 96       	adiw	r24, 0x01	; 1
    5870:	0e 94 67 2d 	call	0x5ace	; 0x5ace <__pack_f>
    5874:	04 c0       	rjmp	.+8      	; 0x587e <__floatsisf+0xb8>
    5876:	60 e0       	ldi	r22, 0x00	; 0
    5878:	70 e0       	ldi	r23, 0x00	; 0
    587a:	80 e0       	ldi	r24, 0x00	; 0
    587c:	9f ec       	ldi	r25, 0xCF	; 207
    587e:	28 96       	adiw	r28, 0x08	; 8
    5880:	e6 e0       	ldi	r30, 0x06	; 6
    5882:	0c 94 1f 2f 	jmp	0x5e3e	; 0x5e3e <__epilogue_restores__+0x18>

00005886 <__fixsfsi>:
    5886:	ac e0       	ldi	r26, 0x0C	; 12
    5888:	b0 e0       	ldi	r27, 0x00	; 0
    588a:	e9 e4       	ldi	r30, 0x49	; 73
    588c:	fc e2       	ldi	r31, 0x2C	; 44
    588e:	0c 94 07 2f 	jmp	0x5e0e	; 0x5e0e <__prologue_saves__+0x20>
    5892:	69 83       	std	Y+1, r22	; 0x01
    5894:	7a 83       	std	Y+2, r23	; 0x02
    5896:	8b 83       	std	Y+3, r24	; 0x03
    5898:	9c 83       	std	Y+4, r25	; 0x04
    589a:	ce 01       	movw	r24, r28
    589c:	01 96       	adiw	r24, 0x01	; 1
    589e:	be 01       	movw	r22, r28
    58a0:	6b 5f       	subi	r22, 0xFB	; 251
    58a2:	7f 4f       	sbci	r23, 0xFF	; 255
    58a4:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__unpack_f>
    58a8:	8d 81       	ldd	r24, Y+5	; 0x05
    58aa:	82 30       	cpi	r24, 0x02	; 2
    58ac:	81 f1       	breq	.+96     	; 0x590e <__fixsfsi+0x88>
    58ae:	82 30       	cpi	r24, 0x02	; 2
    58b0:	70 f1       	brcs	.+92     	; 0x590e <__fixsfsi+0x88>
    58b2:	84 30       	cpi	r24, 0x04	; 4
    58b4:	21 f4       	brne	.+8      	; 0x58be <__fixsfsi+0x38>
    58b6:	8e 81       	ldd	r24, Y+6	; 0x06
    58b8:	88 23       	and	r24, r24
    58ba:	69 f1       	breq	.+90     	; 0x5916 <__fixsfsi+0x90>
    58bc:	0a c0       	rjmp	.+20     	; 0x58d2 <__fixsfsi+0x4c>
    58be:	2f 81       	ldd	r18, Y+7	; 0x07
    58c0:	38 85       	ldd	r19, Y+8	; 0x08
    58c2:	37 fd       	sbrc	r19, 7
    58c4:	24 c0       	rjmp	.+72     	; 0x590e <__fixsfsi+0x88>
    58c6:	6e 81       	ldd	r22, Y+6	; 0x06
    58c8:	2f 31       	cpi	r18, 0x1F	; 31
    58ca:	31 05       	cpc	r19, r1
    58cc:	3c f0       	brlt	.+14     	; 0x58dc <__fixsfsi+0x56>
    58ce:	66 23       	and	r22, r22
    58d0:	11 f1       	breq	.+68     	; 0x5916 <__fixsfsi+0x90>
    58d2:	20 e0       	ldi	r18, 0x00	; 0
    58d4:	30 e0       	ldi	r19, 0x00	; 0
    58d6:	40 e0       	ldi	r20, 0x00	; 0
    58d8:	50 e8       	ldi	r21, 0x80	; 128
    58da:	21 c0       	rjmp	.+66     	; 0x591e <__fixsfsi+0x98>
    58dc:	8e e1       	ldi	r24, 0x1E	; 30
    58de:	90 e0       	ldi	r25, 0x00	; 0
    58e0:	82 1b       	sub	r24, r18
    58e2:	93 0b       	sbc	r25, r19
    58e4:	29 85       	ldd	r18, Y+9	; 0x09
    58e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    58e8:	4b 85       	ldd	r20, Y+11	; 0x0b
    58ea:	5c 85       	ldd	r21, Y+12	; 0x0c
    58ec:	04 c0       	rjmp	.+8      	; 0x58f6 <__fixsfsi+0x70>
    58ee:	56 95       	lsr	r21
    58f0:	47 95       	ror	r20
    58f2:	37 95       	ror	r19
    58f4:	27 95       	ror	r18
    58f6:	8a 95       	dec	r24
    58f8:	d2 f7       	brpl	.-12     	; 0x58ee <__fixsfsi+0x68>
    58fa:	66 23       	and	r22, r22
    58fc:	81 f0       	breq	.+32     	; 0x591e <__fixsfsi+0x98>
    58fe:	50 95       	com	r21
    5900:	40 95       	com	r20
    5902:	30 95       	com	r19
    5904:	21 95       	neg	r18
    5906:	3f 4f       	sbci	r19, 0xFF	; 255
    5908:	4f 4f       	sbci	r20, 0xFF	; 255
    590a:	5f 4f       	sbci	r21, 0xFF	; 255
    590c:	08 c0       	rjmp	.+16     	; 0x591e <__fixsfsi+0x98>
    590e:	20 e0       	ldi	r18, 0x00	; 0
    5910:	30 e0       	ldi	r19, 0x00	; 0
    5912:	a9 01       	movw	r20, r18
    5914:	04 c0       	rjmp	.+8      	; 0x591e <__fixsfsi+0x98>
    5916:	2f ef       	ldi	r18, 0xFF	; 255
    5918:	3f ef       	ldi	r19, 0xFF	; 255
    591a:	4f ef       	ldi	r20, 0xFF	; 255
    591c:	5f e7       	ldi	r21, 0x7F	; 127
    591e:	b9 01       	movw	r22, r18
    5920:	ca 01       	movw	r24, r20
    5922:	2c 96       	adiw	r28, 0x0c	; 12
    5924:	e2 e0       	ldi	r30, 0x02	; 2
    5926:	0c 94 23 2f 	jmp	0x5e46	; 0x5e46 <__epilogue_restores__+0x20>

0000592a <__floatunsisf>:
    592a:	a8 e0       	ldi	r26, 0x08	; 8
    592c:	b0 e0       	ldi	r27, 0x00	; 0
    592e:	eb e9       	ldi	r30, 0x9B	; 155
    5930:	fc e2       	ldi	r31, 0x2C	; 44
    5932:	0c 94 01 2f 	jmp	0x5e02	; 0x5e02 <__prologue_saves__+0x14>
    5936:	7b 01       	movw	r14, r22
    5938:	8c 01       	movw	r16, r24
    593a:	1a 82       	std	Y+2, r1	; 0x02
    593c:	61 15       	cp	r22, r1
    593e:	71 05       	cpc	r23, r1
    5940:	81 05       	cpc	r24, r1
    5942:	91 05       	cpc	r25, r1
    5944:	19 f4       	brne	.+6      	; 0x594c <__floatunsisf+0x22>
    5946:	82 e0       	ldi	r24, 0x02	; 2
    5948:	89 83       	std	Y+1, r24	; 0x01
    594a:	5f c0       	rjmp	.+190    	; 0x5a0a <__floatunsisf+0xe0>
    594c:	83 e0       	ldi	r24, 0x03	; 3
    594e:	89 83       	std	Y+1, r24	; 0x01
    5950:	8e e1       	ldi	r24, 0x1E	; 30
    5952:	c8 2e       	mov	r12, r24
    5954:	d1 2c       	mov	r13, r1
    5956:	dc 82       	std	Y+4, r13	; 0x04
    5958:	cb 82       	std	Y+3, r12	; 0x03
    595a:	ed 82       	std	Y+5, r14	; 0x05
    595c:	fe 82       	std	Y+6, r15	; 0x06
    595e:	0f 83       	std	Y+7, r16	; 0x07
    5960:	18 87       	std	Y+8, r17	; 0x08
    5962:	c8 01       	movw	r24, r16
    5964:	b7 01       	movw	r22, r14
    5966:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <__clzsi2>
    596a:	fc 01       	movw	r30, r24
    596c:	31 97       	sbiw	r30, 0x01	; 1
    596e:	f7 ff       	sbrs	r31, 7
    5970:	3a c0       	rjmp	.+116    	; 0x59e6 <__floatunsisf+0xbc>
    5972:	aa 27       	eor	r26, r26
    5974:	bb 27       	eor	r27, r27
    5976:	ae 1b       	sub	r26, r30
    5978:	bf 0b       	sbc	r27, r31
    597a:	21 e0       	ldi	r18, 0x01	; 1
    597c:	30 e0       	ldi	r19, 0x00	; 0
    597e:	40 e0       	ldi	r20, 0x00	; 0
    5980:	50 e0       	ldi	r21, 0x00	; 0
    5982:	0a 2e       	mov	r0, r26
    5984:	04 c0       	rjmp	.+8      	; 0x598e <__floatunsisf+0x64>
    5986:	22 0f       	add	r18, r18
    5988:	33 1f       	adc	r19, r19
    598a:	44 1f       	adc	r20, r20
    598c:	55 1f       	adc	r21, r21
    598e:	0a 94       	dec	r0
    5990:	d2 f7       	brpl	.-12     	; 0x5986 <__floatunsisf+0x5c>
    5992:	21 50       	subi	r18, 0x01	; 1
    5994:	30 40       	sbci	r19, 0x00	; 0
    5996:	40 40       	sbci	r20, 0x00	; 0
    5998:	50 40       	sbci	r21, 0x00	; 0
    599a:	2e 21       	and	r18, r14
    599c:	3f 21       	and	r19, r15
    599e:	40 23       	and	r20, r16
    59a0:	51 23       	and	r21, r17
    59a2:	61 e0       	ldi	r22, 0x01	; 1
    59a4:	70 e0       	ldi	r23, 0x00	; 0
    59a6:	80 e0       	ldi	r24, 0x00	; 0
    59a8:	90 e0       	ldi	r25, 0x00	; 0
    59aa:	21 15       	cp	r18, r1
    59ac:	31 05       	cpc	r19, r1
    59ae:	41 05       	cpc	r20, r1
    59b0:	51 05       	cpc	r21, r1
    59b2:	19 f4       	brne	.+6      	; 0x59ba <__floatunsisf+0x90>
    59b4:	60 e0       	ldi	r22, 0x00	; 0
    59b6:	70 e0       	ldi	r23, 0x00	; 0
    59b8:	cb 01       	movw	r24, r22
    59ba:	04 c0       	rjmp	.+8      	; 0x59c4 <__floatunsisf+0x9a>
    59bc:	16 95       	lsr	r17
    59be:	07 95       	ror	r16
    59c0:	f7 94       	ror	r15
    59c2:	e7 94       	ror	r14
    59c4:	aa 95       	dec	r26
    59c6:	d2 f7       	brpl	.-12     	; 0x59bc <__floatunsisf+0x92>
    59c8:	e6 2a       	or	r14, r22
    59ca:	f7 2a       	or	r15, r23
    59cc:	08 2b       	or	r16, r24
    59ce:	19 2b       	or	r17, r25
    59d0:	ed 82       	std	Y+5, r14	; 0x05
    59d2:	fe 82       	std	Y+6, r15	; 0x06
    59d4:	0f 83       	std	Y+7, r16	; 0x07
    59d6:	18 87       	std	Y+8, r17	; 0x08
    59d8:	8e e1       	ldi	r24, 0x1E	; 30
    59da:	90 e0       	ldi	r25, 0x00	; 0
    59dc:	8e 1b       	sub	r24, r30
    59de:	9f 0b       	sbc	r25, r31
    59e0:	9c 83       	std	Y+4, r25	; 0x04
    59e2:	8b 83       	std	Y+3, r24	; 0x03
    59e4:	12 c0       	rjmp	.+36     	; 0x5a0a <__floatunsisf+0xe0>
    59e6:	30 97       	sbiw	r30, 0x00	; 0
    59e8:	81 f0       	breq	.+32     	; 0x5a0a <__floatunsisf+0xe0>
    59ea:	0e 2e       	mov	r0, r30
    59ec:	04 c0       	rjmp	.+8      	; 0x59f6 <__floatunsisf+0xcc>
    59ee:	ee 0c       	add	r14, r14
    59f0:	ff 1c       	adc	r15, r15
    59f2:	00 1f       	adc	r16, r16
    59f4:	11 1f       	adc	r17, r17
    59f6:	0a 94       	dec	r0
    59f8:	d2 f7       	brpl	.-12     	; 0x59ee <__floatunsisf+0xc4>
    59fa:	ed 82       	std	Y+5, r14	; 0x05
    59fc:	fe 82       	std	Y+6, r15	; 0x06
    59fe:	0f 83       	std	Y+7, r16	; 0x07
    5a00:	18 87       	std	Y+8, r17	; 0x08
    5a02:	ce 1a       	sub	r12, r30
    5a04:	df 0a       	sbc	r13, r31
    5a06:	dc 82       	std	Y+4, r13	; 0x04
    5a08:	cb 82       	std	Y+3, r12	; 0x03
    5a0a:	ce 01       	movw	r24, r28
    5a0c:	01 96       	adiw	r24, 0x01	; 1
    5a0e:	0e 94 67 2d 	call	0x5ace	; 0x5ace <__pack_f>
    5a12:	28 96       	adiw	r28, 0x08	; 8
    5a14:	e8 e0       	ldi	r30, 0x08	; 8
    5a16:	0c 94 1d 2f 	jmp	0x5e3a	; 0x5e3a <__epilogue_restores__+0x14>

00005a1a <__clzsi2>:
    5a1a:	af 92       	push	r10
    5a1c:	bf 92       	push	r11
    5a1e:	cf 92       	push	r12
    5a20:	df 92       	push	r13
    5a22:	ef 92       	push	r14
    5a24:	ff 92       	push	r15
    5a26:	0f 93       	push	r16
    5a28:	1f 93       	push	r17
    5a2a:	7b 01       	movw	r14, r22
    5a2c:	8c 01       	movw	r16, r24
    5a2e:	80 e0       	ldi	r24, 0x00	; 0
    5a30:	e8 16       	cp	r14, r24
    5a32:	80 e0       	ldi	r24, 0x00	; 0
    5a34:	f8 06       	cpc	r15, r24
    5a36:	81 e0       	ldi	r24, 0x01	; 1
    5a38:	08 07       	cpc	r16, r24
    5a3a:	80 e0       	ldi	r24, 0x00	; 0
    5a3c:	18 07       	cpc	r17, r24
    5a3e:	58 f4       	brcc	.+22     	; 0x5a56 <__clzsi2+0x3c>
    5a40:	ef ef       	ldi	r30, 0xFF	; 255
    5a42:	ee 16       	cp	r14, r30
    5a44:	f1 04       	cpc	r15, r1
    5a46:	01 05       	cpc	r16, r1
    5a48:	11 05       	cpc	r17, r1
    5a4a:	09 f0       	breq	.+2      	; 0x5a4e <__clzsi2+0x34>
    5a4c:	90 f4       	brcc	.+36     	; 0x5a72 <__clzsi2+0x58>
    5a4e:	80 e0       	ldi	r24, 0x00	; 0
    5a50:	90 e0       	ldi	r25, 0x00	; 0
    5a52:	dc 01       	movw	r26, r24
    5a54:	17 c0       	rjmp	.+46     	; 0x5a84 <__clzsi2+0x6a>
    5a56:	f0 e0       	ldi	r31, 0x00	; 0
    5a58:	ef 16       	cp	r14, r31
    5a5a:	f0 e0       	ldi	r31, 0x00	; 0
    5a5c:	ff 06       	cpc	r15, r31
    5a5e:	f0 e0       	ldi	r31, 0x00	; 0
    5a60:	0f 07       	cpc	r16, r31
    5a62:	f1 e0       	ldi	r31, 0x01	; 1
    5a64:	1f 07       	cpc	r17, r31
    5a66:	50 f4       	brcc	.+20     	; 0x5a7c <__clzsi2+0x62>
    5a68:	80 e1       	ldi	r24, 0x10	; 16
    5a6a:	90 e0       	ldi	r25, 0x00	; 0
    5a6c:	a0 e0       	ldi	r26, 0x00	; 0
    5a6e:	b0 e0       	ldi	r27, 0x00	; 0
    5a70:	09 c0       	rjmp	.+18     	; 0x5a84 <__clzsi2+0x6a>
    5a72:	88 e0       	ldi	r24, 0x08	; 8
    5a74:	90 e0       	ldi	r25, 0x00	; 0
    5a76:	a0 e0       	ldi	r26, 0x00	; 0
    5a78:	b0 e0       	ldi	r27, 0x00	; 0
    5a7a:	04 c0       	rjmp	.+8      	; 0x5a84 <__clzsi2+0x6a>
    5a7c:	88 e1       	ldi	r24, 0x18	; 24
    5a7e:	90 e0       	ldi	r25, 0x00	; 0
    5a80:	a0 e0       	ldi	r26, 0x00	; 0
    5a82:	b0 e0       	ldi	r27, 0x00	; 0
    5a84:	20 e2       	ldi	r18, 0x20	; 32
    5a86:	30 e0       	ldi	r19, 0x00	; 0
    5a88:	40 e0       	ldi	r20, 0x00	; 0
    5a8a:	50 e0       	ldi	r21, 0x00	; 0
    5a8c:	28 1b       	sub	r18, r24
    5a8e:	39 0b       	sbc	r19, r25
    5a90:	4a 0b       	sbc	r20, r26
    5a92:	5b 0b       	sbc	r21, r27
    5a94:	57 01       	movw	r10, r14
    5a96:	68 01       	movw	r12, r16
    5a98:	04 c0       	rjmp	.+8      	; 0x5aa2 <__clzsi2+0x88>
    5a9a:	d6 94       	lsr	r13
    5a9c:	c7 94       	ror	r12
    5a9e:	b7 94       	ror	r11
    5aa0:	a7 94       	ror	r10
    5aa2:	8a 95       	dec	r24
    5aa4:	d2 f7       	brpl	.-12     	; 0x5a9a <__clzsi2+0x80>
    5aa6:	d6 01       	movw	r26, r12
    5aa8:	c5 01       	movw	r24, r10
    5aaa:	8f 58       	subi	r24, 0x8F	; 143
    5aac:	9e 4f       	sbci	r25, 0xFE	; 254
    5aae:	fc 01       	movw	r30, r24
    5ab0:	80 81       	ld	r24, Z
    5ab2:	28 1b       	sub	r18, r24
    5ab4:	31 09       	sbc	r19, r1
    5ab6:	41 09       	sbc	r20, r1
    5ab8:	51 09       	sbc	r21, r1
    5aba:	c9 01       	movw	r24, r18
    5abc:	1f 91       	pop	r17
    5abe:	0f 91       	pop	r16
    5ac0:	ff 90       	pop	r15
    5ac2:	ef 90       	pop	r14
    5ac4:	df 90       	pop	r13
    5ac6:	cf 90       	pop	r12
    5ac8:	bf 90       	pop	r11
    5aca:	af 90       	pop	r10
    5acc:	08 95       	ret

00005ace <__pack_f>:
    5ace:	ef 92       	push	r14
    5ad0:	ff 92       	push	r15
    5ad2:	0f 93       	push	r16
    5ad4:	1f 93       	push	r17
    5ad6:	cf 93       	push	r28
    5ad8:	df 93       	push	r29
    5ada:	fc 01       	movw	r30, r24
    5adc:	24 81       	ldd	r18, Z+4	; 0x04
    5ade:	35 81       	ldd	r19, Z+5	; 0x05
    5ae0:	46 81       	ldd	r20, Z+6	; 0x06
    5ae2:	57 81       	ldd	r21, Z+7	; 0x07
    5ae4:	61 81       	ldd	r22, Z+1	; 0x01
    5ae6:	80 81       	ld	r24, Z
    5ae8:	82 30       	cpi	r24, 0x02	; 2
    5aea:	20 f4       	brcc	.+8      	; 0x5af4 <__pack_f+0x26>
    5aec:	40 61       	ori	r20, 0x10	; 16
    5aee:	ef ef       	ldi	r30, 0xFF	; 255
    5af0:	f0 e0       	ldi	r31, 0x00	; 0
    5af2:	a3 c0       	rjmp	.+326    	; 0x5c3a <__pack_f+0x16c>
    5af4:	84 30       	cpi	r24, 0x04	; 4
    5af6:	09 f4       	brne	.+2      	; 0x5afa <__pack_f+0x2c>
    5af8:	9b c0       	rjmp	.+310    	; 0x5c30 <__pack_f+0x162>
    5afa:	82 30       	cpi	r24, 0x02	; 2
    5afc:	09 f4       	brne	.+2      	; 0x5b00 <__pack_f+0x32>
    5afe:	92 c0       	rjmp	.+292    	; 0x5c24 <__pack_f+0x156>
    5b00:	21 15       	cp	r18, r1
    5b02:	31 05       	cpc	r19, r1
    5b04:	41 05       	cpc	r20, r1
    5b06:	51 05       	cpc	r21, r1
    5b08:	09 f4       	brne	.+2      	; 0x5b0c <__pack_f+0x3e>
    5b0a:	8f c0       	rjmp	.+286    	; 0x5c2a <__pack_f+0x15c>
    5b0c:	02 80       	ldd	r0, Z+2	; 0x02
    5b0e:	f3 81       	ldd	r31, Z+3	; 0x03
    5b10:	e0 2d       	mov	r30, r0
    5b12:	8f ef       	ldi	r24, 0xFF	; 255
    5b14:	e2 38       	cpi	r30, 0x82	; 130
    5b16:	f8 07       	cpc	r31, r24
    5b18:	0c f0       	brlt	.+2      	; 0x5b1c <__pack_f+0x4e>
    5b1a:	5a c0       	rjmp	.+180    	; 0x5bd0 <__pack_f+0x102>
    5b1c:	c2 e8       	ldi	r28, 0x82	; 130
    5b1e:	df ef       	ldi	r29, 0xFF	; 255
    5b20:	ce 1b       	sub	r28, r30
    5b22:	df 0b       	sbc	r29, r31
    5b24:	ca 31       	cpi	r28, 0x1A	; 26
    5b26:	d1 05       	cpc	r29, r1
    5b28:	6c f5       	brge	.+90     	; 0x5b84 <__pack_f+0xb6>
    5b2a:	79 01       	movw	r14, r18
    5b2c:	8a 01       	movw	r16, r20
    5b2e:	0c 2e       	mov	r0, r28
    5b30:	04 c0       	rjmp	.+8      	; 0x5b3a <__pack_f+0x6c>
    5b32:	16 95       	lsr	r17
    5b34:	07 95       	ror	r16
    5b36:	f7 94       	ror	r15
    5b38:	e7 94       	ror	r14
    5b3a:	0a 94       	dec	r0
    5b3c:	d2 f7       	brpl	.-12     	; 0x5b32 <__pack_f+0x64>
    5b3e:	81 e0       	ldi	r24, 0x01	; 1
    5b40:	90 e0       	ldi	r25, 0x00	; 0
    5b42:	a0 e0       	ldi	r26, 0x00	; 0
    5b44:	b0 e0       	ldi	r27, 0x00	; 0
    5b46:	0c 2e       	mov	r0, r28
    5b48:	04 c0       	rjmp	.+8      	; 0x5b52 <__pack_f+0x84>
    5b4a:	88 0f       	add	r24, r24
    5b4c:	99 1f       	adc	r25, r25
    5b4e:	aa 1f       	adc	r26, r26
    5b50:	bb 1f       	adc	r27, r27
    5b52:	0a 94       	dec	r0
    5b54:	d2 f7       	brpl	.-12     	; 0x5b4a <__pack_f+0x7c>
    5b56:	01 97       	sbiw	r24, 0x01	; 1
    5b58:	a1 09       	sbc	r26, r1
    5b5a:	b1 09       	sbc	r27, r1
    5b5c:	82 23       	and	r24, r18
    5b5e:	93 23       	and	r25, r19
    5b60:	a4 23       	and	r26, r20
    5b62:	b5 23       	and	r27, r21
    5b64:	21 e0       	ldi	r18, 0x01	; 1
    5b66:	30 e0       	ldi	r19, 0x00	; 0
    5b68:	40 e0       	ldi	r20, 0x00	; 0
    5b6a:	50 e0       	ldi	r21, 0x00	; 0
    5b6c:	00 97       	sbiw	r24, 0x00	; 0
    5b6e:	a1 05       	cpc	r26, r1
    5b70:	b1 05       	cpc	r27, r1
    5b72:	19 f4       	brne	.+6      	; 0x5b7a <__pack_f+0xac>
    5b74:	20 e0       	ldi	r18, 0x00	; 0
    5b76:	30 e0       	ldi	r19, 0x00	; 0
    5b78:	a9 01       	movw	r20, r18
    5b7a:	2e 29       	or	r18, r14
    5b7c:	3f 29       	or	r19, r15
    5b7e:	40 2b       	or	r20, r16
    5b80:	51 2b       	or	r21, r17
    5b82:	03 c0       	rjmp	.+6      	; 0x5b8a <__pack_f+0xbc>
    5b84:	20 e0       	ldi	r18, 0x00	; 0
    5b86:	30 e0       	ldi	r19, 0x00	; 0
    5b88:	a9 01       	movw	r20, r18
    5b8a:	da 01       	movw	r26, r20
    5b8c:	c9 01       	movw	r24, r18
    5b8e:	8f 77       	andi	r24, 0x7F	; 127
    5b90:	90 70       	andi	r25, 0x00	; 0
    5b92:	a0 70       	andi	r26, 0x00	; 0
    5b94:	b0 70       	andi	r27, 0x00	; 0
    5b96:	80 34       	cpi	r24, 0x40	; 64
    5b98:	91 05       	cpc	r25, r1
    5b9a:	a1 05       	cpc	r26, r1
    5b9c:	b1 05       	cpc	r27, r1
    5b9e:	39 f4       	brne	.+14     	; 0x5bae <__pack_f+0xe0>
    5ba0:	27 ff       	sbrs	r18, 7
    5ba2:	09 c0       	rjmp	.+18     	; 0x5bb6 <__pack_f+0xe8>
    5ba4:	20 5c       	subi	r18, 0xC0	; 192
    5ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    5ba8:	4f 4f       	sbci	r20, 0xFF	; 255
    5baa:	5f 4f       	sbci	r21, 0xFF	; 255
    5bac:	04 c0       	rjmp	.+8      	; 0x5bb6 <__pack_f+0xe8>
    5bae:	21 5c       	subi	r18, 0xC1	; 193
    5bb0:	3f 4f       	sbci	r19, 0xFF	; 255
    5bb2:	4f 4f       	sbci	r20, 0xFF	; 255
    5bb4:	5f 4f       	sbci	r21, 0xFF	; 255
    5bb6:	e1 e0       	ldi	r30, 0x01	; 1
    5bb8:	f0 e0       	ldi	r31, 0x00	; 0
    5bba:	20 30       	cpi	r18, 0x00	; 0
    5bbc:	80 e0       	ldi	r24, 0x00	; 0
    5bbe:	38 07       	cpc	r19, r24
    5bc0:	80 e0       	ldi	r24, 0x00	; 0
    5bc2:	48 07       	cpc	r20, r24
    5bc4:	80 e4       	ldi	r24, 0x40	; 64
    5bc6:	58 07       	cpc	r21, r24
    5bc8:	28 f5       	brcc	.+74     	; 0x5c14 <__pack_f+0x146>
    5bca:	e0 e0       	ldi	r30, 0x00	; 0
    5bcc:	f0 e0       	ldi	r31, 0x00	; 0
    5bce:	22 c0       	rjmp	.+68     	; 0x5c14 <__pack_f+0x146>
    5bd0:	e0 38       	cpi	r30, 0x80	; 128
    5bd2:	f1 05       	cpc	r31, r1
    5bd4:	6c f5       	brge	.+90     	; 0x5c30 <__pack_f+0x162>
    5bd6:	e1 58       	subi	r30, 0x81	; 129
    5bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    5bda:	da 01       	movw	r26, r20
    5bdc:	c9 01       	movw	r24, r18
    5bde:	8f 77       	andi	r24, 0x7F	; 127
    5be0:	90 70       	andi	r25, 0x00	; 0
    5be2:	a0 70       	andi	r26, 0x00	; 0
    5be4:	b0 70       	andi	r27, 0x00	; 0
    5be6:	80 34       	cpi	r24, 0x40	; 64
    5be8:	91 05       	cpc	r25, r1
    5bea:	a1 05       	cpc	r26, r1
    5bec:	b1 05       	cpc	r27, r1
    5bee:	39 f4       	brne	.+14     	; 0x5bfe <__pack_f+0x130>
    5bf0:	27 ff       	sbrs	r18, 7
    5bf2:	09 c0       	rjmp	.+18     	; 0x5c06 <__pack_f+0x138>
    5bf4:	20 5c       	subi	r18, 0xC0	; 192
    5bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    5bf8:	4f 4f       	sbci	r20, 0xFF	; 255
    5bfa:	5f 4f       	sbci	r21, 0xFF	; 255
    5bfc:	04 c0       	rjmp	.+8      	; 0x5c06 <__pack_f+0x138>
    5bfe:	21 5c       	subi	r18, 0xC1	; 193
    5c00:	3f 4f       	sbci	r19, 0xFF	; 255
    5c02:	4f 4f       	sbci	r20, 0xFF	; 255
    5c04:	5f 4f       	sbci	r21, 0xFF	; 255
    5c06:	57 ff       	sbrs	r21, 7
    5c08:	05 c0       	rjmp	.+10     	; 0x5c14 <__pack_f+0x146>
    5c0a:	56 95       	lsr	r21
    5c0c:	47 95       	ror	r20
    5c0e:	37 95       	ror	r19
    5c10:	27 95       	ror	r18
    5c12:	31 96       	adiw	r30, 0x01	; 1
    5c14:	87 e0       	ldi	r24, 0x07	; 7
    5c16:	56 95       	lsr	r21
    5c18:	47 95       	ror	r20
    5c1a:	37 95       	ror	r19
    5c1c:	27 95       	ror	r18
    5c1e:	8a 95       	dec	r24
    5c20:	d1 f7       	brne	.-12     	; 0x5c16 <__pack_f+0x148>
    5c22:	0b c0       	rjmp	.+22     	; 0x5c3a <__pack_f+0x16c>
    5c24:	e0 e0       	ldi	r30, 0x00	; 0
    5c26:	f0 e0       	ldi	r31, 0x00	; 0
    5c28:	05 c0       	rjmp	.+10     	; 0x5c34 <__pack_f+0x166>
    5c2a:	e0 e0       	ldi	r30, 0x00	; 0
    5c2c:	f0 e0       	ldi	r31, 0x00	; 0
    5c2e:	05 c0       	rjmp	.+10     	; 0x5c3a <__pack_f+0x16c>
    5c30:	ef ef       	ldi	r30, 0xFF	; 255
    5c32:	f0 e0       	ldi	r31, 0x00	; 0
    5c34:	20 e0       	ldi	r18, 0x00	; 0
    5c36:	30 e0       	ldi	r19, 0x00	; 0
    5c38:	a9 01       	movw	r20, r18
    5c3a:	8e 2f       	mov	r24, r30
    5c3c:	87 95       	ror	r24
    5c3e:	88 27       	eor	r24, r24
    5c40:	87 95       	ror	r24
    5c42:	94 2f       	mov	r25, r20
    5c44:	9f 77       	andi	r25, 0x7F	; 127
    5c46:	67 95       	ror	r22
    5c48:	66 27       	eor	r22, r22
    5c4a:	67 95       	ror	r22
    5c4c:	e6 95       	lsr	r30
    5c4e:	e2 2e       	mov	r14, r18
    5c50:	a9 2f       	mov	r26, r25
    5c52:	a8 2b       	or	r26, r24
    5c54:	fe 2f       	mov	r31, r30
    5c56:	f6 2b       	or	r31, r22
    5c58:	62 2f       	mov	r22, r18
    5c5a:	73 2f       	mov	r23, r19
    5c5c:	8a 2f       	mov	r24, r26
    5c5e:	9f 2f       	mov	r25, r31
    5c60:	cd b7       	in	r28, 0x3d	; 61
    5c62:	de b7       	in	r29, 0x3e	; 62
    5c64:	e6 e0       	ldi	r30, 0x06	; 6
    5c66:	0c 94 1f 2f 	jmp	0x5e3e	; 0x5e3e <__epilogue_restores__+0x18>

00005c6a <__unpack_f>:
    5c6a:	dc 01       	movw	r26, r24
    5c6c:	fb 01       	movw	r30, r22
    5c6e:	2c 91       	ld	r18, X
    5c70:	11 96       	adiw	r26, 0x01	; 1
    5c72:	3c 91       	ld	r19, X
    5c74:	11 97       	sbiw	r26, 0x01	; 1
    5c76:	12 96       	adiw	r26, 0x02	; 2
    5c78:	8c 91       	ld	r24, X
    5c7a:	12 97       	sbiw	r26, 0x02	; 2
    5c7c:	48 2f       	mov	r20, r24
    5c7e:	4f 77       	andi	r20, 0x7F	; 127
    5c80:	50 e0       	ldi	r21, 0x00	; 0
    5c82:	98 2f       	mov	r25, r24
    5c84:	99 1f       	adc	r25, r25
    5c86:	99 27       	eor	r25, r25
    5c88:	99 1f       	adc	r25, r25
    5c8a:	13 96       	adiw	r26, 0x03	; 3
    5c8c:	6c 91       	ld	r22, X
    5c8e:	13 97       	sbiw	r26, 0x03	; 3
    5c90:	86 2f       	mov	r24, r22
    5c92:	88 0f       	add	r24, r24
    5c94:	89 2b       	or	r24, r25
    5c96:	90 e0       	ldi	r25, 0x00	; 0
    5c98:	66 1f       	adc	r22, r22
    5c9a:	66 27       	eor	r22, r22
    5c9c:	66 1f       	adc	r22, r22
    5c9e:	61 83       	std	Z+1, r22	; 0x01
    5ca0:	00 97       	sbiw	r24, 0x00	; 0
    5ca2:	39 f5       	brne	.+78     	; 0x5cf2 <__unpack_f+0x88>
    5ca4:	21 15       	cp	r18, r1
    5ca6:	31 05       	cpc	r19, r1
    5ca8:	41 05       	cpc	r20, r1
    5caa:	51 05       	cpc	r21, r1
    5cac:	11 f4       	brne	.+4      	; 0x5cb2 <__unpack_f+0x48>
    5cae:	82 e0       	ldi	r24, 0x02	; 2
    5cb0:	29 c0       	rjmp	.+82     	; 0x5d04 <__unpack_f+0x9a>
    5cb2:	82 e8       	ldi	r24, 0x82	; 130
    5cb4:	9f ef       	ldi	r25, 0xFF	; 255
    5cb6:	93 83       	std	Z+3, r25	; 0x03
    5cb8:	82 83       	std	Z+2, r24	; 0x02
    5cba:	67 e0       	ldi	r22, 0x07	; 7
    5cbc:	22 0f       	add	r18, r18
    5cbe:	33 1f       	adc	r19, r19
    5cc0:	44 1f       	adc	r20, r20
    5cc2:	55 1f       	adc	r21, r21
    5cc4:	6a 95       	dec	r22
    5cc6:	d1 f7       	brne	.-12     	; 0x5cbc <__unpack_f+0x52>
    5cc8:	83 e0       	ldi	r24, 0x03	; 3
    5cca:	80 83       	st	Z, r24
    5ccc:	09 c0       	rjmp	.+18     	; 0x5ce0 <__unpack_f+0x76>
    5cce:	22 0f       	add	r18, r18
    5cd0:	33 1f       	adc	r19, r19
    5cd2:	44 1f       	adc	r20, r20
    5cd4:	55 1f       	adc	r21, r21
    5cd6:	82 81       	ldd	r24, Z+2	; 0x02
    5cd8:	93 81       	ldd	r25, Z+3	; 0x03
    5cda:	01 97       	sbiw	r24, 0x01	; 1
    5cdc:	93 83       	std	Z+3, r25	; 0x03
    5cde:	82 83       	std	Z+2, r24	; 0x02
    5ce0:	20 30       	cpi	r18, 0x00	; 0
    5ce2:	80 e0       	ldi	r24, 0x00	; 0
    5ce4:	38 07       	cpc	r19, r24
    5ce6:	80 e0       	ldi	r24, 0x00	; 0
    5ce8:	48 07       	cpc	r20, r24
    5cea:	80 e4       	ldi	r24, 0x40	; 64
    5cec:	58 07       	cpc	r21, r24
    5cee:	78 f3       	brcs	.-34     	; 0x5cce <__unpack_f+0x64>
    5cf0:	20 c0       	rjmp	.+64     	; 0x5d32 <__unpack_f+0xc8>
    5cf2:	8f 3f       	cpi	r24, 0xFF	; 255
    5cf4:	91 05       	cpc	r25, r1
    5cf6:	79 f4       	brne	.+30     	; 0x5d16 <__unpack_f+0xac>
    5cf8:	21 15       	cp	r18, r1
    5cfa:	31 05       	cpc	r19, r1
    5cfc:	41 05       	cpc	r20, r1
    5cfe:	51 05       	cpc	r21, r1
    5d00:	19 f4       	brne	.+6      	; 0x5d08 <__unpack_f+0x9e>
    5d02:	84 e0       	ldi	r24, 0x04	; 4
    5d04:	80 83       	st	Z, r24
    5d06:	08 95       	ret
    5d08:	44 ff       	sbrs	r20, 4
    5d0a:	03 c0       	rjmp	.+6      	; 0x5d12 <__unpack_f+0xa8>
    5d0c:	81 e0       	ldi	r24, 0x01	; 1
    5d0e:	80 83       	st	Z, r24
    5d10:	10 c0       	rjmp	.+32     	; 0x5d32 <__unpack_f+0xc8>
    5d12:	10 82       	st	Z, r1
    5d14:	0e c0       	rjmp	.+28     	; 0x5d32 <__unpack_f+0xc8>
    5d16:	8f 57       	subi	r24, 0x7F	; 127
    5d18:	90 40       	sbci	r25, 0x00	; 0
    5d1a:	93 83       	std	Z+3, r25	; 0x03
    5d1c:	82 83       	std	Z+2, r24	; 0x02
    5d1e:	83 e0       	ldi	r24, 0x03	; 3
    5d20:	80 83       	st	Z, r24
    5d22:	87 e0       	ldi	r24, 0x07	; 7
    5d24:	22 0f       	add	r18, r18
    5d26:	33 1f       	adc	r19, r19
    5d28:	44 1f       	adc	r20, r20
    5d2a:	55 1f       	adc	r21, r21
    5d2c:	8a 95       	dec	r24
    5d2e:	d1 f7       	brne	.-12     	; 0x5d24 <__unpack_f+0xba>
    5d30:	50 64       	ori	r21, 0x40	; 64
    5d32:	24 83       	std	Z+4, r18	; 0x04
    5d34:	35 83       	std	Z+5, r19	; 0x05
    5d36:	46 83       	std	Z+6, r20	; 0x06
    5d38:	57 83       	std	Z+7, r21	; 0x07
    5d3a:	08 95       	ret

00005d3c <__fpcmp_parts_f>:
    5d3c:	fc 01       	movw	r30, r24
    5d3e:	db 01       	movw	r26, r22
    5d40:	90 81       	ld	r25, Z
    5d42:	92 30       	cpi	r25, 0x02	; 2
    5d44:	08 f4       	brcc	.+2      	; 0x5d48 <__fpcmp_parts_f+0xc>
    5d46:	49 c0       	rjmp	.+146    	; 0x5dda <__fpcmp_parts_f+0x9e>
    5d48:	8c 91       	ld	r24, X
    5d4a:	82 30       	cpi	r24, 0x02	; 2
    5d4c:	08 f4       	brcc	.+2      	; 0x5d50 <__fpcmp_parts_f+0x14>
    5d4e:	45 c0       	rjmp	.+138    	; 0x5dda <__fpcmp_parts_f+0x9e>
    5d50:	94 30       	cpi	r25, 0x04	; 4
    5d52:	51 f4       	brne	.+20     	; 0x5d68 <__fpcmp_parts_f+0x2c>
    5d54:	61 81       	ldd	r22, Z+1	; 0x01
    5d56:	84 30       	cpi	r24, 0x04	; 4
    5d58:	b1 f5       	brne	.+108    	; 0x5dc6 <__fpcmp_parts_f+0x8a>
    5d5a:	11 96       	adiw	r26, 0x01	; 1
    5d5c:	2c 91       	ld	r18, X
    5d5e:	11 97       	sbiw	r26, 0x01	; 1
    5d60:	30 e0       	ldi	r19, 0x00	; 0
    5d62:	26 1b       	sub	r18, r22
    5d64:	31 09       	sbc	r19, r1
    5d66:	41 c0       	rjmp	.+130    	; 0x5dea <__fpcmp_parts_f+0xae>
    5d68:	84 30       	cpi	r24, 0x04	; 4
    5d6a:	21 f0       	breq	.+8      	; 0x5d74 <__fpcmp_parts_f+0x38>
    5d6c:	92 30       	cpi	r25, 0x02	; 2
    5d6e:	41 f4       	brne	.+16     	; 0x5d80 <__fpcmp_parts_f+0x44>
    5d70:	82 30       	cpi	r24, 0x02	; 2
    5d72:	b1 f1       	breq	.+108    	; 0x5de0 <__fpcmp_parts_f+0xa4>
    5d74:	11 96       	adiw	r26, 0x01	; 1
    5d76:	8c 91       	ld	r24, X
    5d78:	11 97       	sbiw	r26, 0x01	; 1
    5d7a:	88 23       	and	r24, r24
    5d7c:	a1 f1       	breq	.+104    	; 0x5de6 <__fpcmp_parts_f+0xaa>
    5d7e:	2d c0       	rjmp	.+90     	; 0x5dda <__fpcmp_parts_f+0x9e>
    5d80:	61 81       	ldd	r22, Z+1	; 0x01
    5d82:	82 30       	cpi	r24, 0x02	; 2
    5d84:	01 f1       	breq	.+64     	; 0x5dc6 <__fpcmp_parts_f+0x8a>
    5d86:	11 96       	adiw	r26, 0x01	; 1
    5d88:	8c 91       	ld	r24, X
    5d8a:	11 97       	sbiw	r26, 0x01	; 1
    5d8c:	68 17       	cp	r22, r24
    5d8e:	d9 f4       	brne	.+54     	; 0x5dc6 <__fpcmp_parts_f+0x8a>
    5d90:	22 81       	ldd	r18, Z+2	; 0x02
    5d92:	33 81       	ldd	r19, Z+3	; 0x03
    5d94:	12 96       	adiw	r26, 0x02	; 2
    5d96:	8d 91       	ld	r24, X+
    5d98:	9c 91       	ld	r25, X
    5d9a:	13 97       	sbiw	r26, 0x03	; 3
    5d9c:	82 17       	cp	r24, r18
    5d9e:	93 07       	cpc	r25, r19
    5da0:	94 f0       	brlt	.+36     	; 0x5dc6 <__fpcmp_parts_f+0x8a>
    5da2:	28 17       	cp	r18, r24
    5da4:	39 07       	cpc	r19, r25
    5da6:	bc f0       	brlt	.+46     	; 0x5dd6 <__fpcmp_parts_f+0x9a>
    5da8:	24 81       	ldd	r18, Z+4	; 0x04
    5daa:	35 81       	ldd	r19, Z+5	; 0x05
    5dac:	46 81       	ldd	r20, Z+6	; 0x06
    5dae:	57 81       	ldd	r21, Z+7	; 0x07
    5db0:	14 96       	adiw	r26, 0x04	; 4
    5db2:	8d 91       	ld	r24, X+
    5db4:	9d 91       	ld	r25, X+
    5db6:	0d 90       	ld	r0, X+
    5db8:	bc 91       	ld	r27, X
    5dba:	a0 2d       	mov	r26, r0
    5dbc:	82 17       	cp	r24, r18
    5dbe:	93 07       	cpc	r25, r19
    5dc0:	a4 07       	cpc	r26, r20
    5dc2:	b5 07       	cpc	r27, r21
    5dc4:	18 f4       	brcc	.+6      	; 0x5dcc <__fpcmp_parts_f+0x90>
    5dc6:	66 23       	and	r22, r22
    5dc8:	41 f0       	breq	.+16     	; 0x5dda <__fpcmp_parts_f+0x9e>
    5dca:	0d c0       	rjmp	.+26     	; 0x5de6 <__fpcmp_parts_f+0xaa>
    5dcc:	28 17       	cp	r18, r24
    5dce:	39 07       	cpc	r19, r25
    5dd0:	4a 07       	cpc	r20, r26
    5dd2:	5b 07       	cpc	r21, r27
    5dd4:	28 f4       	brcc	.+10     	; 0x5de0 <__fpcmp_parts_f+0xa4>
    5dd6:	66 23       	and	r22, r22
    5dd8:	31 f0       	breq	.+12     	; 0x5de6 <__fpcmp_parts_f+0xaa>
    5dda:	21 e0       	ldi	r18, 0x01	; 1
    5ddc:	30 e0       	ldi	r19, 0x00	; 0
    5dde:	05 c0       	rjmp	.+10     	; 0x5dea <__fpcmp_parts_f+0xae>
    5de0:	20 e0       	ldi	r18, 0x00	; 0
    5de2:	30 e0       	ldi	r19, 0x00	; 0
    5de4:	02 c0       	rjmp	.+4      	; 0x5dea <__fpcmp_parts_f+0xae>
    5de6:	2f ef       	ldi	r18, 0xFF	; 255
    5de8:	3f ef       	ldi	r19, 0xFF	; 255
    5dea:	c9 01       	movw	r24, r18
    5dec:	08 95       	ret

00005dee <__prologue_saves__>:
    5dee:	2f 92       	push	r2
    5df0:	3f 92       	push	r3
    5df2:	4f 92       	push	r4
    5df4:	5f 92       	push	r5
    5df6:	6f 92       	push	r6
    5df8:	7f 92       	push	r7
    5dfa:	8f 92       	push	r8
    5dfc:	9f 92       	push	r9
    5dfe:	af 92       	push	r10
    5e00:	bf 92       	push	r11
    5e02:	cf 92       	push	r12
    5e04:	df 92       	push	r13
    5e06:	ef 92       	push	r14
    5e08:	ff 92       	push	r15
    5e0a:	0f 93       	push	r16
    5e0c:	1f 93       	push	r17
    5e0e:	cf 93       	push	r28
    5e10:	df 93       	push	r29
    5e12:	cd b7       	in	r28, 0x3d	; 61
    5e14:	de b7       	in	r29, 0x3e	; 62
    5e16:	ca 1b       	sub	r28, r26
    5e18:	db 0b       	sbc	r29, r27
    5e1a:	0f b6       	in	r0, 0x3f	; 63
    5e1c:	f8 94       	cli
    5e1e:	de bf       	out	0x3e, r29	; 62
    5e20:	0f be       	out	0x3f, r0	; 63
    5e22:	cd bf       	out	0x3d, r28	; 61
    5e24:	09 94       	ijmp

00005e26 <__epilogue_restores__>:
    5e26:	2a 88       	ldd	r2, Y+18	; 0x12
    5e28:	39 88       	ldd	r3, Y+17	; 0x11
    5e2a:	48 88       	ldd	r4, Y+16	; 0x10
    5e2c:	5f 84       	ldd	r5, Y+15	; 0x0f
    5e2e:	6e 84       	ldd	r6, Y+14	; 0x0e
    5e30:	7d 84       	ldd	r7, Y+13	; 0x0d
    5e32:	8c 84       	ldd	r8, Y+12	; 0x0c
    5e34:	9b 84       	ldd	r9, Y+11	; 0x0b
    5e36:	aa 84       	ldd	r10, Y+10	; 0x0a
    5e38:	b9 84       	ldd	r11, Y+9	; 0x09
    5e3a:	c8 84       	ldd	r12, Y+8	; 0x08
    5e3c:	df 80       	ldd	r13, Y+7	; 0x07
    5e3e:	ee 80       	ldd	r14, Y+6	; 0x06
    5e40:	fd 80       	ldd	r15, Y+5	; 0x05
    5e42:	0c 81       	ldd	r16, Y+4	; 0x04
    5e44:	1b 81       	ldd	r17, Y+3	; 0x03
    5e46:	aa 81       	ldd	r26, Y+2	; 0x02
    5e48:	b9 81       	ldd	r27, Y+1	; 0x01
    5e4a:	ce 0f       	add	r28, r30
    5e4c:	d1 1d       	adc	r29, r1
    5e4e:	0f b6       	in	r0, 0x3f	; 63
    5e50:	f8 94       	cli
    5e52:	de bf       	out	0x3e, r29	; 62
    5e54:	0f be       	out	0x3f, r0	; 63
    5e56:	cd bf       	out	0x3d, r28	; 61
    5e58:	ed 01       	movw	r28, r26
    5e5a:	08 95       	ret
    5e5c:	11 f4       	brne	.+4      	; 0x5e62 <__epilogue_restores__+0x3c>
    5e5e:	0e f4       	brtc	.+2      	; 0x5e62 <__epilogue_restores__+0x3c>
    5e60:	4d c0       	rjmp	.+154    	; 0x5efc <__fp_nan>
    5e62:	3e c0       	rjmp	.+124    	; 0x5ee0 <__fp_mpack>

00005e64 <sqrt>:
    5e64:	5d d0       	rcall	.+186    	; 0x5f20 <__fp_splitA>
    5e66:	d0 f3       	brcs	.-12     	; 0x5e5c <__epilogue_restores__+0x36>
    5e68:	99 23       	and	r25, r25
    5e6a:	d9 f3       	breq	.-10     	; 0x5e62 <__epilogue_restores__+0x3c>
    5e6c:	ce f3       	brts	.-14     	; 0x5e60 <__epilogue_restores__+0x3a>
    5e6e:	9f 57       	subi	r25, 0x7F	; 127
    5e70:	55 0b       	sbc	r21, r21
    5e72:	87 ff       	sbrs	r24, 7
    5e74:	46 d0       	rcall	.+140    	; 0x5f02 <__fp_norm2>
    5e76:	00 24       	eor	r0, r0
    5e78:	a0 e6       	ldi	r26, 0x60	; 96
    5e7a:	40 ea       	ldi	r20, 0xA0	; 160
    5e7c:	90 01       	movw	r18, r0
    5e7e:	80 58       	subi	r24, 0x80	; 128
    5e80:	56 95       	lsr	r21
    5e82:	97 95       	ror	r25
    5e84:	28 f4       	brcc	.+10     	; 0x5e90 <sqrt+0x2c>
    5e86:	80 5c       	subi	r24, 0xC0	; 192
    5e88:	66 0f       	add	r22, r22
    5e8a:	77 1f       	adc	r23, r23
    5e8c:	88 1f       	adc	r24, r24
    5e8e:	20 f0       	brcs	.+8      	; 0x5e98 <sqrt+0x34>
    5e90:	26 17       	cp	r18, r22
    5e92:	37 07       	cpc	r19, r23
    5e94:	48 07       	cpc	r20, r24
    5e96:	30 f4       	brcc	.+12     	; 0x5ea4 <sqrt+0x40>
    5e98:	62 1b       	sub	r22, r18
    5e9a:	73 0b       	sbc	r23, r19
    5e9c:	84 0b       	sbc	r24, r20
    5e9e:	20 29       	or	r18, r0
    5ea0:	31 29       	or	r19, r1
    5ea2:	4a 2b       	or	r20, r26
    5ea4:	a6 95       	lsr	r26
    5ea6:	17 94       	ror	r1
    5ea8:	07 94       	ror	r0
    5eaa:	20 25       	eor	r18, r0
    5eac:	31 25       	eor	r19, r1
    5eae:	4a 27       	eor	r20, r26
    5eb0:	58 f7       	brcc	.-42     	; 0x5e88 <sqrt+0x24>
    5eb2:	66 0f       	add	r22, r22
    5eb4:	77 1f       	adc	r23, r23
    5eb6:	88 1f       	adc	r24, r24
    5eb8:	20 f0       	brcs	.+8      	; 0x5ec2 <sqrt+0x5e>
    5eba:	26 17       	cp	r18, r22
    5ebc:	37 07       	cpc	r19, r23
    5ebe:	48 07       	cpc	r20, r24
    5ec0:	30 f4       	brcc	.+12     	; 0x5ece <sqrt+0x6a>
    5ec2:	62 0b       	sbc	r22, r18
    5ec4:	73 0b       	sbc	r23, r19
    5ec6:	84 0b       	sbc	r24, r20
    5ec8:	20 0d       	add	r18, r0
    5eca:	31 1d       	adc	r19, r1
    5ecc:	41 1d       	adc	r20, r1
    5ece:	a0 95       	com	r26
    5ed0:	81 f7       	brne	.-32     	; 0x5eb2 <sqrt+0x4e>
    5ed2:	b9 01       	movw	r22, r18
    5ed4:	84 2f       	mov	r24, r20
    5ed6:	91 58       	subi	r25, 0x81	; 129
    5ed8:	88 0f       	add	r24, r24
    5eda:	96 95       	lsr	r25
    5edc:	87 95       	ror	r24
    5ede:	08 95       	ret

00005ee0 <__fp_mpack>:
    5ee0:	9f 3f       	cpi	r25, 0xFF	; 255
    5ee2:	31 f0       	breq	.+12     	; 0x5ef0 <__fp_mpack_finite+0xc>

00005ee4 <__fp_mpack_finite>:
    5ee4:	91 50       	subi	r25, 0x01	; 1
    5ee6:	20 f4       	brcc	.+8      	; 0x5ef0 <__fp_mpack_finite+0xc>
    5ee8:	87 95       	ror	r24
    5eea:	77 95       	ror	r23
    5eec:	67 95       	ror	r22
    5eee:	b7 95       	ror	r27
    5ef0:	88 0f       	add	r24, r24
    5ef2:	91 1d       	adc	r25, r1
    5ef4:	96 95       	lsr	r25
    5ef6:	87 95       	ror	r24
    5ef8:	97 f9       	bld	r25, 7
    5efa:	08 95       	ret

00005efc <__fp_nan>:
    5efc:	9f ef       	ldi	r25, 0xFF	; 255
    5efe:	80 ec       	ldi	r24, 0xC0	; 192
    5f00:	08 95       	ret

00005f02 <__fp_norm2>:
    5f02:	91 50       	subi	r25, 0x01	; 1
    5f04:	50 40       	sbci	r21, 0x00	; 0
    5f06:	66 0f       	add	r22, r22
    5f08:	77 1f       	adc	r23, r23
    5f0a:	88 1f       	adc	r24, r24
    5f0c:	d2 f7       	brpl	.-12     	; 0x5f02 <__fp_norm2>
    5f0e:	08 95       	ret

00005f10 <__fp_split3>:
    5f10:	57 fd       	sbrc	r21, 7
    5f12:	90 58       	subi	r25, 0x80	; 128
    5f14:	44 0f       	add	r20, r20
    5f16:	55 1f       	adc	r21, r21
    5f18:	59 f0       	breq	.+22     	; 0x5f30 <__fp_splitA+0x10>
    5f1a:	5f 3f       	cpi	r21, 0xFF	; 255
    5f1c:	71 f0       	breq	.+28     	; 0x5f3a <__fp_splitA+0x1a>
    5f1e:	47 95       	ror	r20

00005f20 <__fp_splitA>:
    5f20:	88 0f       	add	r24, r24
    5f22:	97 fb       	bst	r25, 7
    5f24:	99 1f       	adc	r25, r25
    5f26:	61 f0       	breq	.+24     	; 0x5f40 <__fp_splitA+0x20>
    5f28:	9f 3f       	cpi	r25, 0xFF	; 255
    5f2a:	79 f0       	breq	.+30     	; 0x5f4a <__fp_splitA+0x2a>
    5f2c:	87 95       	ror	r24
    5f2e:	08 95       	ret
    5f30:	12 16       	cp	r1, r18
    5f32:	13 06       	cpc	r1, r19
    5f34:	14 06       	cpc	r1, r20
    5f36:	55 1f       	adc	r21, r21
    5f38:	f2 cf       	rjmp	.-28     	; 0x5f1e <__fp_split3+0xe>
    5f3a:	46 95       	lsr	r20
    5f3c:	f1 df       	rcall	.-30     	; 0x5f20 <__fp_splitA>
    5f3e:	08 c0       	rjmp	.+16     	; 0x5f50 <__fp_splitA+0x30>
    5f40:	16 16       	cp	r1, r22
    5f42:	17 06       	cpc	r1, r23
    5f44:	18 06       	cpc	r1, r24
    5f46:	99 1f       	adc	r25, r25
    5f48:	f1 cf       	rjmp	.-30     	; 0x5f2c <__fp_splitA+0xc>
    5f4a:	86 95       	lsr	r24
    5f4c:	71 05       	cpc	r23, r1
    5f4e:	61 05       	cpc	r22, r1
    5f50:	08 94       	sec
    5f52:	08 95       	ret

00005f54 <_exit>:
    5f54:	f8 94       	cli

00005f56 <__stop_program>:
    5f56:	ff cf       	rjmp	.-2      	; 0x5f56 <__stop_program>
