
Slave_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00000f7a  0000100e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800156  00800156  00001064  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001064  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  000017b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001fb  00000000  00000000  00001895  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000942  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a8  00000000  00000000  000023d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000cb1  00000000  00000000  0000287a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000352c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f4  00000000  00000000  0000372c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000012c  00000000  00000000  00003a20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__vector_1>
   8:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_2>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__vector_29>
  78:	0c 94 66 05 	jmp	0xacc	; 0xacc <__vector_30>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	a6 35       	cpi	r26, 0x56	; 86
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a6 e5       	ldi	r26, 0x56	; 86
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	aa 37       	cpi	r26, 0x7A	; 122
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 b8 02 	call	0x570	; 0x570 <main>
  c2:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <SwitchInitialize>:
#define DIP0	0x01
#define DIP1	0x02
#define DIP2	0x04
#define DIP3	0x08

void SwitchInitialize(void){
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	// Limit SW
	cbi(DDRF, PF7);
  d2:	81 e6       	ldi	r24, 0x61	; 97
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	21 e6       	ldi	r18, 0x61	; 97
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	f9 01       	movw	r30, r18
  dc:	20 81       	ld	r18, Z
  de:	2f 77       	andi	r18, 0x7F	; 127
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
	sbi(PORTF, PF7);
  e4:	82 e6       	ldi	r24, 0x62	; 98
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	22 e6       	ldi	r18, 0x62	; 98
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	f9 01       	movw	r30, r18
  ee:	20 81       	ld	r18, Z
  f0:	20 68       	ori	r18, 0x80	; 128
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
	cbi(DDRF, PF6);
  f6:	81 e6       	ldi	r24, 0x61	; 97
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	21 e6       	ldi	r18, 0x61	; 97
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	f9 01       	movw	r30, r18
 100:	20 81       	ld	r18, Z
 102:	2f 7b       	andi	r18, 0xBF	; 191
 104:	fc 01       	movw	r30, r24
 106:	20 83       	st	Z, r18
	sbi(PORTF, PF6);
 108:	82 e6       	ldi	r24, 0x62	; 98
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	22 e6       	ldi	r18, 0x62	; 98
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	f9 01       	movw	r30, r18
 112:	20 81       	ld	r18, Z
 114:	20 64       	ori	r18, 0x40	; 64
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18
	
	// Dip SW
	cbi(DDRF, PF3);
 11a:	81 e6       	ldi	r24, 0x61	; 97
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	21 e6       	ldi	r18, 0x61	; 97
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	f9 01       	movw	r30, r18
 124:	20 81       	ld	r18, Z
 126:	27 7f       	andi	r18, 0xF7	; 247
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
	sbi(PORTF, PF3);
 12c:	82 e6       	ldi	r24, 0x62	; 98
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	22 e6       	ldi	r18, 0x62	; 98
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	f9 01       	movw	r30, r18
 136:	20 81       	ld	r18, Z
 138:	28 60       	ori	r18, 0x08	; 8
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
	cbi(DDRF, PF2);
 13e:	81 e6       	ldi	r24, 0x61	; 97
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	21 e6       	ldi	r18, 0x61	; 97
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	20 81       	ld	r18, Z
 14a:	2b 7f       	andi	r18, 0xFB	; 251
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
	sbi(PORTF, PF2);
 150:	82 e6       	ldi	r24, 0x62	; 98
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	22 e6       	ldi	r18, 0x62	; 98
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	f9 01       	movw	r30, r18
 15a:	20 81       	ld	r18, Z
 15c:	24 60       	ori	r18, 0x04	; 4
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
	cbi(DDRF, PF1);
 162:	81 e6       	ldi	r24, 0x61	; 97
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	21 e6       	ldi	r18, 0x61	; 97
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	f9 01       	movw	r30, r18
 16c:	20 81       	ld	r18, Z
 16e:	2d 7f       	andi	r18, 0xFD	; 253
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
	sbi(PORTF, PF1);
 174:	82 e6       	ldi	r24, 0x62	; 98
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	22 e6       	ldi	r18, 0x62	; 98
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	f9 01       	movw	r30, r18
 17e:	20 81       	ld	r18, Z
 180:	22 60       	ori	r18, 0x02	; 2
 182:	fc 01       	movw	r30, r24
 184:	20 83       	st	Z, r18
	cbi(DDRF, PF0);
 186:	81 e6       	ldi	r24, 0x61	; 97
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	21 e6       	ldi	r18, 0x61	; 97
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	f9 01       	movw	r30, r18
 190:	20 81       	ld	r18, Z
 192:	2e 7f       	andi	r18, 0xFE	; 254
 194:	fc 01       	movw	r30, r24
 196:	20 83       	st	Z, r18
	sbi(PORTF, PF0);
 198:	82 e6       	ldi	r24, 0x62	; 98
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	22 e6       	ldi	r18, 0x62	; 98
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	f9 01       	movw	r30, r18
 1a2:	20 81       	ld	r18, Z
 1a4:	21 60       	ori	r18, 0x01	; 1
 1a6:	fc 01       	movw	r30, r24
 1a8:	20 83       	st	Z, r18
}
 1aa:	cf 91       	pop	r28
 1ac:	df 91       	pop	r29
 1ae:	08 95       	ret

000001b0 <GetDipSwitchStatus>:

uint8_t GetDipSwitchStatus(void){
 1b0:	df 93       	push	r29
 1b2:	cf 93       	push	r28
 1b4:	0f 92       	push	r0
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
	uint8_t result = 0x00;
 1ba:	19 82       	std	Y+1, r1	; 0x01
	
	if(!bit_is_set(PINF, PF3)){
 1bc:	80 e2       	ldi	r24, 0x20	; 32
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	fc 01       	movw	r30, r24
 1c2:	80 81       	ld	r24, Z
 1c4:	88 2f       	mov	r24, r24
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	88 70       	andi	r24, 0x08	; 8
 1ca:	90 70       	andi	r25, 0x00	; 0
 1cc:	00 97       	sbiw	r24, 0x00	; 0
 1ce:	19 f4       	brne	.+6      	; 0x1d6 <GetDipSwitchStatus+0x26>
		result |= DIP0;
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	81 60       	ori	r24, 0x01	; 1
 1d4:	89 83       	std	Y+1, r24	; 0x01
	}		
	if(!bit_is_set(PINF, PF2)){
 1d6:	80 e2       	ldi	r24, 0x20	; 32
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	fc 01       	movw	r30, r24
 1dc:	80 81       	ld	r24, Z
 1de:	88 2f       	mov	r24, r24
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	84 70       	andi	r24, 0x04	; 4
 1e4:	90 70       	andi	r25, 0x00	; 0
 1e6:	00 97       	sbiw	r24, 0x00	; 0
 1e8:	19 f4       	brne	.+6      	; 0x1f0 <GetDipSwitchStatus+0x40>
		result |= DIP1;
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	82 60       	ori	r24, 0x02	; 2
 1ee:	89 83       	std	Y+1, r24	; 0x01
	}		
	if(!bit_is_set(PINF, PF1)){
 1f0:	80 e2       	ldi	r24, 0x20	; 32
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	fc 01       	movw	r30, r24
 1f6:	80 81       	ld	r24, Z
 1f8:	88 2f       	mov	r24, r24
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	82 70       	andi	r24, 0x02	; 2
 1fe:	90 70       	andi	r25, 0x00	; 0
 200:	00 97       	sbiw	r24, 0x00	; 0
 202:	19 f4       	brne	.+6      	; 0x20a <GetDipSwitchStatus+0x5a>
		result |= DIP2;
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	84 60       	ori	r24, 0x04	; 4
 208:	89 83       	std	Y+1, r24	; 0x01
	}
	if(!bit_is_set(PINF, PF0)){
 20a:	80 e2       	ldi	r24, 0x20	; 32
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	fc 01       	movw	r30, r24
 210:	80 81       	ld	r24, Z
 212:	88 2f       	mov	r24, r24
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	81 70       	andi	r24, 0x01	; 1
 218:	90 70       	andi	r25, 0x00	; 0
 21a:	00 97       	sbiw	r24, 0x00	; 0
 21c:	19 f4       	brne	.+6      	; 0x224 <GetDipSwitchStatus+0x74>
		result |= DIP3;
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	88 60       	ori	r24, 0x08	; 8
 222:	89 83       	std	Y+1, r24	; 0x01
	}		
	
	return result;
 224:	89 81       	ldd	r24, Y+1	; 0x01
}
 226:	0f 90       	pop	r0
 228:	cf 91       	pop	r28
 22a:	df 91       	pop	r29
 22c:	08 95       	ret

0000022e <GetSwitchStatus>:

bool GetSwitchStatus(uint8_t no){
 22e:	df 93       	push	r29
 230:	cf 93       	push	r28
 232:	0f 92       	push	r0
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
 238:	89 83       	std	Y+1, r24	; 0x01
	switch(no){
 23a:	89 81       	ldd	r24, Y+1	; 0x01
 23c:	88 2f       	mov	r24, r24
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	00 97       	sbiw	r24, 0x00	; 0
 242:	21 f0       	breq	.+8      	; 0x24c <GetSwitchStatus+0x1e>
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	91 05       	cpc	r25, r1
 248:	79 f0       	breq	.+30     	; 0x268 <GetSwitchStatus+0x3a>
 24a:	18 c0       	rjmp	.+48     	; 0x27c <GetSwitchStatus+0x4e>
	case 0:
		if(!bit_is_set(PINF, PF6))	return true;
 24c:	80 e2       	ldi	r24, 0x20	; 32
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	fc 01       	movw	r30, r24
 252:	80 81       	ld	r24, Z
 254:	88 2f       	mov	r24, r24
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	80 74       	andi	r24, 0x40	; 64
 25a:	90 70       	andi	r25, 0x00	; 0
 25c:	00 97       	sbiw	r24, 0x00	; 0
 25e:	11 f4       	brne	.+4      	; 0x264 <GetSwitchStatus+0x36>
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0d c0       	rjmp	.+26     	; 0x27e <GetSwitchStatus+0x50>
		else						return false;
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0b c0       	rjmp	.+22     	; 0x27e <GetSwitchStatus+0x50>
		break;
	case 1:
		if(!bit_is_set(PINF, PF7))	return true;
 268:	80 e2       	ldi	r24, 0x20	; 32
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	fc 01       	movw	r30, r24
 26e:	80 81       	ld	r24, Z
 270:	88 23       	and	r24, r24
 272:	14 f0       	brlt	.+4      	; 0x278 <GetSwitchStatus+0x4a>
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	03 c0       	rjmp	.+6      	; 0x27e <GetSwitchStatus+0x50>
		else						return false;		
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	01 c0       	rjmp	.+2      	; 0x27e <GetSwitchStatus+0x50>
		break;
	default:
		return false;
 27c:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
}
 27e:	0f 90       	pop	r0
 280:	cf 91       	pop	r28
 282:	df 91       	pop	r29
 284:	08 95       	ret

00000286 <ExInitialize>:


// EX

void ExInitialize(void){
 286:	df 93       	push	r29
 288:	cf 93       	push	r28
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
	cbi(DDRD, PD0);
 28e:	81 e3       	ldi	r24, 0x31	; 49
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	21 e3       	ldi	r18, 0x31	; 49
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	f9 01       	movw	r30, r18
 298:	20 81       	ld	r18, Z
 29a:	2e 7f       	andi	r18, 0xFE	; 254
 29c:	fc 01       	movw	r30, r24
 29e:	20 83       	st	Z, r18
	sbi(PORTD, PD0);
 2a0:	82 e3       	ldi	r24, 0x32	; 50
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	22 e3       	ldi	r18, 0x32	; 50
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	f9 01       	movw	r30, r18
 2aa:	20 81       	ld	r18, Z
 2ac:	21 60       	ori	r18, 0x01	; 1
 2ae:	fc 01       	movw	r30, r24
 2b0:	20 83       	st	Z, r18
	sbi(EIMSK, INT0);
 2b2:	89 e5       	ldi	r24, 0x59	; 89
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	29 e5       	ldi	r18, 0x59	; 89
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	f9 01       	movw	r30, r18
 2bc:	20 81       	ld	r18, Z
 2be:	21 60       	ori	r18, 0x01	; 1
 2c0:	fc 01       	movw	r30, r24
 2c2:	20 83       	st	Z, r18
	sbi(EICRA, ISC01);
 2c4:	8a e6       	ldi	r24, 0x6A	; 106
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	2a e6       	ldi	r18, 0x6A	; 106
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	f9 01       	movw	r30, r18
 2ce:	20 81       	ld	r18, Z
 2d0:	22 60       	ori	r18, 0x02	; 2
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18
	cbi(EICRA, ISC00);
 2d6:	8a e6       	ldi	r24, 0x6A	; 106
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	2a e6       	ldi	r18, 0x6A	; 106
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	f9 01       	movw	r30, r18
 2e0:	20 81       	ld	r18, Z
 2e2:	2e 7f       	andi	r18, 0xFE	; 254
 2e4:	fc 01       	movw	r30, r24
 2e6:	20 83       	st	Z, r18
	
	cbi(DDRD, PD1);
 2e8:	81 e3       	ldi	r24, 0x31	; 49
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	21 e3       	ldi	r18, 0x31	; 49
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	f9 01       	movw	r30, r18
 2f2:	20 81       	ld	r18, Z
 2f4:	2d 7f       	andi	r18, 0xFD	; 253
 2f6:	fc 01       	movw	r30, r24
 2f8:	20 83       	st	Z, r18
	sbi(PORTD, PD1);
 2fa:	82 e3       	ldi	r24, 0x32	; 50
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	22 e3       	ldi	r18, 0x32	; 50
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	f9 01       	movw	r30, r18
 304:	20 81       	ld	r18, Z
 306:	22 60       	ori	r18, 0x02	; 2
 308:	fc 01       	movw	r30, r24
 30a:	20 83       	st	Z, r18
	sbi(EIMSK, INT1);
 30c:	89 e5       	ldi	r24, 0x59	; 89
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	29 e5       	ldi	r18, 0x59	; 89
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	f9 01       	movw	r30, r18
 316:	20 81       	ld	r18, Z
 318:	22 60       	ori	r18, 0x02	; 2
 31a:	fc 01       	movw	r30, r24
 31c:	20 83       	st	Z, r18
	sbi(EICRA, ISC11);
 31e:	8a e6       	ldi	r24, 0x6A	; 106
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	2a e6       	ldi	r18, 0x6A	; 106
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	f9 01       	movw	r30, r18
 328:	20 81       	ld	r18, Z
 32a:	28 60       	ori	r18, 0x08	; 8
 32c:	fc 01       	movw	r30, r24
 32e:	20 83       	st	Z, r18
	cbi(EICRA, ISC10);
 330:	8a e6       	ldi	r24, 0x6A	; 106
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	2a e6       	ldi	r18, 0x6A	; 106
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	f9 01       	movw	r30, r18
 33a:	20 81       	ld	r18, Z
 33c:	2b 7f       	andi	r18, 0xFB	; 251
 33e:	fc 01       	movw	r30, r24
 340:	20 83       	st	Z, r18
}
 342:	cf 91       	pop	r28
 344:	df 91       	pop	r29
 346:	08 95       	ret

00000348 <__vector_1>:

ISR(INT0_vect){
 348:	1f 92       	push	r1
 34a:	0f 92       	push	r0
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	0f 92       	push	r0
 350:	11 24       	eor	r1, r1
 352:	df 93       	push	r29
 354:	cf 93       	push	r28
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
	
}
 35a:	cf 91       	pop	r28
 35c:	df 91       	pop	r29
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <__vector_2>:

ISR(INT1_vect){
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	df 93       	push	r29
 374:	cf 93       	push	r28
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
	
 37a:	cf 91       	pop	r28
 37c:	df 91       	pop	r29
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <LedInitialize>:
	{(uint8_t*)&DDRA, (uint8_t*)&PORTA, PA6},
	{(uint8_t*)&DDRA, (uint8_t*)&PORTA, PA5},
	{(uint8_t*)&DDRA, (uint8_t*)&PORTA, PA4}
};

void LedInitialize(void){
 388:	df 93       	push	r29
 38a:	cf 93       	push	r28
 38c:	0f 92       	push	r0
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t i;
	
	for(i = 0; i < 4; i++){
 392:	19 82       	std	Y+1, r1	; 0x01
 394:	5c c0       	rjmp	.+184    	; 0x44e <LedInitialize+0xc6>
		sbi(*led[i].ddr, led[i].bit);
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	28 2f       	mov	r18, r24
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	c9 01       	movw	r24, r18
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	82 0f       	add	r24, r18
 3a8:	93 1f       	adc	r25, r19
 3aa:	80 50       	subi	r24, 0x00	; 0
 3ac:	9f 4f       	sbci	r25, 0xFF	; 255
 3ae:	fc 01       	movw	r30, r24
 3b0:	20 81       	ld	r18, Z
 3b2:	31 81       	ldd	r19, Z+1	; 0x01
 3b4:	f9 01       	movw	r30, r18
 3b6:	80 81       	ld	r24, Z
 3b8:	68 2f       	mov	r22, r24
 3ba:	89 81       	ldd	r24, Y+1	; 0x01
 3bc:	48 2f       	mov	r20, r24
 3be:	50 e0       	ldi	r21, 0x00	; 0
 3c0:	ca 01       	movw	r24, r20
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	84 0f       	add	r24, r20
 3cc:	95 1f       	adc	r25, r21
 3ce:	8c 5f       	subi	r24, 0xFC	; 252
 3d0:	9e 4f       	sbci	r25, 0xFE	; 254
 3d2:	fc 01       	movw	r30, r24
 3d4:	80 81       	ld	r24, Z
 3d6:	48 2f       	mov	r20, r24
 3d8:	50 e0       	ldi	r21, 0x00	; 0
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <LedInitialize+0x5c>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	4a 95       	dec	r20
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <LedInitialize+0x58>
 3e8:	86 2b       	or	r24, r22
 3ea:	f9 01       	movw	r30, r18
 3ec:	80 83       	st	Z, r24
		sbi(*led[i].port, led[i].bit);
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	28 2f       	mov	r18, r24
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	c9 01       	movw	r24, r18
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	82 0f       	add	r24, r18
 400:	93 1f       	adc	r25, r19
 402:	8e 5f       	subi	r24, 0xFE	; 254
 404:	9e 4f       	sbci	r25, 0xFE	; 254
 406:	fc 01       	movw	r30, r24
 408:	20 81       	ld	r18, Z
 40a:	31 81       	ldd	r19, Z+1	; 0x01
 40c:	f9 01       	movw	r30, r18
 40e:	80 81       	ld	r24, Z
 410:	68 2f       	mov	r22, r24
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	48 2f       	mov	r20, r24
 416:	50 e0       	ldi	r21, 0x00	; 0
 418:	ca 01       	movw	r24, r20
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	84 0f       	add	r24, r20
 424:	95 1f       	adc	r25, r21
 426:	8c 5f       	subi	r24, 0xFC	; 252
 428:	9e 4f       	sbci	r25, 0xFE	; 254
 42a:	fc 01       	movw	r30, r24
 42c:	80 81       	ld	r24, Z
 42e:	48 2f       	mov	r20, r24
 430:	50 e0       	ldi	r21, 0x00	; 0
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	04 2e       	mov	r0, r20
 438:	02 c0       	rjmp	.+4      	; 0x43e <LedInitialize+0xb6>
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	0a 94       	dec	r0
 440:	e2 f7       	brpl	.-8      	; 0x43a <LedInitialize+0xb2>
 442:	86 2b       	or	r24, r22
 444:	f9 01       	movw	r30, r18
 446:	80 83       	st	Z, r24
};

void LedInitialize(void){
	volatile uint8_t i;
	
	for(i = 0; i < 4; i++){
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	8f 5f       	subi	r24, 0xFF	; 255
 44c:	89 83       	std	Y+1, r24	; 0x01
 44e:	89 81       	ldd	r24, Y+1	; 0x01
 450:	84 30       	cpi	r24, 0x04	; 4
 452:	08 f4       	brcc	.+2      	; 0x456 <LedInitialize+0xce>
 454:	a0 cf       	rjmp	.-192    	; 0x396 <LedInitialize+0xe>
		sbi(*led[i].ddr, led[i].bit);
		sbi(*led[i].port, led[i].bit);
	}
}
 456:	0f 90       	pop	r0
 458:	cf 91       	pop	r28
 45a:	df 91       	pop	r29
 45c:	08 95       	ret

0000045e <LedDrive>:

void LedDrive(uint8_t no, bool select){
 45e:	df 93       	push	r29
 460:	cf 93       	push	r28
 462:	00 d0       	rcall	.+0      	; 0x464 <LedDrive+0x6>
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
 468:	89 83       	std	Y+1, r24	; 0x01
 46a:	6a 83       	std	Y+2, r22	; 0x02
	if(select)	cbi(*led[no].port, led[no].bit);
 46c:	8a 81       	ldd	r24, Y+2	; 0x02
 46e:	88 23       	and	r24, r24
 470:	f1 f1       	breq	.+124    	; 0x4ee <LedDrive+0x90>
 472:	89 81       	ldd	r24, Y+1	; 0x01
 474:	28 2f       	mov	r18, r24
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	c9 01       	movw	r24, r18
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	82 0f       	add	r24, r18
 484:	93 1f       	adc	r25, r19
 486:	8e 5f       	subi	r24, 0xFE	; 254
 488:	9e 4f       	sbci	r25, 0xFE	; 254
 48a:	fc 01       	movw	r30, r24
 48c:	40 81       	ld	r20, Z
 48e:	51 81       	ldd	r21, Z+1	; 0x01
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	28 2f       	mov	r18, r24
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	c9 01       	movw	r24, r18
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	82 0f       	add	r24, r18
 4a2:	93 1f       	adc	r25, r19
 4a4:	8e 5f       	subi	r24, 0xFE	; 254
 4a6:	9e 4f       	sbci	r25, 0xFE	; 254
 4a8:	fc 01       	movw	r30, r24
 4aa:	80 81       	ld	r24, Z
 4ac:	91 81       	ldd	r25, Z+1	; 0x01
 4ae:	fc 01       	movw	r30, r24
 4b0:	80 81       	ld	r24, Z
 4b2:	68 2f       	mov	r22, r24
 4b4:	89 81       	ldd	r24, Y+1	; 0x01
 4b6:	28 2f       	mov	r18, r24
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	c9 01       	movw	r24, r18
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	82 0f       	add	r24, r18
 4c6:	93 1f       	adc	r25, r19
 4c8:	8c 5f       	subi	r24, 0xFC	; 252
 4ca:	9e 4f       	sbci	r25, 0xFE	; 254
 4cc:	fc 01       	movw	r30, r24
 4ce:	80 81       	ld	r24, Z
 4d0:	28 2f       	mov	r18, r24
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	02 2e       	mov	r0, r18
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <LedDrive+0x82>
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	0a 94       	dec	r0
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <LedDrive+0x7e>
 4e4:	80 95       	com	r24
 4e6:	86 23       	and	r24, r22
 4e8:	fa 01       	movw	r30, r20
 4ea:	80 83       	st	Z, r24
 4ec:	3c c0       	rjmp	.+120    	; 0x566 <LedDrive+0x108>
	else		sbi(*led[no].port, led[no].bit);
 4ee:	89 81       	ldd	r24, Y+1	; 0x01
 4f0:	28 2f       	mov	r18, r24
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	c9 01       	movw	r24, r18
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	82 0f       	add	r24, r18
 500:	93 1f       	adc	r25, r19
 502:	8e 5f       	subi	r24, 0xFE	; 254
 504:	9e 4f       	sbci	r25, 0xFE	; 254
 506:	fc 01       	movw	r30, r24
 508:	40 81       	ld	r20, Z
 50a:	51 81       	ldd	r21, Z+1	; 0x01
 50c:	89 81       	ldd	r24, Y+1	; 0x01
 50e:	28 2f       	mov	r18, r24
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	c9 01       	movw	r24, r18
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	82 0f       	add	r24, r18
 51e:	93 1f       	adc	r25, r19
 520:	8e 5f       	subi	r24, 0xFE	; 254
 522:	9e 4f       	sbci	r25, 0xFE	; 254
 524:	fc 01       	movw	r30, r24
 526:	80 81       	ld	r24, Z
 528:	91 81       	ldd	r25, Z+1	; 0x01
 52a:	fc 01       	movw	r30, r24
 52c:	80 81       	ld	r24, Z
 52e:	68 2f       	mov	r22, r24
 530:	89 81       	ldd	r24, Y+1	; 0x01
 532:	28 2f       	mov	r18, r24
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	c9 01       	movw	r24, r18
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	82 0f       	add	r24, r18
 542:	93 1f       	adc	r25, r19
 544:	8c 5f       	subi	r24, 0xFC	; 252
 546:	9e 4f       	sbci	r25, 0xFE	; 254
 548:	fc 01       	movw	r30, r24
 54a:	80 81       	ld	r24, Z
 54c:	28 2f       	mov	r18, r24
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	02 2e       	mov	r0, r18
 556:	02 c0       	rjmp	.+4      	; 0x55c <LedDrive+0xfe>
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	0a 94       	dec	r0
 55e:	e2 f7       	brpl	.-8      	; 0x558 <LedDrive+0xfa>
 560:	86 2b       	or	r24, r22
 562:	fa 01       	movw	r30, r20
 564:	80 83       	st	Z, r24
}
 566:	0f 90       	pop	r0
 568:	0f 90       	pop	r0
 56a:	cf 91       	pop	r28
 56c:	df 91       	pop	r29
 56e:	08 95       	ret

00000570 <main>:
#include "./Input/Input.h"
#include "./RS485/RS485.h"
#include "./Motor/Motor.h"
#include "./Safety/Safety.h"

int main(void){
 570:	df 93       	push	r29
 572:	cf 93       	push	r28
 574:	cd b7       	in	r28, 0x3d	; 61
 576:	de b7       	in	r29, 0x3e	; 62
	cli();
 578:	f8 94       	cli
	LedInitialize();
 57a:	0e 94 c4 01 	call	0x388	; 0x388 <LedInitialize>
	SwitchInitialize();
 57e:	0e 94 65 00 	call	0xca	; 0xca <SwitchInitialize>
	ExInitialize();
 582:	0e 94 43 01 	call	0x286	; 0x286 <ExInitialize>
	MotorInitialize();
 586:	0e 94 55 04 	call	0x8aa	; 0x8aa <MotorInitialize>
	SafetyInitialize();
 58a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <SafetyInitialize>
	RS485Initialize(12);
 58e:	8c e0       	ldi	r24, 0x0C	; 12
 590:	0e 94 8b 06 	call	0xd16	; 0xd16 <RS485Initialize>
	
	while(1){
		sei();
 594:	78 94       	sei
		MotorDrive();
 596:	0e 94 2a 05 	call	0xa54	; 0xa54 <MotorDrive>
	}
 59a:	fc cf       	rjmp	.-8      	; 0x594 <main+0x24>

0000059c <RS485_DataInitialize>:
static volatile bool EndCodeCheck = false;
static volatile bool LineStatus = NO_DATA_IN_LINE;
static volatile uint8_t timerCounter = 0;


static void RS485_DataInitialize(void){
 59c:	df 93       	push	r29
 59e:	cf 93       	push	r28
 5a0:	0f 92       	push	r0
 5a2:	cd b7       	in	r28, 0x3d	; 61
 5a4:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	for(i = 0; i < 4; i++){
 5a6:	19 82       	std	Y+1, r1	; 0x01
 5a8:	0a c0       	rjmp	.+20     	; 0x5be <RS485_DataInitialize+0x22>
		MotorData.data[i] = 0x00;
 5aa:	89 81       	ldd	r24, Y+1	; 0x01
 5ac:	88 2f       	mov	r24, r24
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	89 5a       	subi	r24, 0xA9	; 169
 5b2:	9e 4f       	sbci	r25, 0xFE	; 254
 5b4:	fc 01       	movw	r30, r24
 5b6:	10 82       	st	Z, r1
static volatile uint8_t timerCounter = 0;


static void RS485_DataInitialize(void){
	uint8_t i;
	for(i = 0; i < 4; i++){
 5b8:	89 81       	ldd	r24, Y+1	; 0x01
 5ba:	8f 5f       	subi	r24, 0xFF	; 255
 5bc:	89 83       	std	Y+1, r24	; 0x01
 5be:	89 81       	ldd	r24, Y+1	; 0x01
 5c0:	84 30       	cpi	r24, 0x04	; 4
 5c2:	98 f3       	brcs	.-26     	; 0x5aa <RS485_DataInitialize+0xe>
		MotorData.data[i] = 0x00;
	}
}
 5c4:	0f 90       	pop	r0
 5c6:	cf 91       	pop	r28
 5c8:	df 91       	pop	r29
 5ca:	08 95       	ret

000005cc <m>:

static void m(uint8_t no, uint8_t select, uint8_t pwm){
 5cc:	df 93       	push	r29
 5ce:	cf 93       	push	r28
 5d0:	00 d0       	rcall	.+0      	; 0x5d2 <m+0x6>
 5d2:	0f 92       	push	r0
 5d4:	cd b7       	in	r28, 0x3d	; 61
 5d6:	de b7       	in	r29, 0x3e	; 62
 5d8:	89 83       	std	Y+1, r24	; 0x01
 5da:	6a 83       	std	Y+2, r22	; 0x02
 5dc:	4b 83       	std	Y+3, r20	; 0x03
	if(select & 0x01)	sbi(*motor[no].d1.port, motor[no].d1.bit);
 5de:	8a 81       	ldd	r24, Y+2	; 0x02
 5e0:	88 2f       	mov	r24, r24
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	81 70       	andi	r24, 0x01	; 1
 5e6:	90 70       	andi	r25, 0x00	; 0
 5e8:	88 23       	and	r24, r24
 5ea:	09 f4       	brne	.+2      	; 0x5ee <m+0x22>
 5ec:	4c c0       	rjmp	.+152    	; 0x686 <m+0xba>
 5ee:	89 81       	ldd	r24, Y+1	; 0x01
 5f0:	28 2f       	mov	r18, r24
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	c9 01       	movw	r24, r18
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	82 0f       	add	r24, r18
 5fc:	93 1f       	adc	r25, r19
 5fe:	9c 01       	movw	r18, r24
 600:	22 0f       	add	r18, r18
 602:	33 1f       	adc	r19, r19
 604:	22 0f       	add	r18, r18
 606:	33 1f       	adc	r19, r19
 608:	82 0f       	add	r24, r18
 60a:	93 1f       	adc	r25, r19
 60c:	8a 5e       	subi	r24, 0xEA	; 234
 60e:	9e 4f       	sbci	r25, 0xFE	; 254
 610:	fc 01       	movw	r30, r24
 612:	40 81       	ld	r20, Z
 614:	51 81       	ldd	r21, Z+1	; 0x01
 616:	89 81       	ldd	r24, Y+1	; 0x01
 618:	28 2f       	mov	r18, r24
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	c9 01       	movw	r24, r18
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	82 0f       	add	r24, r18
 624:	93 1f       	adc	r25, r19
 626:	9c 01       	movw	r18, r24
 628:	22 0f       	add	r18, r18
 62a:	33 1f       	adc	r19, r19
 62c:	22 0f       	add	r18, r18
 62e:	33 1f       	adc	r19, r19
 630:	82 0f       	add	r24, r18
 632:	93 1f       	adc	r25, r19
 634:	8a 5e       	subi	r24, 0xEA	; 234
 636:	9e 4f       	sbci	r25, 0xFE	; 254
 638:	fc 01       	movw	r30, r24
 63a:	80 81       	ld	r24, Z
 63c:	91 81       	ldd	r25, Z+1	; 0x01
 63e:	fc 01       	movw	r30, r24
 640:	80 81       	ld	r24, Z
 642:	68 2f       	mov	r22, r24
 644:	89 81       	ldd	r24, Y+1	; 0x01
 646:	28 2f       	mov	r18, r24
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	c9 01       	movw	r24, r18
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	82 0f       	add	r24, r18
 652:	93 1f       	adc	r25, r19
 654:	9c 01       	movw	r18, r24
 656:	22 0f       	add	r18, r18
 658:	33 1f       	adc	r19, r19
 65a:	22 0f       	add	r18, r18
 65c:	33 1f       	adc	r19, r19
 65e:	82 0f       	add	r24, r18
 660:	93 1f       	adc	r25, r19
 662:	88 5e       	subi	r24, 0xE8	; 232
 664:	9e 4f       	sbci	r25, 0xFE	; 254
 666:	fc 01       	movw	r30, r24
 668:	80 81       	ld	r24, Z
 66a:	28 2f       	mov	r18, r24
 66c:	30 e0       	ldi	r19, 0x00	; 0
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	02 2e       	mov	r0, r18
 674:	02 c0       	rjmp	.+4      	; 0x67a <m+0xae>
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	0a 94       	dec	r0
 67c:	e2 f7       	brpl	.-8      	; 0x676 <m+0xaa>
 67e:	86 2b       	or	r24, r22
 680:	fa 01       	movw	r30, r20
 682:	80 83       	st	Z, r24
 684:	4c c0       	rjmp	.+152    	; 0x71e <m+0x152>
	else				cbi(*motor[no].d1.port, motor[no].d1.bit);
 686:	89 81       	ldd	r24, Y+1	; 0x01
 688:	28 2f       	mov	r18, r24
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	c9 01       	movw	r24, r18
 68e:	88 0f       	add	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	82 0f       	add	r24, r18
 694:	93 1f       	adc	r25, r19
 696:	9c 01       	movw	r18, r24
 698:	22 0f       	add	r18, r18
 69a:	33 1f       	adc	r19, r19
 69c:	22 0f       	add	r18, r18
 69e:	33 1f       	adc	r19, r19
 6a0:	82 0f       	add	r24, r18
 6a2:	93 1f       	adc	r25, r19
 6a4:	8a 5e       	subi	r24, 0xEA	; 234
 6a6:	9e 4f       	sbci	r25, 0xFE	; 254
 6a8:	fc 01       	movw	r30, r24
 6aa:	40 81       	ld	r20, Z
 6ac:	51 81       	ldd	r21, Z+1	; 0x01
 6ae:	89 81       	ldd	r24, Y+1	; 0x01
 6b0:	28 2f       	mov	r18, r24
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	c9 01       	movw	r24, r18
 6b6:	88 0f       	add	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	82 0f       	add	r24, r18
 6bc:	93 1f       	adc	r25, r19
 6be:	9c 01       	movw	r18, r24
 6c0:	22 0f       	add	r18, r18
 6c2:	33 1f       	adc	r19, r19
 6c4:	22 0f       	add	r18, r18
 6c6:	33 1f       	adc	r19, r19
 6c8:	82 0f       	add	r24, r18
 6ca:	93 1f       	adc	r25, r19
 6cc:	8a 5e       	subi	r24, 0xEA	; 234
 6ce:	9e 4f       	sbci	r25, 0xFE	; 254
 6d0:	fc 01       	movw	r30, r24
 6d2:	80 81       	ld	r24, Z
 6d4:	91 81       	ldd	r25, Z+1	; 0x01
 6d6:	fc 01       	movw	r30, r24
 6d8:	80 81       	ld	r24, Z
 6da:	68 2f       	mov	r22, r24
 6dc:	89 81       	ldd	r24, Y+1	; 0x01
 6de:	28 2f       	mov	r18, r24
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	c9 01       	movw	r24, r18
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	82 0f       	add	r24, r18
 6ea:	93 1f       	adc	r25, r19
 6ec:	9c 01       	movw	r18, r24
 6ee:	22 0f       	add	r18, r18
 6f0:	33 1f       	adc	r19, r19
 6f2:	22 0f       	add	r18, r18
 6f4:	33 1f       	adc	r19, r19
 6f6:	82 0f       	add	r24, r18
 6f8:	93 1f       	adc	r25, r19
 6fa:	88 5e       	subi	r24, 0xE8	; 232
 6fc:	9e 4f       	sbci	r25, 0xFE	; 254
 6fe:	fc 01       	movw	r30, r24
 700:	80 81       	ld	r24, Z
 702:	28 2f       	mov	r18, r24
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	02 2e       	mov	r0, r18
 70c:	02 c0       	rjmp	.+4      	; 0x712 <m+0x146>
 70e:	88 0f       	add	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	0a 94       	dec	r0
 714:	e2 f7       	brpl	.-8      	; 0x70e <m+0x142>
 716:	80 95       	com	r24
 718:	86 23       	and	r24, r22
 71a:	fa 01       	movw	r30, r20
 71c:	80 83       	st	Z, r24
	if(select & 0x02)	sbi(*motor[no].d2.port, motor[no].d2.bit);
 71e:	8a 81       	ldd	r24, Y+2	; 0x02
 720:	88 2f       	mov	r24, r24
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	82 70       	andi	r24, 0x02	; 2
 726:	90 70       	andi	r25, 0x00	; 0
 728:	00 97       	sbiw	r24, 0x00	; 0
 72a:	09 f4       	brne	.+2      	; 0x72e <m+0x162>
 72c:	4c c0       	rjmp	.+152    	; 0x7c6 <m+0x1fa>
 72e:	89 81       	ldd	r24, Y+1	; 0x01
 730:	28 2f       	mov	r18, r24
 732:	30 e0       	ldi	r19, 0x00	; 0
 734:	c9 01       	movw	r24, r18
 736:	88 0f       	add	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	82 0f       	add	r24, r18
 73c:	93 1f       	adc	r25, r19
 73e:	9c 01       	movw	r18, r24
 740:	22 0f       	add	r18, r18
 742:	33 1f       	adc	r19, r19
 744:	22 0f       	add	r18, r18
 746:	33 1f       	adc	r19, r19
 748:	82 0f       	add	r24, r18
 74a:	93 1f       	adc	r25, r19
 74c:	85 5e       	subi	r24, 0xE5	; 229
 74e:	9e 4f       	sbci	r25, 0xFE	; 254
 750:	fc 01       	movw	r30, r24
 752:	40 81       	ld	r20, Z
 754:	51 81       	ldd	r21, Z+1	; 0x01
 756:	89 81       	ldd	r24, Y+1	; 0x01
 758:	28 2f       	mov	r18, r24
 75a:	30 e0       	ldi	r19, 0x00	; 0
 75c:	c9 01       	movw	r24, r18
 75e:	88 0f       	add	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	82 0f       	add	r24, r18
 764:	93 1f       	adc	r25, r19
 766:	9c 01       	movw	r18, r24
 768:	22 0f       	add	r18, r18
 76a:	33 1f       	adc	r19, r19
 76c:	22 0f       	add	r18, r18
 76e:	33 1f       	adc	r19, r19
 770:	82 0f       	add	r24, r18
 772:	93 1f       	adc	r25, r19
 774:	85 5e       	subi	r24, 0xE5	; 229
 776:	9e 4f       	sbci	r25, 0xFE	; 254
 778:	fc 01       	movw	r30, r24
 77a:	80 81       	ld	r24, Z
 77c:	91 81       	ldd	r25, Z+1	; 0x01
 77e:	fc 01       	movw	r30, r24
 780:	80 81       	ld	r24, Z
 782:	68 2f       	mov	r22, r24
 784:	89 81       	ldd	r24, Y+1	; 0x01
 786:	28 2f       	mov	r18, r24
 788:	30 e0       	ldi	r19, 0x00	; 0
 78a:	c9 01       	movw	r24, r18
 78c:	88 0f       	add	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	82 0f       	add	r24, r18
 792:	93 1f       	adc	r25, r19
 794:	9c 01       	movw	r18, r24
 796:	22 0f       	add	r18, r18
 798:	33 1f       	adc	r19, r19
 79a:	22 0f       	add	r18, r18
 79c:	33 1f       	adc	r19, r19
 79e:	82 0f       	add	r24, r18
 7a0:	93 1f       	adc	r25, r19
 7a2:	83 5e       	subi	r24, 0xE3	; 227
 7a4:	9e 4f       	sbci	r25, 0xFE	; 254
 7a6:	fc 01       	movw	r30, r24
 7a8:	80 81       	ld	r24, Z
 7aa:	28 2f       	mov	r18, r24
 7ac:	30 e0       	ldi	r19, 0x00	; 0
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	02 2e       	mov	r0, r18
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <m+0x1ee>
 7b6:	88 0f       	add	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	0a 94       	dec	r0
 7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <m+0x1ea>
 7be:	86 2b       	or	r24, r22
 7c0:	fa 01       	movw	r30, r20
 7c2:	80 83       	st	Z, r24
 7c4:	4b c0       	rjmp	.+150    	; 0x85c <m+0x290>
	else				cbi(*motor[no].d2.port, motor[no].d2.bit);
 7c6:	89 81       	ldd	r24, Y+1	; 0x01
 7c8:	28 2f       	mov	r18, r24
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	c9 01       	movw	r24, r18
 7ce:	88 0f       	add	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	82 0f       	add	r24, r18
 7d4:	93 1f       	adc	r25, r19
 7d6:	9c 01       	movw	r18, r24
 7d8:	22 0f       	add	r18, r18
 7da:	33 1f       	adc	r19, r19
 7dc:	22 0f       	add	r18, r18
 7de:	33 1f       	adc	r19, r19
 7e0:	82 0f       	add	r24, r18
 7e2:	93 1f       	adc	r25, r19
 7e4:	85 5e       	subi	r24, 0xE5	; 229
 7e6:	9e 4f       	sbci	r25, 0xFE	; 254
 7e8:	fc 01       	movw	r30, r24
 7ea:	40 81       	ld	r20, Z
 7ec:	51 81       	ldd	r21, Z+1	; 0x01
 7ee:	89 81       	ldd	r24, Y+1	; 0x01
 7f0:	28 2f       	mov	r18, r24
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	c9 01       	movw	r24, r18
 7f6:	88 0f       	add	r24, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	82 0f       	add	r24, r18
 7fc:	93 1f       	adc	r25, r19
 7fe:	9c 01       	movw	r18, r24
 800:	22 0f       	add	r18, r18
 802:	33 1f       	adc	r19, r19
 804:	22 0f       	add	r18, r18
 806:	33 1f       	adc	r19, r19
 808:	82 0f       	add	r24, r18
 80a:	93 1f       	adc	r25, r19
 80c:	85 5e       	subi	r24, 0xE5	; 229
 80e:	9e 4f       	sbci	r25, 0xFE	; 254
 810:	fc 01       	movw	r30, r24
 812:	80 81       	ld	r24, Z
 814:	91 81       	ldd	r25, Z+1	; 0x01
 816:	fc 01       	movw	r30, r24
 818:	80 81       	ld	r24, Z
 81a:	68 2f       	mov	r22, r24
 81c:	89 81       	ldd	r24, Y+1	; 0x01
 81e:	28 2f       	mov	r18, r24
 820:	30 e0       	ldi	r19, 0x00	; 0
 822:	c9 01       	movw	r24, r18
 824:	88 0f       	add	r24, r24
 826:	99 1f       	adc	r25, r25
 828:	82 0f       	add	r24, r18
 82a:	93 1f       	adc	r25, r19
 82c:	9c 01       	movw	r18, r24
 82e:	22 0f       	add	r18, r18
 830:	33 1f       	adc	r19, r19
 832:	22 0f       	add	r18, r18
 834:	33 1f       	adc	r19, r19
 836:	82 0f       	add	r24, r18
 838:	93 1f       	adc	r25, r19
 83a:	83 5e       	subi	r24, 0xE3	; 227
 83c:	9e 4f       	sbci	r25, 0xFE	; 254
 83e:	fc 01       	movw	r30, r24
 840:	80 81       	ld	r24, Z
 842:	28 2f       	mov	r18, r24
 844:	30 e0       	ldi	r19, 0x00	; 0
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	02 c0       	rjmp	.+4      	; 0x850 <m+0x284>
 84c:	88 0f       	add	r24, r24
 84e:	99 1f       	adc	r25, r25
 850:	2a 95       	dec	r18
 852:	e2 f7       	brpl	.-8      	; 0x84c <m+0x280>
 854:	80 95       	com	r24
 856:	86 23       	and	r24, r22
 858:	fa 01       	movw	r30, r20
 85a:	80 83       	st	Z, r24
	*motor[no].pwm.ocr = pwm;
 85c:	89 81       	ldd	r24, Y+1	; 0x01
 85e:	28 2f       	mov	r18, r24
 860:	30 e0       	ldi	r19, 0x00	; 0
 862:	c9 01       	movw	r24, r18
 864:	88 0f       	add	r24, r24
 866:	99 1f       	adc	r25, r25
 868:	82 0f       	add	r24, r18
 86a:	93 1f       	adc	r25, r19
 86c:	9c 01       	movw	r18, r24
 86e:	22 0f       	add	r18, r18
 870:	33 1f       	adc	r19, r19
 872:	22 0f       	add	r18, r18
 874:	33 1f       	adc	r19, r19
 876:	82 0f       	add	r24, r18
 878:	93 1f       	adc	r25, r19
 87a:	8f 5d       	subi	r24, 0xDF	; 223
 87c:	9e 4f       	sbci	r25, 0xFE	; 254
 87e:	fc 01       	movw	r30, r24
 880:	80 81       	ld	r24, Z
 882:	91 81       	ldd	r25, Z+1	; 0x01
 884:	2b 81       	ldd	r18, Y+3	; 0x03
 886:	fc 01       	movw	r30, r24
 888:	20 83       	st	Z, r18
}
 88a:	0f 90       	pop	r0
 88c:	0f 90       	pop	r0
 88e:	0f 90       	pop	r0
 890:	cf 91       	pop	r28
 892:	df 91       	pop	r29
 894:	08 95       	ret

00000896 <AddressSetter>:

static uint8_t AddressSetter(void){
 896:	df 93       	push	r29
 898:	cf 93       	push	r28
 89a:	cd b7       	in	r28, 0x3d	; 61
 89c:	de b7       	in	r29, 0x3e	; 62
	return (GetDipSwitchStatus() | 0x20);
 89e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <GetDipSwitchStatus>
 8a2:	80 62       	ori	r24, 0x20	; 32
}
 8a4:	cf 91       	pop	r28
 8a6:	df 91       	pop	r29
 8a8:	08 95       	ret

000008aa <MotorInitialize>:

void MotorInitialize(void){
 8aa:	df 93       	push	r29
 8ac:	cf 93       	push	r28
 8ae:	0f 92       	push	r0
 8b0:	cd b7       	in	r28, 0x3d	; 61
 8b2:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t i;
	phase = 0;
 8b4:	10 92 5c 01 	sts	0x015C, r1
	val = 0;
 8b8:	10 92 5b 01 	sts	0x015B, r1
	count = 0;
 8bc:	10 92 5d 01 	sts	0x015D, r1
	
	for(i = 0; i < 4; i++){
 8c0:	19 82       	std	Y+1, r1	; 0x01
 8c2:	ad c0       	rjmp	.+346    	; 0xa1e <MotorInitialize+0x174>
		sbi(*motor[i].d1.ddr, motor[i].d1.bit);
 8c4:	89 81       	ldd	r24, Y+1	; 0x01
 8c6:	28 2f       	mov	r18, r24
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	c9 01       	movw	r24, r18
 8cc:	88 0f       	add	r24, r24
 8ce:	99 1f       	adc	r25, r25
 8d0:	82 0f       	add	r24, r18
 8d2:	93 1f       	adc	r25, r19
 8d4:	9c 01       	movw	r18, r24
 8d6:	22 0f       	add	r18, r18
 8d8:	33 1f       	adc	r19, r19
 8da:	22 0f       	add	r18, r18
 8dc:	33 1f       	adc	r19, r19
 8de:	82 0f       	add	r24, r18
 8e0:	93 1f       	adc	r25, r19
 8e2:	8c 5e       	subi	r24, 0xEC	; 236
 8e4:	9e 4f       	sbci	r25, 0xFE	; 254
 8e6:	fc 01       	movw	r30, r24
 8e8:	20 81       	ld	r18, Z
 8ea:	31 81       	ldd	r19, Z+1	; 0x01
 8ec:	f9 01       	movw	r30, r18
 8ee:	80 81       	ld	r24, Z
 8f0:	68 2f       	mov	r22, r24
 8f2:	89 81       	ldd	r24, Y+1	; 0x01
 8f4:	48 2f       	mov	r20, r24
 8f6:	50 e0       	ldi	r21, 0x00	; 0
 8f8:	ca 01       	movw	r24, r20
 8fa:	88 0f       	add	r24, r24
 8fc:	99 1f       	adc	r25, r25
 8fe:	84 0f       	add	r24, r20
 900:	95 1f       	adc	r25, r21
 902:	ac 01       	movw	r20, r24
 904:	44 0f       	add	r20, r20
 906:	55 1f       	adc	r21, r21
 908:	44 0f       	add	r20, r20
 90a:	55 1f       	adc	r21, r21
 90c:	84 0f       	add	r24, r20
 90e:	95 1f       	adc	r25, r21
 910:	88 5e       	subi	r24, 0xE8	; 232
 912:	9e 4f       	sbci	r25, 0xFE	; 254
 914:	fc 01       	movw	r30, r24
 916:	80 81       	ld	r24, Z
 918:	48 2f       	mov	r20, r24
 91a:	50 e0       	ldi	r21, 0x00	; 0
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	02 c0       	rjmp	.+4      	; 0x926 <MotorInitialize+0x7c>
 922:	88 0f       	add	r24, r24
 924:	99 1f       	adc	r25, r25
 926:	4a 95       	dec	r20
 928:	e2 f7       	brpl	.-8      	; 0x922 <MotorInitialize+0x78>
 92a:	86 2b       	or	r24, r22
 92c:	f9 01       	movw	r30, r18
 92e:	80 83       	st	Z, r24
		sbi(*motor[i].d2.ddr, motor[i].d2.bit);
 930:	89 81       	ldd	r24, Y+1	; 0x01
 932:	28 2f       	mov	r18, r24
 934:	30 e0       	ldi	r19, 0x00	; 0
 936:	c9 01       	movw	r24, r18
 938:	88 0f       	add	r24, r24
 93a:	99 1f       	adc	r25, r25
 93c:	82 0f       	add	r24, r18
 93e:	93 1f       	adc	r25, r19
 940:	9c 01       	movw	r18, r24
 942:	22 0f       	add	r18, r18
 944:	33 1f       	adc	r19, r19
 946:	22 0f       	add	r18, r18
 948:	33 1f       	adc	r19, r19
 94a:	82 0f       	add	r24, r18
 94c:	93 1f       	adc	r25, r19
 94e:	87 5e       	subi	r24, 0xE7	; 231
 950:	9e 4f       	sbci	r25, 0xFE	; 254
 952:	fc 01       	movw	r30, r24
 954:	20 81       	ld	r18, Z
 956:	31 81       	ldd	r19, Z+1	; 0x01
 958:	f9 01       	movw	r30, r18
 95a:	80 81       	ld	r24, Z
 95c:	68 2f       	mov	r22, r24
 95e:	89 81       	ldd	r24, Y+1	; 0x01
 960:	48 2f       	mov	r20, r24
 962:	50 e0       	ldi	r21, 0x00	; 0
 964:	ca 01       	movw	r24, r20
 966:	88 0f       	add	r24, r24
 968:	99 1f       	adc	r25, r25
 96a:	84 0f       	add	r24, r20
 96c:	95 1f       	adc	r25, r21
 96e:	ac 01       	movw	r20, r24
 970:	44 0f       	add	r20, r20
 972:	55 1f       	adc	r21, r21
 974:	44 0f       	add	r20, r20
 976:	55 1f       	adc	r21, r21
 978:	84 0f       	add	r24, r20
 97a:	95 1f       	adc	r25, r21
 97c:	83 5e       	subi	r24, 0xE3	; 227
 97e:	9e 4f       	sbci	r25, 0xFE	; 254
 980:	fc 01       	movw	r30, r24
 982:	80 81       	ld	r24, Z
 984:	48 2f       	mov	r20, r24
 986:	50 e0       	ldi	r21, 0x00	; 0
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	02 c0       	rjmp	.+4      	; 0x992 <MotorInitialize+0xe8>
 98e:	88 0f       	add	r24, r24
 990:	99 1f       	adc	r25, r25
 992:	4a 95       	dec	r20
 994:	e2 f7       	brpl	.-8      	; 0x98e <MotorInitialize+0xe4>
 996:	86 2b       	or	r24, r22
 998:	f9 01       	movw	r30, r18
 99a:	80 83       	st	Z, r24
		
		sbi(*motor[i].pwm.ddr, motor[i].pwm.bit);
 99c:	89 81       	ldd	r24, Y+1	; 0x01
 99e:	28 2f       	mov	r18, r24
 9a0:	30 e0       	ldi	r19, 0x00	; 0
 9a2:	c9 01       	movw	r24, r18
 9a4:	88 0f       	add	r24, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	82 0f       	add	r24, r18
 9aa:	93 1f       	adc	r25, r19
 9ac:	9c 01       	movw	r18, r24
 9ae:	22 0f       	add	r18, r18
 9b0:	33 1f       	adc	r19, r19
 9b2:	22 0f       	add	r18, r18
 9b4:	33 1f       	adc	r19, r19
 9b6:	82 0f       	add	r24, r18
 9b8:	93 1f       	adc	r25, r19
 9ba:	82 5e       	subi	r24, 0xE2	; 226
 9bc:	9e 4f       	sbci	r25, 0xFE	; 254
 9be:	fc 01       	movw	r30, r24
 9c0:	20 81       	ld	r18, Z
 9c2:	31 81       	ldd	r19, Z+1	; 0x01
 9c4:	f9 01       	movw	r30, r18
 9c6:	80 81       	ld	r24, Z
 9c8:	68 2f       	mov	r22, r24
 9ca:	89 81       	ldd	r24, Y+1	; 0x01
 9cc:	48 2f       	mov	r20, r24
 9ce:	50 e0       	ldi	r21, 0x00	; 0
 9d0:	ca 01       	movw	r24, r20
 9d2:	88 0f       	add	r24, r24
 9d4:	99 1f       	adc	r25, r25
 9d6:	84 0f       	add	r24, r20
 9d8:	95 1f       	adc	r25, r21
 9da:	ac 01       	movw	r20, r24
 9dc:	44 0f       	add	r20, r20
 9de:	55 1f       	adc	r21, r21
 9e0:	44 0f       	add	r20, r20
 9e2:	55 1f       	adc	r21, r21
 9e4:	84 0f       	add	r24, r20
 9e6:	95 1f       	adc	r25, r21
 9e8:	80 5e       	subi	r24, 0xE0	; 224
 9ea:	9e 4f       	sbci	r25, 0xFE	; 254
 9ec:	fc 01       	movw	r30, r24
 9ee:	80 81       	ld	r24, Z
 9f0:	48 2f       	mov	r20, r24
 9f2:	50 e0       	ldi	r21, 0x00	; 0
 9f4:	81 e0       	ldi	r24, 0x01	; 1
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	04 2e       	mov	r0, r20
 9fa:	02 c0       	rjmp	.+4      	; 0xa00 <MotorInitialize+0x156>
 9fc:	88 0f       	add	r24, r24
 9fe:	99 1f       	adc	r25, r25
 a00:	0a 94       	dec	r0
 a02:	e2 f7       	brpl	.-8      	; 0x9fc <MotorInitialize+0x152>
 a04:	86 2b       	or	r24, r22
 a06:	f9 01       	movw	r30, r18
 a08:	80 83       	st	Z, r24
		
		MotorData.data[i] = 0x00;
 a0a:	89 81       	ldd	r24, Y+1	; 0x01
 a0c:	88 2f       	mov	r24, r24
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	89 5a       	subi	r24, 0xA9	; 169
 a12:	9e 4f       	sbci	r25, 0xFE	; 254
 a14:	fc 01       	movw	r30, r24
 a16:	10 82       	st	Z, r1
	volatile uint8_t i;
	phase = 0;
	val = 0;
	count = 0;
	
	for(i = 0; i < 4; i++){
 a18:	89 81       	ldd	r24, Y+1	; 0x01
 a1a:	8f 5f       	subi	r24, 0xFF	; 255
 a1c:	89 83       	std	Y+1, r24	; 0x01
 a1e:	89 81       	ldd	r24, Y+1	; 0x01
 a20:	84 30       	cpi	r24, 0x04	; 4
 a22:	08 f4       	brcc	.+2      	; 0xa26 <MotorInitialize+0x17c>
 a24:	4f cf       	rjmp	.-354    	; 0x8c4 <MotorInitialize+0x1a>
		sbi(*motor[i].pwm.ddr, motor[i].pwm.bit);
		
		MotorData.data[i] = 0x00;
	}
	
	MotorData.addr = AddressSetter();
 a26:	0e 94 4b 04 	call	0x896	; 0x896 <AddressSetter>
 a2a:	80 93 56 01 	sts	0x0156, r24
	
	// Timer
	TCCR0 = 0x6C;
 a2e:	83 e5       	ldi	r24, 0x53	; 83
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	2c e6       	ldi	r18, 0x6C	; 108
 a34:	fc 01       	movw	r30, r24
 a36:	20 83       	st	Z, r18
	
	TCCR1A = 0xA9;
 a38:	8f e4       	ldi	r24, 0x4F	; 79
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	29 ea       	ldi	r18, 0xA9	; 169
 a3e:	fc 01       	movw	r30, r24
 a40:	20 83       	st	Z, r18
	TCCR1B = 0x0B;
 a42:	8e e4       	ldi	r24, 0x4E	; 78
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	2b e0       	ldi	r18, 0x0B	; 11
 a48:	fc 01       	movw	r30, r24
 a4a:	20 83       	st	Z, r18
}
 a4c:	0f 90       	pop	r0
 a4e:	cf 91       	pop	r28
 a50:	df 91       	pop	r29
 a52:	08 95       	ret

00000a54 <MotorDrive>:

void MotorDrive(){
 a54:	df 93       	push	r29
 a56:	cf 93       	push	r28
 a58:	0f 92       	push	r0
 a5a:	cd b7       	in	r28, 0x3d	; 61
 a5c:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t i;
	
	cli();
 a5e:	f8 94       	cli
	
	if(GetSwitchStatus(0) || GetSwitchStatus(1)){
 a60:	80 e0       	ldi	r24, 0x00	; 0
 a62:	0e 94 17 01 	call	0x22e	; 0x22e <GetSwitchStatus>
 a66:	88 23       	and	r24, r24
 a68:	29 f4       	brne	.+10     	; 0xa74 <MotorDrive+0x20>
 a6a:	81 e0       	ldi	r24, 0x01	; 1
 a6c:	0e 94 17 01 	call	0x22e	; 0x22e <GetSwitchStatus>
 a70:	88 23       	and	r24, r24
 a72:	29 f0       	breq	.+10     	; 0xa7e <MotorDrive+0x2a>
		MotorData.data[0] |= 0xFF;
 a74:	80 91 57 01 	lds	r24, 0x0157
 a78:	8f ef       	ldi	r24, 0xFF	; 255
 a7a:	80 93 57 01 	sts	0x0157, r24
	}
	
	if(PowerCheck()){
 a7e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <PowerCheck>
 a82:	88 23       	and	r24, r24
 a84:	11 f0       	breq	.+4      	; 0xa8a <MotorDrive+0x36>
		RS485_DataInitialize();
 a86:	0e 94 ce 02 	call	0x59c	; 0x59c <RS485_DataInitialize>
	}
	
	for(i = 0; i < 4; i++){
 a8a:	19 82       	std	Y+1, r1	; 0x01
 a8c:	17 c0       	rjmp	.+46     	; 0xabc <MotorDrive+0x68>
		m(i, MotorData.data[i], MotorData.data[i]);
 a8e:	39 81       	ldd	r19, Y+1	; 0x01
 a90:	89 81       	ldd	r24, Y+1	; 0x01
 a92:	88 2f       	mov	r24, r24
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	89 5a       	subi	r24, 0xA9	; 169
 a98:	9e 4f       	sbci	r25, 0xFE	; 254
 a9a:	fc 01       	movw	r30, r24
 a9c:	20 81       	ld	r18, Z
 a9e:	89 81       	ldd	r24, Y+1	; 0x01
 aa0:	88 2f       	mov	r24, r24
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	89 5a       	subi	r24, 0xA9	; 169
 aa6:	9e 4f       	sbci	r25, 0xFE	; 254
 aa8:	fc 01       	movw	r30, r24
 aaa:	90 81       	ld	r25, Z
 aac:	83 2f       	mov	r24, r19
 aae:	62 2f       	mov	r22, r18
 ab0:	49 2f       	mov	r20, r25
 ab2:	0e 94 e6 02 	call	0x5cc	; 0x5cc <m>
	
	if(PowerCheck()){
		RS485_DataInitialize();
	}
	
	for(i = 0; i < 4; i++){
 ab6:	89 81       	ldd	r24, Y+1	; 0x01
 ab8:	8f 5f       	subi	r24, 0xFF	; 255
 aba:	89 83       	std	Y+1, r24	; 0x01
 abc:	89 81       	ldd	r24, Y+1	; 0x01
 abe:	84 30       	cpi	r24, 0x04	; 4
 ac0:	30 f3       	brcs	.-52     	; 0xa8e <MotorDrive+0x3a>
		m(i, MotorData.data[i], MotorData.data[i]);
	}
	
	sei();
 ac2:	78 94       	sei
}
 ac4:	0f 90       	pop	r0
 ac6:	cf 91       	pop	r28
 ac8:	df 91       	pop	r29
 aca:	08 95       	ret

00000acc <__vector_30>:

ISR(USART1_RX_vect) {
 acc:	1f 92       	push	r1
 ace:	0f 92       	push	r0
 ad0:	0f b6       	in	r0, 0x3f	; 63
 ad2:	0f 92       	push	r0
 ad4:	11 24       	eor	r1, r1
 ad6:	2f 93       	push	r18
 ad8:	3f 93       	push	r19
 ada:	4f 93       	push	r20
 adc:	5f 93       	push	r21
 ade:	6f 93       	push	r22
 ae0:	7f 93       	push	r23
 ae2:	8f 93       	push	r24
 ae4:	9f 93       	push	r25
 ae6:	af 93       	push	r26
 ae8:	bf 93       	push	r27
 aea:	ef 93       	push	r30
 aec:	ff 93       	push	r31
 aee:	df 93       	push	r29
 af0:	cf 93       	push	r28
 af2:	cd b7       	in	r28, 0x3d	; 61
 af4:	de b7       	in	r29, 0x3e	; 62
	val = UDR1;
 af6:	8c e9       	ldi	r24, 0x9C	; 156
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	fc 01       	movw	r30, r24
 afc:	80 81       	ld	r24, Z
 afe:	80 93 5b 01 	sts	0x015B, r24
	
	if(phase == 1){
 b02:	80 91 5c 01 	lds	r24, 0x015C
 b06:	81 30       	cpi	r24, 0x01	; 1
 b08:	29 f5       	brne	.+74     	; 0xb54 <__vector_30+0x88>
		if(addrCheck){
 b0a:	80 91 5e 01 	lds	r24, 0x015E
 b0e:	88 23       	and	r24, r24
 b10:	89 f0       	breq	.+34     	; 0xb34 <__vector_30+0x68>
			if(val == MotorData.addr){
 b12:	90 91 56 01 	lds	r25, 0x0156
 b16:	80 91 5b 01 	lds	r24, 0x015B
 b1a:	98 17       	cp	r25, r24
 b1c:	31 f4       	brne	.+12     	; 0xb2a <__vector_30+0x5e>
				phase = 2;
 b1e:	82 e0       	ldi	r24, 0x02	; 2
 b20:	80 93 5c 01 	sts	0x015C, r24
				count = 0;
 b24:	10 92 5d 01 	sts	0x015D, r1
 b28:	02 c0       	rjmp	.+4      	; 0xb2e <__vector_30+0x62>
			}
			else{
				phase = 0;
 b2a:	10 92 5c 01 	sts	0x015C, r1
			}
			addrCheck = false;
 b2e:	10 92 5e 01 	sts	0x015E, r1
 b32:	57 c0       	rjmp	.+174    	; 0xbe2 <__vector_30+0x116>
		}
		else if(val == '@' && !addrCheck){
 b34:	80 91 5b 01 	lds	r24, 0x015B
 b38:	80 34       	cpi	r24, 0x40	; 64
 b3a:	09 f0       	breq	.+2      	; 0xb3e <__vector_30+0x72>
 b3c:	52 c0       	rjmp	.+164    	; 0xbe2 <__vector_30+0x116>
 b3e:	90 91 5e 01 	lds	r25, 0x015E
 b42:	81 e0       	ldi	r24, 0x01	; 1
 b44:	89 27       	eor	r24, r25
 b46:	88 23       	and	r24, r24
 b48:	09 f4       	brne	.+2      	; 0xb4c <__vector_30+0x80>
 b4a:	4b c0       	rjmp	.+150    	; 0xbe2 <__vector_30+0x116>
			addrCheck = true;
 b4c:	81 e0       	ldi	r24, 0x01	; 1
 b4e:	80 93 5e 01 	sts	0x015E, r24
 b52:	47 c0       	rjmp	.+142    	; 0xbe2 <__vector_30+0x116>
		}
	}		
	else if(phase == 2){
 b54:	80 91 5c 01 	lds	r24, 0x015C
 b58:	82 30       	cpi	r24, 0x02	; 2
 b5a:	09 f0       	breq	.+2      	; 0xb5e <__vector_30+0x92>
 b5c:	42 c0       	rjmp	.+132    	; 0xbe2 <__vector_30+0x116>
		packet[count] = val;
 b5e:	80 91 5d 01 	lds	r24, 0x015D
 b62:	88 2f       	mov	r24, r24
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	20 91 5b 01 	lds	r18, 0x015B
 b6a:	81 5a       	subi	r24, 0xA1	; 161
 b6c:	9e 4f       	sbci	r25, 0xFE	; 254
 b6e:	fc 01       	movw	r30, r24
 b70:	20 83       	st	Z, r18
		if(count < 2){
 b72:	80 91 5d 01 	lds	r24, 0x015D
 b76:	82 30       	cpi	r24, 0x02	; 2
 b78:	98 f4       	brcc	.+38     	; 0xba0 <__vector_30+0xd4>
			if(val != check[count]){
 b7a:	80 91 5d 01 	lds	r24, 0x015D
 b7e:	88 2f       	mov	r24, r24
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	80 5b       	subi	r24, 0xB0	; 176
 b84:	9e 4f       	sbci	r25, 0xFE	; 254
 b86:	fc 01       	movw	r30, r24
 b88:	90 81       	ld	r25, Z
 b8a:	80 91 5b 01 	lds	r24, 0x015B
 b8e:	98 17       	cp	r25, r24
 b90:	19 f1       	breq	.+70     	; 0xbd8 <__vector_30+0x10c>
				phase = 0;
 b92:	10 92 5c 01 	sts	0x015C, r1
				LedDrive(0, false);
 b96:	80 e0       	ldi	r24, 0x00	; 0
 b98:	60 e0       	ldi	r22, 0x00	; 0
 b9a:	0e 94 2f 02 	call	0x45e	; 0x45e <LedDrive>
 b9e:	1c c0       	rjmp	.+56     	; 0xbd8 <__vector_30+0x10c>
			}		
		}
		else if(count >= 6){
 ba0:	80 91 5d 01 	lds	r24, 0x015D
 ba4:	86 30       	cpi	r24, 0x06	; 6
 ba6:	c0 f0       	brcs	.+48     	; 0xbd8 <__vector_30+0x10c>
			MotorData.data[0] = packet[3];
 ba8:	80 91 62 01 	lds	r24, 0x0162
 bac:	80 93 57 01 	sts	0x0157, r24
			MotorData.data[1] = packet[4];
 bb0:	80 91 63 01 	lds	r24, 0x0163
 bb4:	80 93 58 01 	sts	0x0158, r24
			MotorData.data[2] = packet[5];
 bb8:	80 91 64 01 	lds	r24, 0x0164
 bbc:	80 93 59 01 	sts	0x0159, r24
			MotorData.data[3] = packet[6];
 bc0:	80 91 65 01 	lds	r24, 0x0165
 bc4:	80 93 5a 01 	sts	0x015A, r24
				
			phase = 0;
 bc8:	10 92 5c 01 	sts	0x015C, r1
			timerCounter = 0;
 bcc:	10 92 79 01 	sts	0x0179, r1
			LedDrive(0, true);
 bd0:	80 e0       	ldi	r24, 0x00	; 0
 bd2:	61 e0       	ldi	r22, 0x01	; 1
 bd4:	0e 94 2f 02 	call	0x45e	; 0x45e <LedDrive>
		}
		count++;
 bd8:	80 91 5d 01 	lds	r24, 0x015D
 bdc:	8f 5f       	subi	r24, 0xFF	; 255
 bde:	80 93 5d 01 	sts	0x015D, r24
	}
	
	if(StartCodeCheck){
 be2:	80 91 77 01 	lds	r24, 0x0177
 be6:	88 23       	and	r24, r24
 be8:	71 f0       	breq	.+28     	; 0xc06 <__vector_30+0x13a>
		if(val == '$'){
 bea:	80 91 5b 01 	lds	r24, 0x015B
 bee:	84 32       	cpi	r24, 0x24	; 36
 bf0:	89 f4       	brne	.+34     	; 0xc14 <__vector_30+0x148>
			StartCodeCheck = false;
 bf2:	10 92 77 01 	sts	0x0177, r1
			phase = 1;
 bf6:	81 e0       	ldi	r24, 0x01	; 1
 bf8:	80 93 5c 01 	sts	0x015C, r24
			count = 0;
 bfc:	10 92 5d 01 	sts	0x015D, r1
			LineStatus = DATA_IN_LINE;
 c00:	10 92 54 01 	sts	0x0154, r1
 c04:	07 c0       	rjmp	.+14     	; 0xc14 <__vector_30+0x148>
		}
	}
	else{
		if(val == '%'){
 c06:	80 91 5b 01 	lds	r24, 0x015B
 c0a:	85 32       	cpi	r24, 0x25	; 37
 c0c:	19 f4       	brne	.+6      	; 0xc14 <__vector_30+0x148>
			StartCodeCheck = true;
 c0e:	81 e0       	ldi	r24, 0x01	; 1
 c10:	80 93 77 01 	sts	0x0177, r24
		}
	}
	
	if(EndCodeCheck){
 c14:	80 91 78 01 	lds	r24, 0x0178
 c18:	88 23       	and	r24, r24
 c1a:	51 f0       	breq	.+20     	; 0xc30 <__vector_30+0x164>
		if(val == '\n'){
 c1c:	80 91 5b 01 	lds	r24, 0x015B
 c20:	8a 30       	cpi	r24, 0x0A	; 10
 c22:	69 f4       	brne	.+26     	; 0xc3e <__vector_30+0x172>
			EndCodeCheck = false;
 c24:	10 92 78 01 	sts	0x0178, r1
			LineStatus = NO_DATA_IN_LINE;
 c28:	81 e0       	ldi	r24, 0x01	; 1
 c2a:	80 93 54 01 	sts	0x0154, r24
 c2e:	07 c0       	rjmp	.+14     	; 0xc3e <__vector_30+0x172>
		}
	}
	else {
		if(val == '\r'){
 c30:	80 91 5b 01 	lds	r24, 0x015B
 c34:	8d 30       	cpi	r24, 0x0D	; 13
 c36:	19 f4       	brne	.+6      	; 0xc3e <__vector_30+0x172>
			EndCodeCheck = true;
 c38:	81 e0       	ldi	r24, 0x01	; 1
 c3a:	80 93 78 01 	sts	0x0178, r24
		}
	}
}
 c3e:	cf 91       	pop	r28
 c40:	df 91       	pop	r29
 c42:	ff 91       	pop	r31
 c44:	ef 91       	pop	r30
 c46:	bf 91       	pop	r27
 c48:	af 91       	pop	r26
 c4a:	9f 91       	pop	r25
 c4c:	8f 91       	pop	r24
 c4e:	7f 91       	pop	r23
 c50:	6f 91       	pop	r22
 c52:	5f 91       	pop	r21
 c54:	4f 91       	pop	r20
 c56:	3f 91       	pop	r19
 c58:	2f 91       	pop	r18
 c5a:	0f 90       	pop	r0
 c5c:	0f be       	out	0x3f, r0	; 63
 c5e:	0f 90       	pop	r0
 c60:	1f 90       	pop	r1
 c62:	18 95       	reti

00000c64 <__vector_29>:

ISR(TIMER3_OVF_vect){
 c64:	1f 92       	push	r1
 c66:	0f 92       	push	r0
 c68:	0f b6       	in	r0, 0x3f	; 63
 c6a:	0f 92       	push	r0
 c6c:	11 24       	eor	r1, r1
 c6e:	2f 93       	push	r18
 c70:	3f 93       	push	r19
 c72:	4f 93       	push	r20
 c74:	5f 93       	push	r21
 c76:	6f 93       	push	r22
 c78:	7f 93       	push	r23
 c7a:	8f 93       	push	r24
 c7c:	9f 93       	push	r25
 c7e:	af 93       	push	r26
 c80:	bf 93       	push	r27
 c82:	ef 93       	push	r30
 c84:	ff 93       	push	r31
 c86:	df 93       	push	r29
 c88:	cf 93       	push	r28
 c8a:	cd b7       	in	r28, 0x3d	; 61
 c8c:	de b7       	in	r29, 0x3e	; 62
	timerCounter++;
 c8e:	80 91 79 01 	lds	r24, 0x0179
 c92:	8f 5f       	subi	r24, 0xFF	; 255
 c94:	80 93 79 01 	sts	0x0179, r24
	
	if(timerCounter > 10){
 c98:	80 91 79 01 	lds	r24, 0x0179
 c9c:	8b 30       	cpi	r24, 0x0B	; 11
 c9e:	40 f0       	brcs	.+16     	; 0xcb0 <__vector_29+0x4c>
		timerCounter = 0;
 ca0:	10 92 79 01 	sts	0x0179, r1
		RS485_DataInitialize();
 ca4:	0e 94 ce 02 	call	0x59c	; 0x59c <RS485_DataInitialize>
		LedDrive(0, false);
 ca8:	80 e0       	ldi	r24, 0x00	; 0
 caa:	60 e0       	ldi	r22, 0x00	; 0
 cac:	0e 94 2f 02 	call	0x45e	; 0x45e <LedDrive>
	}
}
 cb0:	cf 91       	pop	r28
 cb2:	df 91       	pop	r29
 cb4:	ff 91       	pop	r31
 cb6:	ef 91       	pop	r30
 cb8:	bf 91       	pop	r27
 cba:	af 91       	pop	r26
 cbc:	9f 91       	pop	r25
 cbe:	8f 91       	pop	r24
 cc0:	7f 91       	pop	r23
 cc2:	6f 91       	pop	r22
 cc4:	5f 91       	pop	r21
 cc6:	4f 91       	pop	r20
 cc8:	3f 91       	pop	r19
 cca:	2f 91       	pop	r18
 ccc:	0f 90       	pop	r0
 cce:	0f be       	out	0x3f, r0	; 63
 cd0:	0f 90       	pop	r0
 cd2:	1f 90       	pop	r1
 cd4:	18 95       	reti

00000cd6 <RS485_Select>:
#include <avr/interrupt.h>
#include "../globalDef.h"
#include "../Uart/Uart.h"
#include "./RS485.h"

static void RS485_Select(uint8_t option){
 cd6:	df 93       	push	r29
 cd8:	cf 93       	push	r28
 cda:	0f 92       	push	r0
 cdc:	cd b7       	in	r28, 0x3d	; 61
 cde:	de b7       	in	r29, 0x3e	; 62
 ce0:	89 83       	std	Y+1, r24	; 0x01
	if(option)		sbi(PORTD, PD4);
 ce2:	89 81       	ldd	r24, Y+1	; 0x01
 ce4:	88 23       	and	r24, r24
 ce6:	51 f0       	breq	.+20     	; 0xcfc <RS485_Select+0x26>
 ce8:	82 e3       	ldi	r24, 0x32	; 50
 cea:	90 e0       	ldi	r25, 0x00	; 0
 cec:	22 e3       	ldi	r18, 0x32	; 50
 cee:	30 e0       	ldi	r19, 0x00	; 0
 cf0:	f9 01       	movw	r30, r18
 cf2:	20 81       	ld	r18, Z
 cf4:	20 61       	ori	r18, 0x10	; 16
 cf6:	fc 01       	movw	r30, r24
 cf8:	20 83       	st	Z, r18
 cfa:	09 c0       	rjmp	.+18     	; 0xd0e <RS485_Select+0x38>
	else			cbi(PORTD, PD4);
 cfc:	82 e3       	ldi	r24, 0x32	; 50
 cfe:	90 e0       	ldi	r25, 0x00	; 0
 d00:	22 e3       	ldi	r18, 0x32	; 50
 d02:	30 e0       	ldi	r19, 0x00	; 0
 d04:	f9 01       	movw	r30, r18
 d06:	20 81       	ld	r18, Z
 d08:	2f 7e       	andi	r18, 0xEF	; 239
 d0a:	fc 01       	movw	r30, r24
 d0c:	20 83       	st	Z, r18
}
 d0e:	0f 90       	pop	r0
 d10:	cf 91       	pop	r28
 d12:	df 91       	pop	r29
 d14:	08 95       	ret

00000d16 <RS485Initialize>:

void RS485Initialize(uint8_t baud){
 d16:	df 93       	push	r29
 d18:	cf 93       	push	r28
 d1a:	0f 92       	push	r0
 d1c:	cd b7       	in	r28, 0x3d	; 61
 d1e:	de b7       	in	r29, 0x3e	; 62
 d20:	89 83       	std	Y+1, r24	; 0x01
	UartInitialize(UART_RE | UART_TE | UART_RXCIE, baud);
 d22:	88 e9       	ldi	r24, 0x98	; 152
 d24:	69 81       	ldd	r22, Y+1	; 0x01
 d26:	0e 94 17 07 	call	0xe2e	; 0xe2e <UartInitialize>
	sbi(DDRD, PD4);
 d2a:	81 e3       	ldi	r24, 0x31	; 49
 d2c:	90 e0       	ldi	r25, 0x00	; 0
 d2e:	21 e3       	ldi	r18, 0x31	; 49
 d30:	30 e0       	ldi	r19, 0x00	; 0
 d32:	f9 01       	movw	r30, r18
 d34:	20 81       	ld	r18, Z
 d36:	20 61       	ori	r18, 0x10	; 16
 d38:	fc 01       	movw	r30, r24
 d3a:	20 83       	st	Z, r18
	
	RS485_Select(RS485_RE);
 d3c:	80 e0       	ldi	r24, 0x00	; 0
 d3e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <RS485_Select>
}
 d42:	0f 90       	pop	r0
 d44:	cf 91       	pop	r28
 d46:	df 91       	pop	r29
 d48:	08 95       	ret

00000d4a <RS485_putchar>:

void RS485_putchar(uint8_t data){
 d4a:	df 93       	push	r29
 d4c:	cf 93       	push	r28
 d4e:	0f 92       	push	r0
 d50:	cd b7       	in	r28, 0x3d	; 61
 d52:	de b7       	in	r29, 0x3e	; 62
 d54:	89 83       	std	Y+1, r24	; 0x01
	cli();
 d56:	f8 94       	cli
	RS485_Select(RS485_SE);
 d58:	81 e0       	ldi	r24, 0x01	; 1
 d5a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <RS485_Select>
	uart_putchar(data);
 d5e:	89 81       	ldd	r24, Y+1	; 0x01
 d60:	0e 94 63 07 	call	0xec6	; 0xec6 <uart_putchar>
	RS485_Select(RS485_RE);
 d64:	80 e0       	ldi	r24, 0x00	; 0
 d66:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <RS485_Select>
	sei();
 d6a:	78 94       	sei
}
 d6c:	0f 90       	pop	r0
 d6e:	cf 91       	pop	r28
 d70:	df 91       	pop	r29
 d72:	08 95       	ret

00000d74 <RS485_getchar>:

void RS485_getchar(uint8_t *data){
 d74:	df 93       	push	r29
 d76:	cf 93       	push	r28
 d78:	00 d0       	rcall	.+0      	; 0xd7a <RS485_getchar+0x6>
 d7a:	cd b7       	in	r28, 0x3d	; 61
 d7c:	de b7       	in	r29, 0x3e	; 62
 d7e:	9a 83       	std	Y+2, r25	; 0x02
 d80:	89 83       	std	Y+1, r24	; 0x01
	cli();
 d82:	f8 94       	cli
	RS485_Select(RS485_RE);
 d84:	80 e0       	ldi	r24, 0x00	; 0
 d86:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <RS485_Select>
	uart_getchar(data);
 d8a:	89 81       	ldd	r24, Y+1	; 0x01
 d8c:	9a 81       	ldd	r25, Y+2	; 0x02
 d8e:	0e 94 97 07 	call	0xf2e	; 0xf2e <uart_getchar>
	sei();
 d92:	78 94       	sei
}
 d94:	0f 90       	pop	r0
 d96:	0f 90       	pop	r0
 d98:	cf 91       	pop	r28
 d9a:	df 91       	pop	r29
 d9c:	08 95       	ret

00000d9e <SafetyInitialize>:
#include <stdbool.h>
#include "../globalDef.h"
#include "../Led/Led.h"
#include "./Safety.h"

void SafetyInitialize(void){
 d9e:	df 93       	push	r29
 da0:	cf 93       	push	r28
 da2:	cd b7       	in	r28, 0x3d	; 61
 da4:	de b7       	in	r29, 0x3e	; 62
	// Power
	cbi(DDRA, PA0);
 da6:	8a e3       	ldi	r24, 0x3A	; 58
 da8:	90 e0       	ldi	r25, 0x00	; 0
 daa:	2a e3       	ldi	r18, 0x3A	; 58
 dac:	30 e0       	ldi	r19, 0x00	; 0
 dae:	f9 01       	movw	r30, r18
 db0:	20 81       	ld	r18, Z
 db2:	2e 7f       	andi	r18, 0xFE	; 254
 db4:	fc 01       	movw	r30, r24
 db6:	20 83       	st	Z, r18
	sbi(PORTA, PA0);
 db8:	8b e3       	ldi	r24, 0x3B	; 59
 dba:	90 e0       	ldi	r25, 0x00	; 0
 dbc:	2b e3       	ldi	r18, 0x3B	; 59
 dbe:	30 e0       	ldi	r19, 0x00	; 0
 dc0:	f9 01       	movw	r30, r18
 dc2:	20 81       	ld	r18, Z
 dc4:	21 60       	ori	r18, 0x01	; 1
 dc6:	fc 01       	movw	r30, r24
 dc8:	20 83       	st	Z, r18
	
	// Timer
	TCCR3A = 0x00;
 dca:	8b e8       	ldi	r24, 0x8B	; 139
 dcc:	90 e0       	ldi	r25, 0x00	; 0
 dce:	fc 01       	movw	r30, r24
 dd0:	10 82       	st	Z, r1
	TCCR3B = 0x02;
 dd2:	8a e8       	ldi	r24, 0x8A	; 138
 dd4:	90 e0       	ldi	r25, 0x00	; 0
 dd6:	22 e0       	ldi	r18, 0x02	; 2
 dd8:	fc 01       	movw	r30, r24
 dda:	20 83       	st	Z, r18
	ETIMSK = 0x04;
 ddc:	8d e7       	ldi	r24, 0x7D	; 125
 dde:	90 e0       	ldi	r25, 0x00	; 0
 de0:	24 e0       	ldi	r18, 0x04	; 4
 de2:	fc 01       	movw	r30, r24
 de4:	20 83       	st	Z, r18
	TCNT3 = 0;
 de6:	88 e8       	ldi	r24, 0x88	; 136
 de8:	90 e0       	ldi	r25, 0x00	; 0
 dea:	fc 01       	movw	r30, r24
 dec:	11 82       	std	Z+1, r1	; 0x01
 dee:	10 82       	st	Z, r1
}
 df0:	cf 91       	pop	r28
 df2:	df 91       	pop	r29
 df4:	08 95       	ret

00000df6 <PowerCheck>:

bool PowerCheck(void){
 df6:	df 93       	push	r29
 df8:	cf 93       	push	r28
 dfa:	cd b7       	in	r28, 0x3d	; 61
 dfc:	de b7       	in	r29, 0x3e	; 62
	if(!bit_is_set(PINA, PA0)){
 dfe:	89 e3       	ldi	r24, 0x39	; 57
 e00:	90 e0       	ldi	r25, 0x00	; 0
 e02:	fc 01       	movw	r30, r24
 e04:	80 81       	ld	r24, Z
 e06:	88 2f       	mov	r24, r24
 e08:	90 e0       	ldi	r25, 0x00	; 0
 e0a:	81 70       	andi	r24, 0x01	; 1
 e0c:	90 70       	andi	r25, 0x00	; 0
 e0e:	00 97       	sbiw	r24, 0x00	; 0
 e10:	31 f4       	brne	.+12     	; 0xe1e <PowerCheck+0x28>
		LedDrive(1, true);
 e12:	81 e0       	ldi	r24, 0x01	; 1
 e14:	61 e0       	ldi	r22, 0x01	; 1
 e16:	0e 94 2f 02 	call	0x45e	; 0x45e <LedDrive>
		return false;
 e1a:	80 e0       	ldi	r24, 0x00	; 0
 e1c:	05 c0       	rjmp	.+10     	; 0xe28 <PowerCheck+0x32>
	}
	else{
		LedDrive(1, false);
 e1e:	81 e0       	ldi	r24, 0x01	; 1
 e20:	60 e0       	ldi	r22, 0x00	; 0
 e22:	0e 94 2f 02 	call	0x45e	; 0x45e <LedDrive>
		return true;
 e26:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 e28:	cf 91       	pop	r28
 e2a:	df 91       	pop	r29
 e2c:	08 95       	ret

00000e2e <UartInitialize>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "../globalDef.h"

void UartInitialize(uint8_t option, uint8_t baudrate){
 e2e:	df 93       	push	r29
 e30:	cf 93       	push	r28
 e32:	00 d0       	rcall	.+0      	; 0xe34 <UartInitialize+0x6>
 e34:	00 d0       	rcall	.+0      	; 0xe36 <UartInitialize+0x8>
 e36:	cd b7       	in	r28, 0x3d	; 61
 e38:	de b7       	in	r29, 0x3e	; 62
 e3a:	8b 83       	std	Y+3, r24	; 0x03
 e3c:	6c 83       	std	Y+4, r22	; 0x04
	uint16_t loop;
	sbi(UCSR1A, U2X1);
 e3e:	8b e9       	ldi	r24, 0x9B	; 155
 e40:	90 e0       	ldi	r25, 0x00	; 0
 e42:	2b e9       	ldi	r18, 0x9B	; 155
 e44:	30 e0       	ldi	r19, 0x00	; 0
 e46:	f9 01       	movw	r30, r18
 e48:	20 81       	ld	r18, Z
 e4a:	22 60       	ori	r18, 0x02	; 2
 e4c:	fc 01       	movw	r30, r24
 e4e:	20 83       	st	Z, r18
	
	UCSR1B = 0x00;
 e50:	8a e9       	ldi	r24, 0x9A	; 154
 e52:	90 e0       	ldi	r25, 0x00	; 0
 e54:	fc 01       	movw	r30, r24
 e56:	10 82       	st	Z, r1
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);
 e58:	8d e9       	ldi	r24, 0x9D	; 157
 e5a:	90 e0       	ldi	r25, 0x00	; 0
 e5c:	26 e0       	ldi	r18, 0x06	; 6
 e5e:	fc 01       	movw	r30, r24
 e60:	20 83       	st	Z, r18
	
	for(loop=0; loop<5000; loop++);
 e62:	1a 82       	std	Y+2, r1	; 0x02
 e64:	19 82       	std	Y+1, r1	; 0x01
 e66:	05 c0       	rjmp	.+10     	; 0xe72 <UartInitialize+0x44>
 e68:	89 81       	ldd	r24, Y+1	; 0x01
 e6a:	9a 81       	ldd	r25, Y+2	; 0x02
 e6c:	01 96       	adiw	r24, 0x01	; 1
 e6e:	9a 83       	std	Y+2, r25	; 0x02
 e70:	89 83       	std	Y+1, r24	; 0x01
 e72:	89 81       	ldd	r24, Y+1	; 0x01
 e74:	9a 81       	ldd	r25, Y+2	; 0x02
 e76:	f3 e1       	ldi	r31, 0x13	; 19
 e78:	88 38       	cpi	r24, 0x88	; 136
 e7a:	9f 07       	cpc	r25, r31
 e7c:	a8 f3       	brcs	.-22     	; 0xe68 <UartInitialize+0x3a>
	
	UCSR1A &= 0xE3;
 e7e:	8b e9       	ldi	r24, 0x9B	; 155
 e80:	90 e0       	ldi	r25, 0x00	; 0
 e82:	2b e9       	ldi	r18, 0x9B	; 155
 e84:	30 e0       	ldi	r19, 0x00	; 0
 e86:	f9 01       	movw	r30, r18
 e88:	20 81       	ld	r18, Z
 e8a:	23 7e       	andi	r18, 0xE3	; 227
 e8c:	fc 01       	movw	r30, r24
 e8e:	20 83       	st	Z, r18
	UCSR1B = option;
 e90:	8a e9       	ldi	r24, 0x9A	; 154
 e92:	90 e0       	ldi	r25, 0x00	; 0
 e94:	2b 81       	ldd	r18, Y+3	; 0x03
 e96:	fc 01       	movw	r30, r24
 e98:	20 83       	st	Z, r18
	
	UBRR1H = (uint8_t)(baudrate>>8);
 e9a:	88 e9       	ldi	r24, 0x98	; 152
 e9c:	90 e0       	ldi	r25, 0x00	; 0
 e9e:	2c 81       	ldd	r18, Y+4	; 0x04
 ea0:	22 2f       	mov	r18, r18
 ea2:	30 e0       	ldi	r19, 0x00	; 0
 ea4:	23 2f       	mov	r18, r19
 ea6:	33 0f       	add	r19, r19
 ea8:	33 0b       	sbc	r19, r19
 eaa:	fc 01       	movw	r30, r24
 eac:	20 83       	st	Z, r18
	UBRR1L = (uint8_t)(baudrate);
 eae:	89 e9       	ldi	r24, 0x99	; 153
 eb0:	90 e0       	ldi	r25, 0x00	; 0
 eb2:	2c 81       	ldd	r18, Y+4	; 0x04
 eb4:	fc 01       	movw	r30, r24
 eb6:	20 83       	st	Z, r18
}
 eb8:	0f 90       	pop	r0
 eba:	0f 90       	pop	r0
 ebc:	0f 90       	pop	r0
 ebe:	0f 90       	pop	r0
 ec0:	cf 91       	pop	r28
 ec2:	df 91       	pop	r29
 ec4:	08 95       	ret

00000ec6 <uart_putchar>:

void uart_putchar(uint8_t data){
 ec6:	df 93       	push	r29
 ec8:	cf 93       	push	r28
 eca:	00 d0       	rcall	.+0      	; 0xecc <uart_putchar+0x6>
 ecc:	0f 92       	push	r0
 ece:	cd b7       	in	r28, 0x3d	; 61
 ed0:	de b7       	in	r29, 0x3e	; 62
 ed2:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint16_t i;
	while(!bit_is_set(UCSR1A, UDRE1));
 ed4:	00 00       	nop
 ed6:	8b e9       	ldi	r24, 0x9B	; 155
 ed8:	90 e0       	ldi	r25, 0x00	; 0
 eda:	fc 01       	movw	r30, r24
 edc:	80 81       	ld	r24, Z
 ede:	88 2f       	mov	r24, r24
 ee0:	90 e0       	ldi	r25, 0x00	; 0
 ee2:	80 72       	andi	r24, 0x20	; 32
 ee4:	90 70       	andi	r25, 0x00	; 0
 ee6:	00 97       	sbiw	r24, 0x00	; 0
 ee8:	b1 f3       	breq	.-20     	; 0xed6 <uart_putchar+0x10>
	UDR1 = data;
 eea:	8c e9       	ldi	r24, 0x9C	; 156
 eec:	90 e0       	ldi	r25, 0x00	; 0
 eee:	2b 81       	ldd	r18, Y+3	; 0x03
 ef0:	fc 01       	movw	r30, r24
 ef2:	20 83       	st	Z, r18
	
	cbi(UCSR1A, UDRE1);
 ef4:	8b e9       	ldi	r24, 0x9B	; 155
 ef6:	90 e0       	ldi	r25, 0x00	; 0
 ef8:	2b e9       	ldi	r18, 0x9B	; 155
 efa:	30 e0       	ldi	r19, 0x00	; 0
 efc:	f9 01       	movw	r30, r18
 efe:	20 81       	ld	r18, Z
 f00:	2f 7d       	andi	r18, 0xDF	; 223
 f02:	fc 01       	movw	r30, r24
 f04:	20 83       	st	Z, r18
	
	for(i = 0; i < 5000; i++);
 f06:	1a 82       	std	Y+2, r1	; 0x02
 f08:	19 82       	std	Y+1, r1	; 0x01
 f0a:	05 c0       	rjmp	.+10     	; 0xf16 <uart_putchar+0x50>
 f0c:	89 81       	ldd	r24, Y+1	; 0x01
 f0e:	9a 81       	ldd	r25, Y+2	; 0x02
 f10:	01 96       	adiw	r24, 0x01	; 1
 f12:	9a 83       	std	Y+2, r25	; 0x02
 f14:	89 83       	std	Y+1, r24	; 0x01
 f16:	89 81       	ldd	r24, Y+1	; 0x01
 f18:	9a 81       	ldd	r25, Y+2	; 0x02
 f1a:	f3 e1       	ldi	r31, 0x13	; 19
 f1c:	88 38       	cpi	r24, 0x88	; 136
 f1e:	9f 07       	cpc	r25, r31
 f20:	a8 f3       	brcs	.-22     	; 0xf0c <uart_putchar+0x46>
}
 f22:	0f 90       	pop	r0
 f24:	0f 90       	pop	r0
 f26:	0f 90       	pop	r0
 f28:	cf 91       	pop	r28
 f2a:	df 91       	pop	r29
 f2c:	08 95       	ret

00000f2e <uart_getchar>:

void uart_getchar(uint8_t *data){
 f2e:	df 93       	push	r29
 f30:	cf 93       	push	r28
 f32:	00 d0       	rcall	.+0      	; 0xf34 <uart_getchar+0x6>
 f34:	cd b7       	in	r28, 0x3d	; 61
 f36:	de b7       	in	r29, 0x3e	; 62
 f38:	9a 83       	std	Y+2, r25	; 0x02
 f3a:	89 83       	std	Y+1, r24	; 0x01
	while(!bit_is_set(UCSR1A, RXC1));
 f3c:	00 00       	nop
 f3e:	8b e9       	ldi	r24, 0x9B	; 155
 f40:	90 e0       	ldi	r25, 0x00	; 0
 f42:	fc 01       	movw	r30, r24
 f44:	80 81       	ld	r24, Z
 f46:	88 23       	and	r24, r24
 f48:	d4 f7       	brge	.-12     	; 0xf3e <uart_getchar+0x10>
	*data = UDR1;
 f4a:	8c e9       	ldi	r24, 0x9C	; 156
 f4c:	90 e0       	ldi	r25, 0x00	; 0
 f4e:	fc 01       	movw	r30, r24
 f50:	20 81       	ld	r18, Z
 f52:	89 81       	ldd	r24, Y+1	; 0x01
 f54:	9a 81       	ldd	r25, Y+2	; 0x02
 f56:	fc 01       	movw	r30, r24
 f58:	20 83       	st	Z, r18
	cbi(UCSR1A, RXC1);
 f5a:	8b e9       	ldi	r24, 0x9B	; 155
 f5c:	90 e0       	ldi	r25, 0x00	; 0
 f5e:	2b e9       	ldi	r18, 0x9B	; 155
 f60:	30 e0       	ldi	r19, 0x00	; 0
 f62:	f9 01       	movw	r30, r18
 f64:	20 81       	ld	r18, Z
 f66:	2f 77       	andi	r18, 0x7F	; 127
 f68:	fc 01       	movw	r30, r24
 f6a:	20 83       	st	Z, r18
}
 f6c:	0f 90       	pop	r0
 f6e:	0f 90       	pop	r0
 f70:	cf 91       	pop	r28
 f72:	df 91       	pop	r29
 f74:	08 95       	ret

00000f76 <_exit>:
 f76:	f8 94       	cli

00000f78 <__stop_program>:
 f78:	ff cf       	rjmp	.-2      	; 0xf78 <__stop_program>
